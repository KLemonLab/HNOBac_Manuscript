[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "HNOBac Manuscript",
    "section": "",
    "text": "Introduction\nThis repository includes Supplemental Methods for the manuscript Nasal microbionts differentially colonize and elicit cytokines in human nasal epithelial organoids."
  },
  {
    "objectID": "Methods_RNASeq.html#data-input-and-selection",
    "href": "Methods_RNASeq.html#data-input-and-selection",
    "title": "RNASeq",
    "section": "Data Input and Selection",
    "text": "Data Input and Selection\n\nFile Paths\n\n# Folder paths\ninput_path &lt;- \"data/input_data/RNASeq/\"\nmetadata_path &lt;- \"data/metadata/RNASeq\"\n\n# Create subfolders for output files\ndataframes_folder &lt;- \"data/dataframes\"\nif (!file.exists(\"data/dataframes\")) {\n  dir.create(\"data/dataframes\", recursive = TRUE)\n}\noutputs_folder &lt;- \"data/outputs/RNASeq\"\nif (!file.exists(\"data/outputs/RNASeq\")) {\n  dir.create(\"data/outputs/RNASeq\", recursive = TRUE)\n}\n\n# Load data and metadata\nmetadata &lt;- read_excel(file.path(metadata_path, \"hnoseq3437-metadata.xlsx\")) \ncounts &lt;- read_csv(file.path(input_path, \"hnoseq3437-hisat2.featureCounts-genes2-2batches.csv\"))\n\n\n\nData clean-up\n\n# Clean up unneeded columns and transform all columns into factors\nmetadata &lt;- metadata %&gt;%\n  select(-contains(c('_func','original_name'))) %&gt;%\n  mutate_all(factor)\n\n# Select only the rows with \"protein_coding\" as the GeneBiotype and transform in a matrix with GeneID as the rownames. Sort by GeneID\ncounts &lt;- counts %&gt;%\n  filter(GeneBiotype == \"protein_coding\") %&gt;% \n  column_to_rownames(var = \"GeneID\") %&gt;%\n  select(-contains('Gene')) %&gt;% \n  .[ order(names(.)) ]\n\n\n# Subset metadata to include only the samples relevant to this analysis \nsubset.metadata &lt;- metadata %&gt;% \n  subset(line != 'HVO262') %&gt;% # remove HVO262 samples\n  subset(temp != 'CT') %&gt;%  # remove CONTROL samples\n  subset(temp != '34') %&gt;%  # remove 34C samples\n  droplevels() %&gt;% \n  mutate(temp = factor(temp, labels = c(\"37 °C\", \"37 °C → 34 °C\")))  %&gt;% \n  mutate(line = factor(line, levels = c(\"HNO918\", \"HNO204\", \"HNO919\")))  %&gt;% \n  set_rownames(.$sampleid)\n\n# Keep counts column only for the selected samples \nsubset.counts &lt;- counts %&gt;% \n  select(contains(rownames(subset.metadata))) \n\n# Make the correesponding design matrix \ncoldata &lt;- data.frame(subset.metadata$line) %&gt;%\n  set_rownames(rownames(subset.metadata)) %&gt;%\n  setNames('condition') \n\n\n\nSaving files\n\n# Save data frames as CSV files in the dataframes folder\nwrite.csv(subset.counts, file.path(dataframes_folder, \"RNASeq_counts.csv\"), row.names = TRUE)\n\n# Save data frames as R objects in the dataframes folder\nsaveRDS(subset.counts, file.path(dataframes_folder, \"RNASeq_counts.rds\"))\n\n# Use this to read the final objects\nsubset.counts &lt;- readRDS(\"data/dataframes/RNASeq_counts.rds\")"
  },
  {
    "objectID": "Methods_RNASeq.html#deseq",
    "href": "Methods_RNASeq.html#deseq",
    "title": "RNASeq",
    "section": "DESeq",
    "text": "DESeq\n\n# Run DESeq\ndds01.cnts &lt;- DESeqDataSetFromMatrix(subset.counts, colData = coldata, design = ~ condition)\ndds02.dseq &lt;- DESeq(dds01.cnts)\ndds03.resu &lt;- results(dds02.dseq)\ndds04.vstf &lt;- vst(dds02.dseq,  blind = FALSE)\n\n\n# Get PCA dataframe and percentVar\npcadata &lt;- plotPCA(dds04.vstf, returnData = TRUE) \npcadata &lt;- left_join(pcadata, subset.metadata, by = c(\"name\" = \"sampleid\")) \n\n\nSaving files\n\n# Save data frames as CSV files in the output folder\nwrite_csv(pcadata, file.path(outputs_folder, \"PCA_values.csv\"))\n\n# Save data frames as R objects in the output folder\nsaveRDS(pcadata, file.path(outputs_folder, \"PCA_values.rds\"))\n\n# Cleaning-up all objects from the environment\nrm(list = ls())\n\n# Use this to read the final objects\npcadata &lt;- readRDS(\"data/outputs/RNASeq/PCA_values.rds\")"
  },
  {
    "objectID": "Methods_RNASeq.html#pca-plot",
    "href": "Methods_RNASeq.html#pca-plot",
    "title": "RNASeq",
    "section": "PCA Plot",
    "text": "PCA Plot\n\nFile Paths\n\n# Folder paths\noutputs_folder &lt;- \"data/outputs/RNASeq\"\n\n# Load data \npcadata &lt;- readRDS(\"data/outputs/RNASeq/PCA_values.rds\")\n\n\n\nPlot\n\npercentVar = round(100 * attr(pcadata, \"percentVar\"))\n\n\nPCAplot = ggplot(pcadata, aes(x = PC1, y = PC2, group = condition)) +\n  geom_point(aes(fill = temp, color = temp, shape = line), alpha = 0.75, size = 2, show.legend = c(shape = FALSE)) + \n  scale_fill_manual(values = c('#CC79A7', '#009E73')) +\n  scale_color_manual(values = c('#CC79A7', '#009E73')) +\n  scale_shape_manual(values = c(21, 22, 24)) +\n  labs(x = paste0(\"PC1: \", percentVar[1], \"% variance\"),\n       y = paste0(\"PC2: \", percentVar[2], \"% variance\"),\n       fill = \"Temperature\", color = \"Temperature\") +\n  #coord_fixed() +\n  theme_bw() +\n  theme(panel.grid = element_blank(),\n        text = element_text(size = 20),\n        axis.text.x = element_text(color = \"black\"),\n        axis.text.y = element_text(color = \"black\")) +\n  guides(fill = guide_legend(override.aes = list(shape = 21))) \n\nPCAplot\n\n\n\n\n\n\nSaving files\n\nggsave(PCAplot, filename = paste0(outputs_folder, \"/plotPCA.png\"), width = 6, height = 6)\nsaveRDS(PCAplot, file.path(outputs_folder, paste0(\"plotPCA.rds\")))"
  },
  {
    "objectID": "Methods_MOC.html#file-paths",
    "href": "Methods_MOC.html#file-paths",
    "title": "Cell Counts",
    "section": "File Paths",
    "text": "File Paths\n\n# Folder paths\nMOC_input_path &lt;- \"data/input_data/MOC\"\nCFUs_input_path &lt;- \"data/dataframes\"\n\n# Create subfolders for output files\ndataframes_folder &lt;- \"data/dataframes\"\nif (!file.exists(\"data/dataframes\")) {\n  dir.create(\"data/dataframes\", recursive = TRUE)\n}\noutputs_folder &lt;- \"data/outputs/MOC\"\nif (!file.exists(\"data/outputs/MOC\")) {\n  dir.create(\"data/outputs/MOC\", recursive = TRUE)\n}\n\n# Load data and metadata\nHNOCells &lt;- read_csv(file.path(MOC_input_path, \"MOC_HNOBac_2024.csv\")) \nCFUs &lt;- read_rds(file.path(CFUs_input_path, \"CFU_values.rds\"))"
  },
  {
    "objectID": "Methods_MOC.html#cells-per-hno-well",
    "href": "Methods_MOC.html#cells-per-hno-well",
    "title": "Cell Counts",
    "section": "Cells per HNO well",
    "text": "Cells per HNO well\n\nHNOCells$Date &lt;- as.factor(HNOCells$Date)\nHNOCells$Line &lt;- as.factor(HNOCells$Line)\nHNOCells &lt;- HNOCells  %&gt;%\n  mutate(Line = factor(Line, levels = c(\"HNO918\", \"HNO204\", \"HNO919\"))) \n\n\nHNOCells_summary &lt;- HNOCells %&gt;%\n  group_by(Line) %&gt;%\n  summarize(median_cells = median(Cells_HNO),\n            Q1 = quantile(Cells_HNO, 0.25),\n            Q3 = quantile(Cells_HNO, 0.75),\n            n = n(),\n            SE = sd(Cells_HNO)/sqrt(n),\n            CI = SE*1.96)\n\n\nPlot\n\nboxplot_HNOCells &lt;- ggplot() +\n  geom_boxplot(data = HNOCells, aes(x = Line, y = Cells_HNO)) +\n  \n  geom_jitter(data = HNOCells, aes(x = Line, y = Cells_HNO, shape = Line), \n             fill = \"#5b5b5b\", color = \"#5b5b5b\", size = 2, width = 0.15, alpha = 0.75) +\n  \n  scale_shape_manual(values = c(21, 22, 24)) +\n  scale_y_log10(limits = c(100000, 10000000),\n                labels = trans_format(\"log10\", math_format(10^.x))) +\n  labs(x = \"HNO Line\",\n       y = \"HNO Cells/Well\") +\n  theme_bw() +\n  theme(panel.grid = element_blank(),\n        text = element_text(size = 20), \n        axis.text.x = element_text(color = \"black\"),\n        axis.text.y = element_text(color = \"black\"))\nboxplot_HNOCells\n\n\n\n\n\n\nSaving files\n\nggsave(boxplot_HNOCells, filename = paste0(outputs_folder, \"/boxplot_HNOCells.png\"), width = 12, height = 10)\nsaveRDS(boxplot_HNOCells, file.path(outputs_folder, paste0(\"boxplot_HNOCells.rds\")))\n\n\n# Save data frames as CSV files in the metadata folder\nwrite_csv(HNOCells, file.path(dataframes_folder, \"HNOCells_values.csv\"))\n\n# Save data frames as R objects in the metadata folder\nsaveRDS(HNOCells, file.path(dataframes_folder, \"HNOCells_values.rds\"))\n\n# Use this to read the final objects\nHNOCells &lt;- readRDS(\"data/dataframes/HNOCells_values.rds\")"
  },
  {
    "objectID": "Methods_MOC.html#multiplicity-of-colonization",
    "href": "Methods_MOC.html#multiplicity-of-colonization",
    "title": "Cell Counts",
    "section": "Multiplicity of Colonization",
    "text": "Multiplicity of Colonization\n\nCFU_Inoculum &lt;- CFUs %&gt;%\n  filter(Time == \"0\") %&gt;%\n  group_by(Line, bacteria) %&gt;%\n  summarize(median_CFUs = median(NewCFU))\n\nCFU_Inoculum &lt;- left_join(CFU_Inoculum, HNOCells_summary, by = \"Line\")\n\nMOC_Calcs &lt;- CFU_Inoculum %&gt;%\n  mutate(MOC = (median_CFUs/median_cells)) %&gt;%\n  group_by(bacteria) %&gt;%\n  mutate(avg_MOC = (mean(MOC)))\n\n\nPlot\n\nboxplot_MOC &lt;- ggplot() +\n  geom_boxplot(data = MOC_Calcs, aes(x = bacteria, y = MOC, fill = bacteria)) +\n  \n  geom_jitter(data = MOC_Calcs, aes(x = bacteria, y = MOC, shape = Line), \n              fill = \"grey50\", color = \"grey30\", size = 2,  \n              width = 0.001, stroke = 0.75) +\n  scale_fill_manual(values = c(\"#2e67f2\",\"#AA35E3\",\"#927ed1\")) +\n  scale_shape_manual(values = c(21, 22, 24)) +\n  labs(title = \" \",\n       x = \"HNO Line\",\n       y = \"MOC\") +\n  theme_bw() +\n  theme(panel.grid = element_blank(), text = element_text(size = 30), \n        axis.text.x = element_markdown(), axis.text.y = element_text(color = \"black\"))\nboxplot_MOC\n\n\n\n\n\n\nSaving files\n\nggsave(boxplot_MOC, filename = paste0(outputs_folder, \"/boxplot_MOC.png\"), width = 12, height = 10)\nsaveRDS(boxplot_MOC, file.path(outputs_folder, paste0(\"boxplot_MOC.rds\")))\n\n\n# Save data frames as CSV files in the outputs folder\nwrite_csv(MOC_Calcs, file.path(outputs_folder, \"MOC_Calcs.csv\"))\n\n# Save data frames as R objects in the outputs folder\nsaveRDS(MOC_Calcs, file.path(outputs_folder, \"MOC_Calcs.rds\"))\n\n# Use this to read the final objects\nMOC_Calcs &lt;- readRDS(file.path(outputs_folder, paste0(\"MOC_Calcs.rds\")))"
  },
  {
    "objectID": "Methods_CFUs.html#data-input-and-selection",
    "href": "Methods_CFUs.html#data-input-and-selection",
    "title": "CFUs",
    "section": "Data Input and Selection",
    "text": "Data Input and Selection\n\nFile Paths\n\n# Folder paths\ninput_path &lt;- \"data/input_data/CFUs/\"\nmetadata_path &lt;- \"data/metadata/CFUs\"\n\n# Create subfolders for output files\ndataframes_folder &lt;- \"data/dataframes\"\nif (!file.exists(\"data/dataframes\")) {\n  dir.create(\"data/dataframes\", recursive = TRUE)\n}\n\n# Load data and metadata\ninput_data &lt;- read_csv(file.path(input_path, \"HNOBac_CFUs_0130_2024.csv\")) %&gt;% mutate_if(is.character, factor)\ninput_data$Time &lt;- as.factor(input_data$Time)\nBac_order &lt;- read_csv(file.path(metadata_path, \"Order_Bacteria_CFUs.csv\"))\n\n\n\nData clean-up\n\n# Setting zero values to the limit of detection\nCFU_data &lt;- input_data %&gt;%\n  mutate(\n    LOD = CFUs == 0,\n    NewCFU = ifelse(LOD, 3.75, CFUs)\n  )\n\n# Factor Ordering and Styling\nCFU_data &lt;- CFU_data %&gt;%\n  mutate(Combined = interaction(bacteria, Time))\nCFU_data &lt;- merge(CFU_data, Bac_order, by = \"Combined\") \nCFU_data$bacteria_label &lt;- factor(CFU_data$bacteria_label, levels = Bac_order$bacteria_label)\nCFU_data$Line &lt;- fct_recode(CFU_data$Line, \"HNO918\" = \"A\", \"HNO204\" = \"B\", \"HNO919\" = \"C\") \n\n\n\nSaving files\n\n# Save data frame as CSV files in the output folder\nwrite_csv(CFU_data, file.path(dataframes_folder, \"CFU_values.csv\"))\n\n# Save data frame as R objects in the output folder\nsaveRDS(CFU_data, file.path(dataframes_folder, \"CFU_values.rds\"))\n\n# Cleaning-up all objects from the environment\nrm(list = ls())\n\n# Use this to read the final objects\nCFU_data &lt;- readRDS(\"data/dataframes/CFU_values.rds\")"
  },
  {
    "objectID": "Methods_CFUs.html#stats-and-plots",
    "href": "Methods_CFUs.html#stats-and-plots",
    "title": "CFUs",
    "section": "Stats and Plots",
    "text": "Stats and Plots\n\nFile Paths\n\n# Folder paths\ndataframes_path &lt;- \"data/dataframes\"\nmetadata_path &lt;- \"data/metadata/CFUs\"\n\n# Create subfolders for output files\nfigures_folder &lt;- \"data/outputs/CFUs/figures\"\nif (!file.exists(\"data/outputs/CFUs/figures\")) {\n  dir.create(\"data/outputs/CFUs/figures\", recursive = TRUE)\n}\nstats_folder &lt;- \"data/outputs/CFUs/stats\"\nif (!file.exists(\"data/outputs/CFUs/stats\")) {\n  dir.create(\"data/outputs/CFUs/stats\", recursive = TRUE)\n}\n\n# Load data and metadata\nCFU_data &lt;- readRDS(\"data/dataframes/CFU_values.rds\")\nBac_order &lt;- read_csv(file.path(metadata_path, \"Order_Bacteria_CFUs.csv\"))\n\n\n\nFunction for each temp condition\n\n# Function to analyze each temp condition\nanalysis_function &lt;- function(data, each_temp, cutoff_pvalue, cutoff_FC) {\n  \n  # Subset the data to the selected temp\n  data_subset &lt;- data %&gt;%\n    filter(Temp == each_temp) \n  \n  # Remove time 0h from the stats\n  data_stats &lt;- data_subset %&gt;%\n    filter(Time != 0)\n  \n  # Mixed-effects model with random effects\n  model &lt;- lmer(log(NewCFU) ~ bacteria * Time \n                + (1|Line) + (1|Line:Date), \n                data = data_stats)\n  #Anova\n  anova &lt;- anova(model)\n  anova_df &lt;- as.data.frame(anova) %&gt;%\n    mutate(sign = case_when(\n      `Pr(&gt;F)` &lt; cutoff_pvalue ~ \"*\",\n      TRUE ~ \"\")) %&gt;%\n    mutate_if(is.numeric, ~ format(., digits = 2, scientific = TRUE))\n  \n  # Calculate Individual contrasts\n  emmeans_model &lt;- emmeans(model, ~ bacteria * Time)\n  emmeans_time &lt;- pairs(emmeans_model, simple = \"Time\", adjust = \"none\")    \n  \n  # Extract random effects and convert to dataframe (if not singular)\n  random_effects_df &lt;- as.data.frame(VarCorr(model)) %&gt;%\n    mutate(proportion = round(100 * (vcov / sum(vcov)), 2))\n  \n  # Adds predictions based on fixed effects, averaged over random effects. It gives a population estimate\n  data_stats &lt;- cbind(data_stats, predval = predict(model,re.form = NA, se.fit = TRUE))\n  data_summary_df &lt;- data_stats %&gt;%\n    group_by(Combined, bacteria_label) %&gt;%\n    summarize(mean.real = mean(NewCFU),\n              mean.predval = mean(predval.fit), \n              mean.predval.se = mean(predval.se.fit)) %&gt;%\n    mutate(exp.mean.predval = exp(mean.predval),\n           max = exp(mean.predval + 2*mean.predval.se),\n           min = exp(mean.predval - 2*mean.predval.se))\n  \n  # Extract time contrasts from emmeans_model, convert to dataframe and adjust pvalues\n  contrasts_time_df &lt;- as.data.frame(summary(emmeans_time)) %&gt;%\n    mutate(Temp = each_temp) %&gt;%\n    mutate(p.adj.holm = p.adjust(p.value, method = \"holm\")) %&gt;%\n    mutate(sign = case_when(\n      p.adj.holm &lt; cutoff_pvalue ~ \"*\",\n      TRUE ~ \"\"))\n  \n  # Edits to the contrast dataframe to include pvalue brackets in plot\n  contrasts_time_df &lt;- contrasts_time_df %&gt;%\n    separate(contrast, into = c(\"Time1\", \"Time2\"), sep = \" - \") %&gt;%\n    mutate(Time1 = sub(\"Time\", \"\", Time1),\n           Time2 = sub(\"Time\", \"\", Time2)) %&gt;%\n    mutate(condition1 = paste(bacteria, Time1, sep = \".\"),\n           condition2 = paste(bacteria, Time2, sep = \".\"))\n  \n  contrasts_time_df$group1 &lt;- Bac_order$bacteria_label[match(contrasts_time_df$condition1, Bac_order$Combined)]\n  contrasts_time_df$group2 &lt;- Bac_order$bacteria_label[match(contrasts_time_df$condition2, Bac_order$Combined)]\n  \n  # Calculate fold-change values for each contrast\n  contrasts_time_df &lt;- contrasts_time_df %&gt;%\n    ungroup() %&gt;%\n    left_join(select(data_summary_df, Combined, exp.mean.predval), by = join_by(condition1 == Combined)) %&gt;%\n    left_join(select(data_summary_df, Combined, exp.mean.predval), by = join_by(condition2 == Combined), suffix = c(\".1\", \".2\")) %&gt;%\n    mutate(FC = exp.mean.predval.1 / exp.mean.predval.2,\n           FC = if_else(FC &lt; 1, -1 / FC, FC),\n           highlighted = case_when(\n             FC &lt;= -cutoff_FC ~ \"+\",\n             FC &gt;= cutoff_FC ~ \"-\",\n             TRUE ~ \"\")) \n  \n  # Select p values to plot and define their location\n  contrast_sign &lt;- contrasts_time_df %&gt;%\n    filter(sign != \"\" & highlighted != \"\") %&gt;%\n    mutate(p.adj.holm = format(p.adj.holm, digits = 2, scientific = TRUE))\n  \n  location &lt;- log10(max(data_subset$NewCFU, na.rm = TRUE)) * 1.1\n  \n  # Standard Boxplot\n  plot_1 &lt;- ggplot() +\n    geom_boxplot(data = data_subset, aes(x = bacteria_label, y = NewCFU, fill = bacteria_label)) + \n    \n    geom_jitter(data = data_subset, aes(x = bacteria_label, y = NewCFU, shape = Line), \n                fill = \"grey50\", color = \"grey30\", size = 2, width = 0.05, stroke = 0.75) +\n    \n    scale_fill_manual(values = c(\"#AA35E3\",\"#AA35E3\",\"#AA35E3\",\n                                 \"#2e67f2\",\"#2e67f2\",\"#2e67f2\", \n                                 \"#927ed1\",\"#927ed1\",\"#927ed1\")) +\n    \n    scale_shape_manual(values = c(21, 22, 24)) +\n    \n    scale_y_log10(breaks = trans_breaks(\"log10\", function(x) 10^x),\n                  labels = trans_format(\"log10\", math_format(10^.x))) +\n    labs(x = \"Hours post-inoculation\",\n         y = paste0(\"CFUs/HNO at \", each_temp, \" °C\")) +\n    theme_bw() +\n    theme(panel.grid = element_blank(),\n          legend.position = \"none\",\n          text = element_text(size = 20), \n          axis.text.x = element_markdown(), \n          axis.text.y = element_text(color = \"black\"))\n  \n  # Plot with predicted means and standard errors of the estimates\n  plot_2 &lt;- ggplot() +\n    geom_point(data = data_subset, \n                aes(x = bacteria_label, y = NewCFU, fill = bacteria_label, color = bacteria_label, shape = Line, group = Line), \n                position = position_jitterdodge(dodge.width = 0.7, jitter.width = 0.2),\n                size = 1.5, alpha = 0.75, stroke = 0.75) +\n\n    geom_point(data = data_summary_df, aes(x = bacteria_label, y = exp.mean.predval), shape = 3, size = 3) +\n    geom_errorbar(data = data_summary_df, aes(x = bacteria_label,\n                                              y = exp.mean.predval,\n                                              ymax = max,\n                                              ymin = min),\n                  width = 0.5) +\n    \n    scale_fill_manual(values = c(\"#AA35E3\",\"#AA35E3\",\"#AA35E3\",\"#2e67f2\",\"#2e67f2\",\"#2e67f2\",\"#927ed1\",\"#927ed1\",\"#927ed1\")) +\n    scale_color_manual(values = c(\"#AA35E3\",\"#AA35E3\",\"#AA35E3\",\"#2e67f2\",\"#2e67f2\",\"#2e67f2\",\"#927ed1\",\"#927ed1\",\"#927ed1\")) +\n    scale_shape_manual(values = c(21, 22, 24)) +\n    \n    scale_y_log10(breaks = trans_breaks(\"log10\", function(x) 10^x),\n                  labels = trans_format(\"log10\", math_format(10^.x)),\n                  expand = c(0.1,0)) +\n    \n    labs(x = \"Hours post-inoculation\",\n         y = paste0(\"CFUs/HNO at \", each_temp, \" °C\")) +\n    theme_bw() +\n    theme(panel.grid = element_blank(), \n          legend.position = \"none\",\n          text = element_text(size = 20), \n          axis.text.x = element_markdown(), \n          axis.text.y = element_text(color = \"black\"))\n  \n  # Conditionally add p-value annotations layer\n  if (nrow(contrast_sign) &gt; 0) {\n    plot_2 &lt;- plot_2 +\n      stat_pvalue_manual(contrast_sign, label = \"p.adj.holm\", y.position = location,\n                         tip.length = 0.02, bracket.shorten = 0.2, vjust = -0.2, bracket.size = 0.3, size = 3.5)\n  } else {\n    plot_2 &lt;- plot_2\n  }\n  \n  # Arrange plot and tables for summary pdf\n  table &lt;- contrasts_time_df %&gt;%\n    select(condition1, condition2, p.adj.holm, sign, exp.mean.predval.1, exp.mean.predval.2, FC, highlighted) %&gt;%\n    mutate(p.adj.holm = format(p.adj.holm, digits = 2, scientific = TRUE))\n  \n  Tmin &lt;- ttheme_minimal()\n  panel &lt;- ggarrange(plot_1 + theme(plot.margin = unit(c(0.25,0.25,0.25,0.25), \"in\")), \n                     plot_2 + theme(plot.margin = unit(c(0.25,0.25,0.25,0.25), \"in\")),\n                     tableGrob(anova_df, theme = Tmin), \n                     tableGrob(random_effects_df, theme = Tmin, rows = NULL), \n                     tableGrob(table, theme = Tmin, rows = NULL), \n                     ncol = 1, heights = c(0.7, 0.7, 0.2, 0.2, 0.2),\n                     labels = c(\"  Standard Boxplot \", \"Predicted Mean ± 2*SE\", \"    Anova    \", \"Random Effects\", \"   Contrasts  \"))\n  panel &lt;- annotate_figure(panel, top = text_grob(\n    paste0(\"Analysis for \", each_temp, \"C. P-value: \", cutoff_pvalue, \" and FC: \", cutoff_FC),\n                                                         face = \"bold\", size = 14, color = \"red\"))\n  \n  # Save files\n  ggsave(panel, filename = paste0(figures_folder, \"/summaryCFU_\", each_temp, \".pdf\"), width = 10, height = 15)\n  ggsave(plot_2, filename = paste0(figures_folder, \"/plotCFU_\", each_temp, \".png\"), width = 7, height = 6)\n  saveRDS(plot_2, file.path(figures_folder, paste0(\"plotCFU_\", each_temp, \".rds\")))\n  write_csv(anova_df, file.path(stats_folder, paste0(\"anova_\", each_temp, \".csv\")))\n  write_csv(random_effects_df, file.path(stats_folder, paste0(\"stats_random_effects_\", each_temp, \".csv\")))\n  write_csv(contrasts_time_df, file.path(stats_folder, paste0(\"stats_contrasts_\", each_temp, \".csv\")))\n  write_csv(data_summary_df, file.path(stats_folder, paste0(\"stats_summary_\", each_temp, \".csv\")))\n  \n  return(list(\n    anova = anova_df,\n    random_effects = random_effects_df,\n    contrasts_time = contrasts_time_df,\n    data_summary = data_summary_df,\n    data_stats = data_stats,\n    plot_1 = plot_1,\n    plot_2 = plot_2,\n    panel = panel\n  ))\n}\n\n\n\nApply to each temp\n\nMain Data: 34C\n\nanalysis_function(CFU_data, each_temp = \"34\", cutoff_pvalue = 0.05, cutoff_FC = 1)\n\n$anova\n               Sum Sq Mean Sq NumDF   DenDF F value  Pr(&gt;F) sign\nbacteria      2.2e+02 1.1e+02     2 8.4e+01 1.0e+01 1.3e-04    *\nTime          1.2e+00 1.2e+00     1 7.4e+01 1.1e-01 7.4e-01     \nbacteria:Time 4.6e+02 2.3e+02     2 7.4e+01 2.1e+01 4.9e-08    *\n\n$random_effects\n        grp        var1 var2      vcov    sdcor proportion\n1 Line:Date (Intercept) &lt;NA&gt;  6.414043 2.532596      37.19\n2      Line (Intercept) &lt;NA&gt;  0.000000 0.000000       0.00\n3  Residual        &lt;NA&gt; &lt;NA&gt; 10.831722 3.291158      62.81\n\n$contrasts_time\n  Time1 Time2 bacteria  estimate       SE       df   t.ratio      p.value Temp\n1    24    48      Dpi  2.807217 1.097053 73.38104  2.558872 1.256251e-02   34\n2    24    48      Sau -5.797778 1.128858 73.38104 -5.135968 2.230214e-06   34\n3    24    48      Spn  3.651203 1.163600 73.38104  3.137850 2.450515e-03   34\n    p.adj.holm sign condition1 condition2\n1 1.256251e-02    *     Dpi.24     Dpi.48\n2 6.690641e-06    *     Sau.24     Sau.48\n3 4.901030e-03    *     Spn.24     Spn.48\n                                         group1\n1 &lt;b&gt;&lt;span style='color:#0443DC;'&gt;24&lt;/span&gt;&lt;/b&gt;\n2 &lt;b&gt;&lt;span style='color:#6D05A0;'&gt;24&lt;/span&gt;&lt;/b&gt;\n3 &lt;b&gt;&lt;span style='color:#927ED1;'&gt;24&lt;/span&gt;&lt;/b&gt;\n                                         group2 exp.mean.predval.1\n1 &lt;b&gt;&lt;span style='color:#0443DC;'&gt;48&lt;/span&gt;&lt;/b&gt;           54171.03\n2 &lt;b&gt;&lt;span style='color:#6D05A0;'&gt;48&lt;/span&gt;&lt;/b&gt;           28289.45\n3 &lt;b&gt;&lt;span style='color:#927ED1;'&gt;48&lt;/span&gt;&lt;/b&gt;         1216148.62\n  exp.mean.predval.2         FC highlighted\n1           3270.455   16.56376           -\n2        9323251.362 -329.56637           +\n3          31571.076   38.52097           -\n\n$data_summary\n# A tibble: 6 × 8\n# Groups:   Combined [6]\n  Combined bacteria_label                 mean.real mean.predval mean.predval.se\n  &lt;fct&gt;    &lt;fct&gt;                              &lt;dbl&gt;        &lt;dbl&gt;           &lt;dbl&gt;\n1 Dpi.24   &lt;b&gt;&lt;span style='color:#0443DC…    3.81e5        10.9            0.951\n2 Sau.24   &lt;b&gt;&lt;span style='color:#6D05A0…    4.42e6        10.3            0.973\n3 Spn.24   &lt;b&gt;&lt;span style='color:#927ED1…    1.04e7        14.0            0.998\n4 Dpi.48   &lt;b&gt;&lt;span style='color:#0443DC…    8.63e4         8.09           0.951\n5 Sau.48   &lt;b&gt;&lt;span style='color:#6D05A0…    1.36e8        16.0            0.973\n6 Spn.48   &lt;b&gt;&lt;span style='color:#927ED1…    1.34e7        10.4            0.998\n# ℹ 3 more variables: exp.mean.predval &lt;dbl&gt;, max &lt;dbl&gt;, min &lt;dbl&gt;\n\n$data_stats\n    Combined     Date   Line Temp Time bacteria Strain        CFUs   LOD\n1     Dpi.24  2/14/23 HNO919   34   24      Dpi   3065 1.31250e+06 FALSE\n2     Dpi.24   2/7/23 HNO204   34   24      Dpi   3065 1.98750e+03 FALSE\n3     Dpi.24   9/7/22 HNO918   34   24      Dpi   3065 6.26250e+05 FALSE\n4     Dpi.24  11/2/22 HNO919   34   24      Dpi   3065 1.01250e+03 FALSE\n5     Dpi.24  8/16/22 HNO919   34   24      Dpi   3065 9.11250e+04 FALSE\n6     Dpi.24  1/17/23 HNO204   34   24      Dpi   3065 1.05000e+03 FALSE\n7     Dpi.24   8/9/22 HNO918   34   24      Dpi   3065 8.25000e+05 FALSE\n8     Dpi.24  8/10/22 HNO204   34   24      Dpi   3065 4.83750e+05 FALSE\n9     Dpi.24  9/14/22 HNO919   34   24      Dpi   3065 5.13750e+04 FALSE\n10    Dpi.24  8/23/22 HNO204   34   24      Dpi   3065 1.91250e+06 FALSE\n11    Dpi.24  11/1/22 HNO919   34   24      Dpi   3065 4.12500e+05 FALSE\n12    Dpi.24  8/31/22 HNO204   34   24      Dpi   3065 1.46250e+04 FALSE\n13    Dpi.24  1/24/23 HNO919   34   24      Dpi   3065 9.00000e+05 FALSE\n14    Dpi.24  2/28/23 HNO204   34   24      Dpi   3065 8.25000e+03 FALSE\n15    Dpi.24  8/30/22 HNO918   34   24      Dpi   3065 2.36250e+03 FALSE\n16    Dpi.24  8/17/22 HNO918   34   24      Dpi   3065 3.30000e+04 FALSE\n17    Dpi.24  9/13/22 HNO204   34   24      Dpi   3065 9.60000e+01 FALSE\n18    Dpi.24   9/6/22 HNO919   34   24      Dpi   3065 1.83750e+05 FALSE\n19    Dpi.48  2/14/23 HNO919   34   48      Dpi   3065 2.77500e+04 FALSE\n20    Dpi.48   9/7/22 HNO918   34   48      Dpi   3065 3.78000e+02 FALSE\n21    Dpi.48  8/16/22 HNO919   34   48      Dpi   3065 7.80000e+03 FALSE\n22    Dpi.48   2/7/23 HNO204   34   48      Dpi   3065 1.95000e+02 FALSE\n23    Dpi.48  1/17/23 HNO204   34   48      Dpi   3065 0.00000e+00  TRUE\n24    Dpi.48  8/23/22 HNO204   34   48      Dpi   3065 6.33750e+05 FALSE\n25    Dpi.48  9/14/22 HNO919   34   48      Dpi   3065 6.45000e+04 FALSE\n26    Dpi.48  11/1/22 HNO919   34   48      Dpi   3065 3.67500e+04 FALSE\n27    Dpi.48  11/2/22 HNO919   34   48      Dpi   3065 2.55000e+02 FALSE\n28    Dpi.48  2/28/23 HNO204   34   48      Dpi   3065 9.00000e+01 FALSE\n29    Dpi.48  9/13/22 HNO204   34   48      Dpi   3065 0.00000e+00  TRUE\n30    Dpi.48  8/10/22 HNO204   34   48      Dpi   3065 6.18750e+05 FALSE\n31    Dpi.48   8/9/22 HNO918   34   48      Dpi   3065 2.47500e+04 FALSE\n32    Dpi.48   9/6/22 HNO919   34   48      Dpi   3065 2.02500e+02 FALSE\n33    Dpi.48  8/31/22 HNO204   34   48      Dpi   3065 1.20000e+05 FALSE\n34    Dpi.48  8/30/22 HNO918   34   48      Dpi   3065 1.31250e+03 FALSE\n35    Dpi.48  1/24/23 HNO919   34   48      Dpi   3065 1.61250e+04 FALSE\n36    Dpi.48  8/17/22 HNO918   34   48      Dpi   3065 7.12500e+02 FALSE\n37    Sau.24  8/17/22 HNO918   34   24      Sau   2115 1.08750e+03 FALSE\n38    Sau.24   2/7/23 HNO204   34   24      Sau   2115 0.00000e+00  TRUE\n39    Sau.24 10/11/22 HNO204   34   24      Sau   2115 2.85000e+06 FALSE\n40    Sau.24  9/27/22 HNO919   34   24      Sau   2115 2.55000e+03 FALSE\n41    Sau.24  8/30/22 HNO918   34   24      Sau   2115 1.95000e+05 FALSE\n42    Sau.24  10/4/22 HNO918   34   24      Sau   2115 1.68750e+04 FALSE\n43    Sau.24  8/31/22 HNO204   34   24      Sau   2115 9.75000e+04 FALSE\n44    Sau.24   9/6/22 HNO919   34   24      Sau   2115 7.12500e+03 FALSE\n45    Sau.24  9/14/22 HNO919   34   24      Sau   2115 8.62500e+03 FALSE\n46    Sau.24  8/16/22 HNO919   34   24      Sau   2115 1.53750e+03 FALSE\n47    Sau.24  2/28/23 HNO204   34   24      Sau   2115 4.57500e+05 FALSE\n48    Sau.24 10/25/22 HNO204   34   24      Sau   2115 4.68750e+04 FALSE\n49    Sau.24  9/21/22 HNO204   34   24      Sau   2115 2.32500e+03 FALSE\n50    Sau.24  9/20/22 HNO918   34   24      Sau   2115 1.68750e+03 FALSE\n51    Sau.24  2/14/23 HNO919   34   24      Sau   2115 2.70000e+04 FALSE\n52    Sau.24   9/7/22 HNO918   34   24      Sau   2115 7.12500e+07 FALSE\n53    Sau.24  1/17/23 HNO204   34   24      Sau   2115 1.61250e+05 FALSE\n54    Sau.48  8/17/22 HNO918   34   48      Sau   2115 1.50000e+08 FALSE\n55    Sau.48   9/6/22 HNO919   34   48      Sau   2115 1.46250e+04 FALSE\n56    Sau.48  8/16/22 HNO919   34   48      Sau   2115 2.47500e+05 FALSE\n57    Sau.48   2/7/23 HNO204   34   48      Sau   2115 1.01250e+08 FALSE\n58    Sau.48  8/30/22 HNO918   34   48      Sau   2115 5.77500e+06 FALSE\n59    Sau.48  9/14/22 HNO919   34   48      Sau   2115 3.86250e+05 FALSE\n60    Sau.48  10/4/22 HNO918   34   48      Sau   2115 1.31250e+08 FALSE\n61    Sau.48  1/17/23 HNO204   34   48      Sau   2115 1.65000e+06 FALSE\n62    Sau.48 10/11/22 HNO204   34   48      Sau   2115 3.90000e+08 FALSE\n63    Sau.48  8/31/22 HNO204   34   48      Sau   2115 1.27500e+08 FALSE\n64    Sau.48  2/14/23 HNO919   34   48      Sau   2115 1.05000e+06 FALSE\n65    Sau.48 10/25/22 HNO204   34   48      Sau   2115 6.26250e+06 FALSE\n66    Sau.48  9/20/22 HNO918   34   48      Sau   2115 1.05000e+09 FALSE\n67    Sau.48  9/21/22 HNO204   34   48      Sau   2115 2.66250e+04 FALSE\n68    Sau.48  9/27/22 HNO919   34   48      Sau   2115 1.35000e+08 FALSE\n69    Sau.48  2/28/23 HNO204   34   48      Sau   2115 2.10000e+04 FALSE\n70    Sau.48   9/7/22 HNO918   34   48      Sau   2115 2.17500e+08 FALSE\n71    Spn.24  8/10/22 HNO204   34   24      Spn   1906 1.22625e+07 FALSE\n72    Spn.24  1/24/23 HNO919   34   24      Spn   1906 5.58750e+06 FALSE\n73    Spn.24  9/13/22 HNO204   34   24      Spn   1906 2.40000e+04 FALSE\n74    Spn.24   8/9/22 HNO918   34   24      Spn   1906 2.52750e+07 FALSE\n75    Spn.24  8/23/22 HNO204   34   24      Spn   1906 1.65750e+07 FALSE\n76    Spn.24   2/7/23 HNO204   34   24      Spn   1906 9.75000e+06 FALSE\n77    Spn.24  8/31/22 HNO204   34   24      Spn   1906 1.80000e+04 FALSE\n78    Spn.24  1/17/23 HNO204   34   24      Spn   1906 3.30000e+06 FALSE\n79    Spn.24  2/28/23 HNO204   34   24      Spn   1906 6.71250e+04 FALSE\n80    Spn.24  9/14/22 HNO919   34   24      Spn   1906 5.73750e+05 FALSE\n81    Spn.24  8/30/22 HNO918   34   24      Spn   1906 2.36250e+05 FALSE\n82    Spn.24  2/14/23 HNO919   34   24      Spn   1906 3.30000e+07 FALSE\n83    Spn.24  9/27/22 HNO919   34   24      Spn   1906 2.92500e+07 FALSE\n84    Spn.24   9/6/22 HNO919   34   24      Spn   1906 9.03750e+04 FALSE\n85    Spn.24  10/4/22 HNO918   34   24      Spn   1906 3.03750e+07 FALSE\n86    Spn.24 10/11/22 HNO204   34   24      Spn   1906 1.23750e+04 FALSE\n87    Spn.48  8/10/22 HNO204   34   48      Spn   1906 1.53750e+07 FALSE\n88    Spn.48  1/24/23 HNO919   34   48      Spn   1906 1.35000e+06 FALSE\n89    Spn.48  9/13/22 HNO204   34   48      Spn   1906 0.00000e+00  TRUE\n90    Spn.48  8/23/22 HNO204   34   48      Spn   1906 3.78750e+07 FALSE\n91    Spn.48  1/17/23 HNO204   34   48      Spn   1906 0.00000e+00  TRUE\n92    Spn.48   8/9/22 HNO918   34   48      Spn   1906 6.15000e+07 FALSE\n93    Spn.48  8/31/22 HNO204   34   48      Spn   1906 6.78750e+04 FALSE\n94    Spn.48   9/6/22 HNO919   34   48      Spn   1906 5.55000e+01 FALSE\n95    Spn.48   2/7/23 HNO204   34   48      Spn   1906 0.00000e+00  TRUE\n96    Spn.48  2/28/23 HNO204   34   48      Spn   1906 1.03875e+04 FALSE\n97    Spn.48  10/4/22 HNO918   34   48      Spn   1906 6.41250e+07 FALSE\n98    Spn.48  9/14/22 HNO919   34   48      Spn   1906 6.75000e+02 FALSE\n99    Spn.48  2/14/23 HNO919   34   48      Spn   1906 5.73750e+06 FALSE\n100   Spn.48  9/27/22 HNO919   34   48      Spn   1906 2.55000e+07 FALSE\n101   Spn.48 10/11/22 HNO204   34   48      Spn   1906 2.13750e+06 FALSE\n102   Spn.48  8/30/22 HNO918   34   48      Spn   1906 0.00000e+00  TRUE\n         NewCFU                                bacteria_label predval.fit\n1   1.31250e+06 &lt;b&gt;&lt;span style='color:#0443DC;'&gt;24&lt;/span&gt;&lt;/b&gt;   10.899902\n2   1.98750e+03 &lt;b&gt;&lt;span style='color:#0443DC;'&gt;24&lt;/span&gt;&lt;/b&gt;   10.899902\n3   6.26250e+05 &lt;b&gt;&lt;span style='color:#0443DC;'&gt;24&lt;/span&gt;&lt;/b&gt;   10.899902\n4   1.01250e+03 &lt;b&gt;&lt;span style='color:#0443DC;'&gt;24&lt;/span&gt;&lt;/b&gt;   10.899902\n5   9.11250e+04 &lt;b&gt;&lt;span style='color:#0443DC;'&gt;24&lt;/span&gt;&lt;/b&gt;   10.899902\n6   1.05000e+03 &lt;b&gt;&lt;span style='color:#0443DC;'&gt;24&lt;/span&gt;&lt;/b&gt;   10.899902\n7   8.25000e+05 &lt;b&gt;&lt;span style='color:#0443DC;'&gt;24&lt;/span&gt;&lt;/b&gt;   10.899902\n8   4.83750e+05 &lt;b&gt;&lt;span style='color:#0443DC;'&gt;24&lt;/span&gt;&lt;/b&gt;   10.899902\n9   5.13750e+04 &lt;b&gt;&lt;span style='color:#0443DC;'&gt;24&lt;/span&gt;&lt;/b&gt;   10.899902\n10  1.91250e+06 &lt;b&gt;&lt;span style='color:#0443DC;'&gt;24&lt;/span&gt;&lt;/b&gt;   10.899902\n11  4.12500e+05 &lt;b&gt;&lt;span style='color:#0443DC;'&gt;24&lt;/span&gt;&lt;/b&gt;   10.899902\n12  1.46250e+04 &lt;b&gt;&lt;span style='color:#0443DC;'&gt;24&lt;/span&gt;&lt;/b&gt;   10.899902\n13  9.00000e+05 &lt;b&gt;&lt;span style='color:#0443DC;'&gt;24&lt;/span&gt;&lt;/b&gt;   10.899902\n14  8.25000e+03 &lt;b&gt;&lt;span style='color:#0443DC;'&gt;24&lt;/span&gt;&lt;/b&gt;   10.899902\n15  2.36250e+03 &lt;b&gt;&lt;span style='color:#0443DC;'&gt;24&lt;/span&gt;&lt;/b&gt;   10.899902\n16  3.30000e+04 &lt;b&gt;&lt;span style='color:#0443DC;'&gt;24&lt;/span&gt;&lt;/b&gt;   10.899902\n17  9.60000e+01 &lt;b&gt;&lt;span style='color:#0443DC;'&gt;24&lt;/span&gt;&lt;/b&gt;   10.899902\n18  1.83750e+05 &lt;b&gt;&lt;span style='color:#0443DC;'&gt;24&lt;/span&gt;&lt;/b&gt;   10.899902\n19  2.77500e+04 &lt;b&gt;&lt;span style='color:#0443DC;'&gt;48&lt;/span&gt;&lt;/b&gt;    8.092684\n20  3.78000e+02 &lt;b&gt;&lt;span style='color:#0443DC;'&gt;48&lt;/span&gt;&lt;/b&gt;    8.092684\n21  7.80000e+03 &lt;b&gt;&lt;span style='color:#0443DC;'&gt;48&lt;/span&gt;&lt;/b&gt;    8.092684\n22  1.95000e+02 &lt;b&gt;&lt;span style='color:#0443DC;'&gt;48&lt;/span&gt;&lt;/b&gt;    8.092684\n23  3.75000e+00 &lt;b&gt;&lt;span style='color:#0443DC;'&gt;48&lt;/span&gt;&lt;/b&gt;    8.092684\n24  6.33750e+05 &lt;b&gt;&lt;span style='color:#0443DC;'&gt;48&lt;/span&gt;&lt;/b&gt;    8.092684\n25  6.45000e+04 &lt;b&gt;&lt;span style='color:#0443DC;'&gt;48&lt;/span&gt;&lt;/b&gt;    8.092684\n26  3.67500e+04 &lt;b&gt;&lt;span style='color:#0443DC;'&gt;48&lt;/span&gt;&lt;/b&gt;    8.092684\n27  2.55000e+02 &lt;b&gt;&lt;span style='color:#0443DC;'&gt;48&lt;/span&gt;&lt;/b&gt;    8.092684\n28  9.00000e+01 &lt;b&gt;&lt;span style='color:#0443DC;'&gt;48&lt;/span&gt;&lt;/b&gt;    8.092684\n29  3.75000e+00 &lt;b&gt;&lt;span style='color:#0443DC;'&gt;48&lt;/span&gt;&lt;/b&gt;    8.092684\n30  6.18750e+05 &lt;b&gt;&lt;span style='color:#0443DC;'&gt;48&lt;/span&gt;&lt;/b&gt;    8.092684\n31  2.47500e+04 &lt;b&gt;&lt;span style='color:#0443DC;'&gt;48&lt;/span&gt;&lt;/b&gt;    8.092684\n32  2.02500e+02 &lt;b&gt;&lt;span style='color:#0443DC;'&gt;48&lt;/span&gt;&lt;/b&gt;    8.092684\n33  1.20000e+05 &lt;b&gt;&lt;span style='color:#0443DC;'&gt;48&lt;/span&gt;&lt;/b&gt;    8.092684\n34  1.31250e+03 &lt;b&gt;&lt;span style='color:#0443DC;'&gt;48&lt;/span&gt;&lt;/b&gt;    8.092684\n35  1.61250e+04 &lt;b&gt;&lt;span style='color:#0443DC;'&gt;48&lt;/span&gt;&lt;/b&gt;    8.092684\n36  7.12500e+02 &lt;b&gt;&lt;span style='color:#0443DC;'&gt;48&lt;/span&gt;&lt;/b&gt;    8.092684\n37  1.08750e+03 &lt;b&gt;&lt;span style='color:#6D05A0;'&gt;24&lt;/span&gt;&lt;/b&gt;   10.250244\n38  3.75000e+00 &lt;b&gt;&lt;span style='color:#6D05A0;'&gt;24&lt;/span&gt;&lt;/b&gt;   10.250244\n39  2.85000e+06 &lt;b&gt;&lt;span style='color:#6D05A0;'&gt;24&lt;/span&gt;&lt;/b&gt;   10.250244\n40  2.55000e+03 &lt;b&gt;&lt;span style='color:#6D05A0;'&gt;24&lt;/span&gt;&lt;/b&gt;   10.250244\n41  1.95000e+05 &lt;b&gt;&lt;span style='color:#6D05A0;'&gt;24&lt;/span&gt;&lt;/b&gt;   10.250244\n42  1.68750e+04 &lt;b&gt;&lt;span style='color:#6D05A0;'&gt;24&lt;/span&gt;&lt;/b&gt;   10.250244\n43  9.75000e+04 &lt;b&gt;&lt;span style='color:#6D05A0;'&gt;24&lt;/span&gt;&lt;/b&gt;   10.250244\n44  7.12500e+03 &lt;b&gt;&lt;span style='color:#6D05A0;'&gt;24&lt;/span&gt;&lt;/b&gt;   10.250244\n45  8.62500e+03 &lt;b&gt;&lt;span style='color:#6D05A0;'&gt;24&lt;/span&gt;&lt;/b&gt;   10.250244\n46  1.53750e+03 &lt;b&gt;&lt;span style='color:#6D05A0;'&gt;24&lt;/span&gt;&lt;/b&gt;   10.250244\n47  4.57500e+05 &lt;b&gt;&lt;span style='color:#6D05A0;'&gt;24&lt;/span&gt;&lt;/b&gt;   10.250244\n48  4.68750e+04 &lt;b&gt;&lt;span style='color:#6D05A0;'&gt;24&lt;/span&gt;&lt;/b&gt;   10.250244\n49  2.32500e+03 &lt;b&gt;&lt;span style='color:#6D05A0;'&gt;24&lt;/span&gt;&lt;/b&gt;   10.250244\n50  1.68750e+03 &lt;b&gt;&lt;span style='color:#6D05A0;'&gt;24&lt;/span&gt;&lt;/b&gt;   10.250244\n51  2.70000e+04 &lt;b&gt;&lt;span style='color:#6D05A0;'&gt;24&lt;/span&gt;&lt;/b&gt;   10.250244\n52  7.12500e+07 &lt;b&gt;&lt;span style='color:#6D05A0;'&gt;24&lt;/span&gt;&lt;/b&gt;   10.250244\n53  1.61250e+05 &lt;b&gt;&lt;span style='color:#6D05A0;'&gt;24&lt;/span&gt;&lt;/b&gt;   10.250244\n54  1.50000e+08 &lt;b&gt;&lt;span style='color:#6D05A0;'&gt;48&lt;/span&gt;&lt;/b&gt;   16.048022\n55  1.46250e+04 &lt;b&gt;&lt;span style='color:#6D05A0;'&gt;48&lt;/span&gt;&lt;/b&gt;   16.048022\n56  2.47500e+05 &lt;b&gt;&lt;span style='color:#6D05A0;'&gt;48&lt;/span&gt;&lt;/b&gt;   16.048022\n57  1.01250e+08 &lt;b&gt;&lt;span style='color:#6D05A0;'&gt;48&lt;/span&gt;&lt;/b&gt;   16.048022\n58  5.77500e+06 &lt;b&gt;&lt;span style='color:#6D05A0;'&gt;48&lt;/span&gt;&lt;/b&gt;   16.048022\n59  3.86250e+05 &lt;b&gt;&lt;span style='color:#6D05A0;'&gt;48&lt;/span&gt;&lt;/b&gt;   16.048022\n60  1.31250e+08 &lt;b&gt;&lt;span style='color:#6D05A0;'&gt;48&lt;/span&gt;&lt;/b&gt;   16.048022\n61  1.65000e+06 &lt;b&gt;&lt;span style='color:#6D05A0;'&gt;48&lt;/span&gt;&lt;/b&gt;   16.048022\n62  3.90000e+08 &lt;b&gt;&lt;span style='color:#6D05A0;'&gt;48&lt;/span&gt;&lt;/b&gt;   16.048022\n63  1.27500e+08 &lt;b&gt;&lt;span style='color:#6D05A0;'&gt;48&lt;/span&gt;&lt;/b&gt;   16.048022\n64  1.05000e+06 &lt;b&gt;&lt;span style='color:#6D05A0;'&gt;48&lt;/span&gt;&lt;/b&gt;   16.048022\n65  6.26250e+06 &lt;b&gt;&lt;span style='color:#6D05A0;'&gt;48&lt;/span&gt;&lt;/b&gt;   16.048022\n66  1.05000e+09 &lt;b&gt;&lt;span style='color:#6D05A0;'&gt;48&lt;/span&gt;&lt;/b&gt;   16.048022\n67  2.66250e+04 &lt;b&gt;&lt;span style='color:#6D05A0;'&gt;48&lt;/span&gt;&lt;/b&gt;   16.048022\n68  1.35000e+08 &lt;b&gt;&lt;span style='color:#6D05A0;'&gt;48&lt;/span&gt;&lt;/b&gt;   16.048022\n69  2.10000e+04 &lt;b&gt;&lt;span style='color:#6D05A0;'&gt;48&lt;/span&gt;&lt;/b&gt;   16.048022\n70  2.17500e+08 &lt;b&gt;&lt;span style='color:#6D05A0;'&gt;48&lt;/span&gt;&lt;/b&gt;   16.048022\n71  1.22625e+07 &lt;b&gt;&lt;span style='color:#927ED1;'&gt;24&lt;/span&gt;&lt;/b&gt;   14.011200\n72  5.58750e+06 &lt;b&gt;&lt;span style='color:#927ED1;'&gt;24&lt;/span&gt;&lt;/b&gt;   14.011200\n73  2.40000e+04 &lt;b&gt;&lt;span style='color:#927ED1;'&gt;24&lt;/span&gt;&lt;/b&gt;   14.011200\n74  2.52750e+07 &lt;b&gt;&lt;span style='color:#927ED1;'&gt;24&lt;/span&gt;&lt;/b&gt;   14.011200\n75  1.65750e+07 &lt;b&gt;&lt;span style='color:#927ED1;'&gt;24&lt;/span&gt;&lt;/b&gt;   14.011200\n76  9.75000e+06 &lt;b&gt;&lt;span style='color:#927ED1;'&gt;24&lt;/span&gt;&lt;/b&gt;   14.011200\n77  1.80000e+04 &lt;b&gt;&lt;span style='color:#927ED1;'&gt;24&lt;/span&gt;&lt;/b&gt;   14.011200\n78  3.30000e+06 &lt;b&gt;&lt;span style='color:#927ED1;'&gt;24&lt;/span&gt;&lt;/b&gt;   14.011200\n79  6.71250e+04 &lt;b&gt;&lt;span style='color:#927ED1;'&gt;24&lt;/span&gt;&lt;/b&gt;   14.011200\n80  5.73750e+05 &lt;b&gt;&lt;span style='color:#927ED1;'&gt;24&lt;/span&gt;&lt;/b&gt;   14.011200\n81  2.36250e+05 &lt;b&gt;&lt;span style='color:#927ED1;'&gt;24&lt;/span&gt;&lt;/b&gt;   14.011200\n82  3.30000e+07 &lt;b&gt;&lt;span style='color:#927ED1;'&gt;24&lt;/span&gt;&lt;/b&gt;   14.011200\n83  2.92500e+07 &lt;b&gt;&lt;span style='color:#927ED1;'&gt;24&lt;/span&gt;&lt;/b&gt;   14.011200\n84  9.03750e+04 &lt;b&gt;&lt;span style='color:#927ED1;'&gt;24&lt;/span&gt;&lt;/b&gt;   14.011200\n85  3.03750e+07 &lt;b&gt;&lt;span style='color:#927ED1;'&gt;24&lt;/span&gt;&lt;/b&gt;   14.011200\n86  1.23750e+04 &lt;b&gt;&lt;span style='color:#927ED1;'&gt;24&lt;/span&gt;&lt;/b&gt;   14.011200\n87  1.53750e+07 &lt;b&gt;&lt;span style='color:#927ED1;'&gt;48&lt;/span&gt;&lt;/b&gt;   10.359997\n88  1.35000e+06 &lt;b&gt;&lt;span style='color:#927ED1;'&gt;48&lt;/span&gt;&lt;/b&gt;   10.359997\n89  3.75000e+00 &lt;b&gt;&lt;span style='color:#927ED1;'&gt;48&lt;/span&gt;&lt;/b&gt;   10.359997\n90  3.78750e+07 &lt;b&gt;&lt;span style='color:#927ED1;'&gt;48&lt;/span&gt;&lt;/b&gt;   10.359997\n91  3.75000e+00 &lt;b&gt;&lt;span style='color:#927ED1;'&gt;48&lt;/span&gt;&lt;/b&gt;   10.359997\n92  6.15000e+07 &lt;b&gt;&lt;span style='color:#927ED1;'&gt;48&lt;/span&gt;&lt;/b&gt;   10.359997\n93  6.78750e+04 &lt;b&gt;&lt;span style='color:#927ED1;'&gt;48&lt;/span&gt;&lt;/b&gt;   10.359997\n94  5.55000e+01 &lt;b&gt;&lt;span style='color:#927ED1;'&gt;48&lt;/span&gt;&lt;/b&gt;   10.359997\n95  3.75000e+00 &lt;b&gt;&lt;span style='color:#927ED1;'&gt;48&lt;/span&gt;&lt;/b&gt;   10.359997\n96  1.03875e+04 &lt;b&gt;&lt;span style='color:#927ED1;'&gt;48&lt;/span&gt;&lt;/b&gt;   10.359997\n97  6.41250e+07 &lt;b&gt;&lt;span style='color:#927ED1;'&gt;48&lt;/span&gt;&lt;/b&gt;   10.359997\n98  6.75000e+02 &lt;b&gt;&lt;span style='color:#927ED1;'&gt;48&lt;/span&gt;&lt;/b&gt;   10.359997\n99  5.73750e+06 &lt;b&gt;&lt;span style='color:#927ED1;'&gt;48&lt;/span&gt;&lt;/b&gt;   10.359997\n100 2.55000e+07 &lt;b&gt;&lt;span style='color:#927ED1;'&gt;48&lt;/span&gt;&lt;/b&gt;   10.359997\n101 2.13750e+06 &lt;b&gt;&lt;span style='color:#927ED1;'&gt;48&lt;/span&gt;&lt;/b&gt;   10.359997\n102 3.75000e+00 &lt;b&gt;&lt;span style='color:#927ED1;'&gt;48&lt;/span&gt;&lt;/b&gt;   10.359997\n    predval.se.fit\n1        0.9512642\n2        0.9512642\n3        0.9512642\n4        0.9512642\n5        0.9512642\n6        0.9512642\n7        0.9512642\n8        0.9512642\n9        0.9512642\n10       0.9512642\n11       0.9512642\n12       0.9512642\n13       0.9512642\n14       0.9512642\n15       0.9512642\n16       0.9512642\n17       0.9512642\n18       0.9512642\n19       0.9512642\n20       0.9512642\n21       0.9512642\n22       0.9512642\n23       0.9512642\n24       0.9512642\n25       0.9512642\n26       0.9512642\n27       0.9512642\n28       0.9512642\n29       0.9512642\n30       0.9512642\n31       0.9512642\n32       0.9512642\n33       0.9512642\n34       0.9512642\n35       0.9512642\n36       0.9512642\n37       0.9725831\n38       0.9725831\n39       0.9725831\n40       0.9725831\n41       0.9725831\n42       0.9725831\n43       0.9725831\n44       0.9725831\n45       0.9725831\n46       0.9725831\n47       0.9725831\n48       0.9725831\n49       0.9725831\n50       0.9725831\n51       0.9725831\n52       0.9725831\n53       0.9725831\n54       0.9725831\n55       0.9725831\n56       0.9725831\n57       0.9725831\n58       0.9725831\n59       0.9725831\n60       0.9725831\n61       0.9725831\n62       0.9725831\n63       0.9725831\n64       0.9725831\n65       0.9725831\n66       0.9725831\n67       0.9725831\n68       0.9725831\n69       0.9725831\n70       0.9725831\n71       0.9982937\n72       0.9982937\n73       0.9982937\n74       0.9982937\n75       0.9982937\n76       0.9982937\n77       0.9982937\n78       0.9982937\n79       0.9982937\n80       0.9982937\n81       0.9982937\n82       0.9982937\n83       0.9982937\n84       0.9982937\n85       0.9982937\n86       0.9982937\n87       0.9982937\n88       0.9982937\n89       0.9982937\n90       0.9982937\n91       0.9982937\n92       0.9982937\n93       0.9982937\n94       0.9982937\n95       0.9982937\n96       0.9982937\n97       0.9982937\n98       0.9982937\n99       0.9982937\n100      0.9982937\n101      0.9982937\n102      0.9982937\n\n$plot_1\n\n\n\n\n\n\n$plot_2\n\n\n\n\n\n\n$panel\n\n\n\n\n\n\n\nSupplemental Data: 37C\n\nanalysis_function(CFU_data, each_temp = \"37\", cutoff_pvalue = 0.05, cutoff_FC = 1)\n\n$anova\n               Sum Sq Mean Sq NumDF   DenDF F value  Pr(&gt;F) sign\nbacteria      3.4e+02 1.7e+02     2 5.8e+01 1.2e+01 4.5e-05    *\nTime          3.0e-02 3.0e-02     1 4.4e+01 2.1e-03 9.6e-01     \nbacteria:Time 2.4e+02 1.2e+02     2 4.4e+01 8.4e+00 7.8e-04    *\n\n$random_effects\n        grp        var1 var2      vcov    sdcor proportion\n1 Line:Date (Intercept) &lt;NA&gt;  7.890447 2.808994      35.99\n2      Line (Intercept) &lt;NA&gt;  0.000000 0.000000       0.00\n3  Residual        &lt;NA&gt; &lt;NA&gt; 14.034296 3.746238      64.01\n\n$contrasts_time\n  Time1 Time2 bacteria  estimate       SE       df   t.ratio     p.value Temp\n1    24    48      Dpi  5.003889 1.529395 44.47372  3.271809 0.002069846   37\n2    24    48      Sau -3.851043 1.597401 44.47372 -2.410818 0.020113866   37\n3    24    48      Spn -1.027038 1.597401 44.47372 -0.642943 0.523562322   37\n   p.adj.holm sign condition1 condition2\n1 0.006209537    *     Dpi.24     Dpi.48\n2 0.040227732    *     Sau.24     Sau.48\n3 0.523562322          Spn.24     Spn.48\n                                         group1\n1 &lt;b&gt;&lt;span style='color:#0443DC;'&gt;24&lt;/span&gt;&lt;/b&gt;\n2 &lt;b&gt;&lt;span style='color:#6D05A0;'&gt;24&lt;/span&gt;&lt;/b&gt;\n3 &lt;b&gt;&lt;span style='color:#927ED1;'&gt;24&lt;/span&gt;&lt;/b&gt;\n                                         group2 exp.mean.predval.1\n1 &lt;b&gt;&lt;span style='color:#0443DC;'&gt;48&lt;/span&gt;&lt;/b&gt;            47592.1\n2 &lt;b&gt;&lt;span style='color:#6D05A0;'&gt;48&lt;/span&gt;&lt;/b&gt;           294997.5\n3 &lt;b&gt;&lt;span style='color:#927ED1;'&gt;48&lt;/span&gt;&lt;/b&gt;           109063.3\n  exp.mean.predval.2         FC highlighted\n1       3.194285e+02 148.991409           -\n2       1.387730e+07 -47.042095           +\n3       3.045900e+05  -2.792781           +\n\n$data_summary\n# A tibble: 6 × 8\n# Groups:   Combined [6]\n  Combined bacteria_label                 mean.real mean.predval mean.predval.se\n  &lt;fct&gt;    &lt;fct&gt;                              &lt;dbl&gt;        &lt;dbl&gt;           &lt;dbl&gt;\n1 Dpi.24   &lt;b&gt;&lt;span style='color:#0443DC…    2.36e5        10.8             1.31\n2 Sau.24   &lt;b&gt;&lt;span style='color:#6D05A0…    1.91e7        12.6             1.36\n3 Spn.24   &lt;b&gt;&lt;span style='color:#927ED1…    1.79e7        11.6             1.35\n4 Dpi.48   &lt;b&gt;&lt;span style='color:#0443DC…    1.23e4         5.77            1.31\n5 Sau.48   &lt;b&gt;&lt;span style='color:#6D05A0…    1.36e8        16.4             1.36\n6 Spn.48   &lt;b&gt;&lt;span style='color:#927ED1…    2.90e7        12.6             1.35\n# ℹ 3 more variables: exp.mean.predval &lt;dbl&gt;, max &lt;dbl&gt;, min &lt;dbl&gt;\n\n$data_stats\n   Combined     Date   Line Temp Time bacteria Strain         CFUs   LOD\n1    Dpi.24  9/13/22 HNO204   37   24      Dpi   3065 3.487500e+03 FALSE\n2    Dpi.24  11/1/22 HNO919   37   24      Dpi   3065 7.875000e+04 FALSE\n3    Dpi.24  8/23/22 HNO204   37   24      Dpi   3065 1.050000e+06 FALSE\n4    Dpi.24  9/14/22 HNO919   37   24      Dpi   3065 4.875000e+05 FALSE\n5    Dpi.24   9/7/22 HNO918   37   24      Dpi   3065 4.012500e+05 FALSE\n6    Dpi.24  8/31/22 HNO204   37   24      Dpi   3065 7.125000e+04 FALSE\n7    Dpi.24  8/10/22 HNO204   37   24      Dpi   3065 4.650000e+05 FALSE\n8    Dpi.24   8/9/22 HNO918   37   24      Dpi   3065 2.100000e+05 FALSE\n9    Dpi.24  8/30/22 HNO918   37   24      Dpi   3065 3.375000e+02 FALSE\n10   Dpi.24  11/2/22 HNO919   37   24      Dpi   3065 0.000000e+00  TRUE\n11   Dpi.24  8/17/22 HNO918   37   24      Dpi   3065 3.450000e+04 FALSE\n12   Dpi.24   9/6/22 HNO919   37   24      Dpi   3065 3.525000e+04 FALSE\n13   Dpi.48  9/14/22 HNO919   37   48      Dpi   3065 1.237500e+03 FALSE\n14   Dpi.48  11/1/22 HNO919   37   48      Dpi   3065 1.875000e+01 FALSE\n15   Dpi.48  8/10/22 HNO204   37   48      Dpi   3065 1.080000e+05 FALSE\n16   Dpi.48  9/13/22 HNO204   37   48      Dpi   3065 0.000000e+00  TRUE\n17   Dpi.48   9/7/22 HNO918   37   48      Dpi   3065 1.500000e+01 FALSE\n18   Dpi.48  8/23/22 HNO204   37   48      Dpi   3065 1.012500e+03 FALSE\n19   Dpi.48   8/9/22 HNO918   37   48      Dpi   3065 3.412500e+04 FALSE\n20   Dpi.48  8/30/22 HNO918   37   48      Dpi   3065 6.000000e+01 FALSE\n21   Dpi.48  8/31/22 HNO204   37   48      Dpi   3065 2.925000e+03 FALSE\n22   Dpi.48  11/2/22 HNO919   37   48      Dpi   3065 0.000000e+00  TRUE\n23   Dpi.48  8/17/22 HNO918   37   48      Dpi   3065 7.500000e+01 FALSE\n24   Dpi.48   9/6/22 HNO919   37   48      Dpi   3065 2.100000e+01 FALSE\n25   Sau.24  9/20/22 HNO918   37   24      Sau   2115 1.125000e+07 FALSE\n26   Sau.24  2/28/23 HNO204   37   24      Sau   2115 3.562500e+05 FALSE\n27   Sau.24  10/4/22 HNO918   37   24      Sau   2115 1.012500e+06 FALSE\n28   Sau.24  8/17/22 HNO918   37   24      Sau   2115 1.050000e+06 FALSE\n29   Sau.24 10/11/22 HNO204   37   24      Sau   2115 1.575000e+07 FALSE\n30   Sau.24   9/6/22 HNO919   37   24      Sau   2115 4.275000e+03 FALSE\n31   Sau.24  9/27/22 HNO919   37   24      Sau   2115 3.937500e+04 FALSE\n32   Sau.24 10/25/22 HNO204   37   24      Sau   2115 1.800000e+08 FALSE\n33   Sau.24  9/21/22 HNO204   37   24      Sau   2115 2.512500e+02 FALSE\n34   Sau.24  8/30/22 HNO918   37   24      Sau   2115 6.187500e+05 FALSE\n35   Sau.24  9/14/22 HNO919   37   24      Sau   2115 8.250000e+03 FALSE\n36   Sau.48 10/11/22 HNO204   37   48      Sau   2115 2.700000e+07 FALSE\n37   Sau.48  9/27/22 HNO919   37   48      Sau   2115 1.162500e+08 FALSE\n38   Sau.48  2/28/23 HNO204   37   48      Sau   2115 1.200000e+05 FALSE\n39   Sau.48  8/17/22 HNO918   37   48      Sau   2115 1.762500e+07 FALSE\n40   Sau.48  10/4/22 HNO918   37   48      Sau   2115 4.875000e+08 FALSE\n41   Sau.48  8/30/22 HNO918   37   48      Sau   2115 6.112500e+07 FALSE\n42   Sau.48  9/20/22 HNO918   37   48      Sau   2115 1.987500e+06 FALSE\n43   Sau.48 10/25/22 HNO204   37   48      Sau   2115 4.575000e+08 FALSE\n44   Sau.48   9/6/22 HNO919   37   48      Sau   2115 4.875000e+03 FALSE\n45   Sau.48  9/14/22 HNO919   37   48      Sau   2115 3.000000e+08 FALSE\n46   Sau.48  9/21/22 HNO204   37   48      Sau   2115 2.475000e+07 FALSE\n47   Spn.24  8/23/22 HNO204   37   24      Spn   1906 4.387500e+07 FALSE\n48   Spn.24  8/10/22 HNO204   37   24      Spn   1906 1.027500e+07 FALSE\n49   Spn.24  9/13/22 HNO204   37   24      Spn   1906 1.537500e+03 FALSE\n50   Spn.24  8/31/22 HNO204   37   24      Spn   1906 0.000000e+00  TRUE\n51   Spn.24 10/11/22 HNO204   37   24      Spn   1906 2.812500e+07 FALSE\n52   Spn.24   8/9/22 HNO918   37   24      Spn   1906 1.950000e+07 FALSE\n53   Spn.24  8/17/22 HNO918   37   24      Spn   1906 4.500000e+01 FALSE\n54   Spn.24   9/6/22 HNO919   37   24      Spn   1906 2.887500e+03 FALSE\n55   Spn.24  10/4/22 HNO918   37   24      Spn   1906 4.312500e+07 FALSE\n56   Spn.24  9/27/22 HNO919   37   24      Spn   1906 5.250000e+07 FALSE\n57   Spn.24  8/30/22 HNO918   37   24      Spn   1906 2.887500e+03 FALSE\n58   Spn.48 10/11/22 HNO204   37   48      Spn   1906 3.065625e+02 FALSE\n59   Spn.48  8/17/22 HNO918   37   48      Spn   1906 2.025000e+05 FALSE\n60   Spn.48  8/10/22 HNO204   37   48      Spn   1906 4.800000e+06 FALSE\n61   Spn.48  8/31/22 HNO204   37   48      Spn   1906 7.800000e+07 FALSE\n62   Spn.48  10/4/22 HNO918   37   48      Spn   1906 7.200000e+07 FALSE\n63   Spn.48  8/30/22 HNO918   37   48      Spn   1906 1.875000e+06 FALSE\n64   Spn.48  9/13/22 HNO204   37   48      Spn   1906 0.000000e+00  TRUE\n65   Spn.48   9/6/22 HNO919   37   48      Spn   1906 6.900000e+01 FALSE\n66   Spn.48  8/23/22 HNO204   37   48      Spn   1906 4.687500e+07 FALSE\n67   Spn.48  9/27/22 HNO919   37   48      Spn   1906 3.000000e+07 FALSE\n68   Spn.48   8/9/22 HNO918   37   48      Spn   1906 8.550000e+07 FALSE\n         NewCFU                                bacteria_label predval.fit\n1  3.487500e+03 &lt;b&gt;&lt;span style='color:#0443DC;'&gt;24&lt;/span&gt;&lt;/b&gt;   10.770422\n2  7.875000e+04 &lt;b&gt;&lt;span style='color:#0443DC;'&gt;24&lt;/span&gt;&lt;/b&gt;   10.770422\n3  1.050000e+06 &lt;b&gt;&lt;span style='color:#0443DC;'&gt;24&lt;/span&gt;&lt;/b&gt;   10.770422\n4  4.875000e+05 &lt;b&gt;&lt;span style='color:#0443DC;'&gt;24&lt;/span&gt;&lt;/b&gt;   10.770422\n5  4.012500e+05 &lt;b&gt;&lt;span style='color:#0443DC;'&gt;24&lt;/span&gt;&lt;/b&gt;   10.770422\n6  7.125000e+04 &lt;b&gt;&lt;span style='color:#0443DC;'&gt;24&lt;/span&gt;&lt;/b&gt;   10.770422\n7  4.650000e+05 &lt;b&gt;&lt;span style='color:#0443DC;'&gt;24&lt;/span&gt;&lt;/b&gt;   10.770422\n8  2.100000e+05 &lt;b&gt;&lt;span style='color:#0443DC;'&gt;24&lt;/span&gt;&lt;/b&gt;   10.770422\n9  3.375000e+02 &lt;b&gt;&lt;span style='color:#0443DC;'&gt;24&lt;/span&gt;&lt;/b&gt;   10.770422\n10 3.750000e+00 &lt;b&gt;&lt;span style='color:#0443DC;'&gt;24&lt;/span&gt;&lt;/b&gt;   10.770422\n11 3.450000e+04 &lt;b&gt;&lt;span style='color:#0443DC;'&gt;24&lt;/span&gt;&lt;/b&gt;   10.770422\n12 3.525000e+04 &lt;b&gt;&lt;span style='color:#0443DC;'&gt;24&lt;/span&gt;&lt;/b&gt;   10.770422\n13 1.237500e+03 &lt;b&gt;&lt;span style='color:#0443DC;'&gt;48&lt;/span&gt;&lt;/b&gt;    5.766533\n14 1.875000e+01 &lt;b&gt;&lt;span style='color:#0443DC;'&gt;48&lt;/span&gt;&lt;/b&gt;    5.766533\n15 1.080000e+05 &lt;b&gt;&lt;span style='color:#0443DC;'&gt;48&lt;/span&gt;&lt;/b&gt;    5.766533\n16 3.750000e+00 &lt;b&gt;&lt;span style='color:#0443DC;'&gt;48&lt;/span&gt;&lt;/b&gt;    5.766533\n17 1.500000e+01 &lt;b&gt;&lt;span style='color:#0443DC;'&gt;48&lt;/span&gt;&lt;/b&gt;    5.766533\n18 1.012500e+03 &lt;b&gt;&lt;span style='color:#0443DC;'&gt;48&lt;/span&gt;&lt;/b&gt;    5.766533\n19 3.412500e+04 &lt;b&gt;&lt;span style='color:#0443DC;'&gt;48&lt;/span&gt;&lt;/b&gt;    5.766533\n20 6.000000e+01 &lt;b&gt;&lt;span style='color:#0443DC;'&gt;48&lt;/span&gt;&lt;/b&gt;    5.766533\n21 2.925000e+03 &lt;b&gt;&lt;span style='color:#0443DC;'&gt;48&lt;/span&gt;&lt;/b&gt;    5.766533\n22 3.750000e+00 &lt;b&gt;&lt;span style='color:#0443DC;'&gt;48&lt;/span&gt;&lt;/b&gt;    5.766533\n23 7.500000e+01 &lt;b&gt;&lt;span style='color:#0443DC;'&gt;48&lt;/span&gt;&lt;/b&gt;    5.766533\n24 2.100000e+01 &lt;b&gt;&lt;span style='color:#0443DC;'&gt;48&lt;/span&gt;&lt;/b&gt;    5.766533\n25 1.125000e+07 &lt;b&gt;&lt;span style='color:#6D05A0;'&gt;24&lt;/span&gt;&lt;/b&gt;   12.594722\n26 3.562500e+05 &lt;b&gt;&lt;span style='color:#6D05A0;'&gt;24&lt;/span&gt;&lt;/b&gt;   12.594722\n27 1.012500e+06 &lt;b&gt;&lt;span style='color:#6D05A0;'&gt;24&lt;/span&gt;&lt;/b&gt;   12.594722\n28 1.050000e+06 &lt;b&gt;&lt;span style='color:#6D05A0;'&gt;24&lt;/span&gt;&lt;/b&gt;   12.594722\n29 1.575000e+07 &lt;b&gt;&lt;span style='color:#6D05A0;'&gt;24&lt;/span&gt;&lt;/b&gt;   12.594722\n30 4.275000e+03 &lt;b&gt;&lt;span style='color:#6D05A0;'&gt;24&lt;/span&gt;&lt;/b&gt;   12.594722\n31 3.937500e+04 &lt;b&gt;&lt;span style='color:#6D05A0;'&gt;24&lt;/span&gt;&lt;/b&gt;   12.594722\n32 1.800000e+08 &lt;b&gt;&lt;span style='color:#6D05A0;'&gt;24&lt;/span&gt;&lt;/b&gt;   12.594722\n33 2.512500e+02 &lt;b&gt;&lt;span style='color:#6D05A0;'&gt;24&lt;/span&gt;&lt;/b&gt;   12.594722\n34 6.187500e+05 &lt;b&gt;&lt;span style='color:#6D05A0;'&gt;24&lt;/span&gt;&lt;/b&gt;   12.594722\n35 8.250000e+03 &lt;b&gt;&lt;span style='color:#6D05A0;'&gt;24&lt;/span&gt;&lt;/b&gt;   12.594722\n36 2.700000e+07 &lt;b&gt;&lt;span style='color:#6D05A0;'&gt;48&lt;/span&gt;&lt;/b&gt;   16.445765\n37 1.162500e+08 &lt;b&gt;&lt;span style='color:#6D05A0;'&gt;48&lt;/span&gt;&lt;/b&gt;   16.445765\n38 1.200000e+05 &lt;b&gt;&lt;span style='color:#6D05A0;'&gt;48&lt;/span&gt;&lt;/b&gt;   16.445765\n39 1.762500e+07 &lt;b&gt;&lt;span style='color:#6D05A0;'&gt;48&lt;/span&gt;&lt;/b&gt;   16.445765\n40 4.875000e+08 &lt;b&gt;&lt;span style='color:#6D05A0;'&gt;48&lt;/span&gt;&lt;/b&gt;   16.445765\n41 6.112500e+07 &lt;b&gt;&lt;span style='color:#6D05A0;'&gt;48&lt;/span&gt;&lt;/b&gt;   16.445765\n42 1.987500e+06 &lt;b&gt;&lt;span style='color:#6D05A0;'&gt;48&lt;/span&gt;&lt;/b&gt;   16.445765\n43 4.575000e+08 &lt;b&gt;&lt;span style='color:#6D05A0;'&gt;48&lt;/span&gt;&lt;/b&gt;   16.445765\n44 4.875000e+03 &lt;b&gt;&lt;span style='color:#6D05A0;'&gt;48&lt;/span&gt;&lt;/b&gt;   16.445765\n45 3.000000e+08 &lt;b&gt;&lt;span style='color:#6D05A0;'&gt;48&lt;/span&gt;&lt;/b&gt;   16.445765\n46 2.475000e+07 &lt;b&gt;&lt;span style='color:#6D05A0;'&gt;48&lt;/span&gt;&lt;/b&gt;   16.445765\n47 4.387500e+07 &lt;b&gt;&lt;span style='color:#927ED1;'&gt;24&lt;/span&gt;&lt;/b&gt;   11.599684\n48 1.027500e+07 &lt;b&gt;&lt;span style='color:#927ED1;'&gt;24&lt;/span&gt;&lt;/b&gt;   11.599684\n49 1.537500e+03 &lt;b&gt;&lt;span style='color:#927ED1;'&gt;24&lt;/span&gt;&lt;/b&gt;   11.599684\n50 3.750000e+00 &lt;b&gt;&lt;span style='color:#927ED1;'&gt;24&lt;/span&gt;&lt;/b&gt;   11.599684\n51 2.812500e+07 &lt;b&gt;&lt;span style='color:#927ED1;'&gt;24&lt;/span&gt;&lt;/b&gt;   11.599684\n52 1.950000e+07 &lt;b&gt;&lt;span style='color:#927ED1;'&gt;24&lt;/span&gt;&lt;/b&gt;   11.599684\n53 4.500000e+01 &lt;b&gt;&lt;span style='color:#927ED1;'&gt;24&lt;/span&gt;&lt;/b&gt;   11.599684\n54 2.887500e+03 &lt;b&gt;&lt;span style='color:#927ED1;'&gt;24&lt;/span&gt;&lt;/b&gt;   11.599684\n55 4.312500e+07 &lt;b&gt;&lt;span style='color:#927ED1;'&gt;24&lt;/span&gt;&lt;/b&gt;   11.599684\n56 5.250000e+07 &lt;b&gt;&lt;span style='color:#927ED1;'&gt;24&lt;/span&gt;&lt;/b&gt;   11.599684\n57 2.887500e+03 &lt;b&gt;&lt;span style='color:#927ED1;'&gt;24&lt;/span&gt;&lt;/b&gt;   11.599684\n58 3.065625e+02 &lt;b&gt;&lt;span style='color:#927ED1;'&gt;48&lt;/span&gt;&lt;/b&gt;   12.626722\n59 2.025000e+05 &lt;b&gt;&lt;span style='color:#927ED1;'&gt;48&lt;/span&gt;&lt;/b&gt;   12.626722\n60 4.800000e+06 &lt;b&gt;&lt;span style='color:#927ED1;'&gt;48&lt;/span&gt;&lt;/b&gt;   12.626722\n61 7.800000e+07 &lt;b&gt;&lt;span style='color:#927ED1;'&gt;48&lt;/span&gt;&lt;/b&gt;   12.626722\n62 7.200000e+07 &lt;b&gt;&lt;span style='color:#927ED1;'&gt;48&lt;/span&gt;&lt;/b&gt;   12.626722\n63 1.875000e+06 &lt;b&gt;&lt;span style='color:#927ED1;'&gt;48&lt;/span&gt;&lt;/b&gt;   12.626722\n64 3.750000e+00 &lt;b&gt;&lt;span style='color:#927ED1;'&gt;48&lt;/span&gt;&lt;/b&gt;   12.626722\n65 6.900000e+01 &lt;b&gt;&lt;span style='color:#927ED1;'&gt;48&lt;/span&gt;&lt;/b&gt;   12.626722\n66 4.687500e+07 &lt;b&gt;&lt;span style='color:#927ED1;'&gt;48&lt;/span&gt;&lt;/b&gt;   12.626722\n67 3.000000e+07 &lt;b&gt;&lt;span style='color:#927ED1;'&gt;48&lt;/span&gt;&lt;/b&gt;   12.626722\n68 8.550000e+07 &lt;b&gt;&lt;span style='color:#927ED1;'&gt;48&lt;/span&gt;&lt;/b&gt;   12.626722\n   predval.se.fit\n1        1.306561\n2        1.306561\n3        1.306561\n4        1.306561\n5        1.306561\n6        1.306561\n7        1.306561\n8        1.306561\n9        1.306561\n10       1.306561\n11       1.306561\n12       1.306561\n13       1.306561\n14       1.306561\n15       1.306561\n16       1.306561\n17       1.306561\n18       1.306561\n19       1.306561\n20       1.306561\n21       1.306561\n22       1.306561\n23       1.306561\n24       1.306561\n25       1.355826\n26       1.355826\n27       1.355826\n28       1.355826\n29       1.355826\n30       1.355826\n31       1.355826\n32       1.355826\n33       1.355826\n34       1.355826\n35       1.355826\n36       1.355826\n37       1.355826\n38       1.355826\n39       1.355826\n40       1.355826\n41       1.355826\n42       1.355826\n43       1.355826\n44       1.355826\n45       1.355826\n46       1.355826\n47       1.351123\n48       1.351123\n49       1.351123\n50       1.351123\n51       1.351123\n52       1.351123\n53       1.351123\n54       1.351123\n55       1.351123\n56       1.351123\n57       1.351123\n58       1.351123\n59       1.351123\n60       1.351123\n61       1.351123\n62       1.351123\n63       1.351123\n64       1.351123\n65       1.351123\n66       1.351123\n67       1.351123\n68       1.351123\n\n$plot_1\n\n\n\n\n\n\n$plot_2\n\n\n\n\n\n\n$panel\n\n\n\n\n\n\n\nMerged Files\n\npdf_output &lt;- file.path(figures_folder, \"HNOBac_SummaryCFUs.pdf\")\n\n# Check if the file exists, and delete if it does\nif (file.exists(pdf_output)) {\n  file.remove(pdf_output)\n}\n\n[1] TRUE\n\n# Now combine the PDFs into a new file\npdf_files &lt;- list.files(figures_folder, pattern = \"\\\\.pdf$\", full.names = TRUE)\nqpdf::pdf_combine(input = pdf_files, output = pdf_output)\n\n[1] \"data/outputs/CFUs/figures/HNOBac_SummaryCFUs.pdf\""
  },
  {
    "objectID": "Methods_LDH.html#data-input-and-selection",
    "href": "Methods_LDH.html#data-input-and-selection",
    "title": "LDH",
    "section": "Data Input and Selection",
    "text": "Data Input and Selection\n\nFile Paths\n\n# Folder paths\ninput_path &lt;- \"data/input_data/LDH/\"\nmetadata_path &lt;- \"data/metadata/LDH\"\n\n# Create subfolders for output files\ndataframes_folder &lt;- \"data/dataframes\"\nif (!file.exists(\"data/dataframes\")) {\n  dir.create(\"data/dataframes\", recursive = TRUE)\n}\n\n# Load data and metadata\ninput_data &lt;- read_excel(file.path(input_path, \"LAK24_0118_LDHData.xlsx\")) %&gt;% mutate_if(is.character, factor)\nBac_order &lt;- read_csv(file.path(metadata_path, \"Order_Bacteria_LDH.csv\"))\n\n\n\nData clean-up\n\n# Filter only samples matched to CFU wells\nLDH_data &lt;- input_data %&gt;% \n  filter(CFUmatched == \"T\")\n\n# Factor Ordering and Styling\nLDH_data &lt;- merge(LDH_data, Bac_order, by = \"Species\") \nLDH_data$bacteria_label &lt;- factor(LDH_data$bacteria_label, levels = Bac_order$bacteria_label)\nLDH_data$Line &lt;- fct_recode(LDH_data$Line, \"HNO918\" = \"A\", \"HNO204\" = \"B\", \"HNO919\" = \"C\") \n\n# Average technical replicates for each individual experiment\nLDH_avg &lt;- LDH_data %&gt;%\n  group_by(Date, Line, Species, bacteria_label, Temp, Well_Endpoint, Collection_Time) %&gt;% \n  summarise(avg_Value = mean(Value)) %&gt;%\n  # Add labels to distinguish final collection times from time 0\n  mutate(Collection_Label = if_else(Collection_Time == 24 | Collection_Time == 48, \"final\", \"initial\"))\n\n# Calculate log2 fold change between final time point vs. time 0\nLDH_FC &lt;- LDH_avg %&gt;%\n  group_by(Date, Line, Species, bacteria_label, Temp, Well_Endpoint) %&gt;%\n  reframe(FC = avg_Value[Collection_Label == \"final\"]/avg_Value[Collection_Label == \"initial\"]) \n\n\n\nSaving files\n\n# Save data frames as CSV files in the output folder\nwrite_csv(LDH_data, file.path(dataframes_folder, \"LDH_values.csv\"))\nwrite_csv(LDH_FC, file.path(dataframes_folder, \"LDH_FC.csv\"))\n\n# Save data frames as R objects in the output folder\nsaveRDS(LDH_data, file.path(dataframes_folder, \"LDH_values.rds\"))\nsaveRDS(LDH_FC, file.path(dataframes_folder, \"LDH_FC.rds\"))\n\n# Cleaning-up all objects from the environment\nrm(list = ls())\n\n# Use this to read the final objects\nLDH_data &lt;- readRDS(\"data/dataframes/LDH_values.rds\")\nLDH_FC &lt;- readRDS(\"data/dataframes/LDH_FC.rds\")"
  },
  {
    "objectID": "Methods_LDH.html#stats-and-plots",
    "href": "Methods_LDH.html#stats-and-plots",
    "title": "LDH",
    "section": "Stats and Plots",
    "text": "Stats and Plots\n\nFile Paths\n\n# Folder paths\ndataframes_path &lt;- \"data/dataframes\"\nmetadata_path &lt;- \"data/metadata/LDH\"\n\n# Create subfolders for output files\nfigures_folder &lt;- \"data/outputs/LDH/figures\"\nif (!file.exists(\"data/outputs/LDH/figures\")) {\n  dir.create(\"data/outputs/LDH/figures\", recursive = TRUE)\n}\nstats_folder &lt;- \"data/outputs/LDH/stats\"\nif (!file.exists(\"data/outputs/LDH/stats\")) {\n  dir.create(\"data/outputs/LDH/stats\", recursive = TRUE)\n}\n\n# Load data and metadata\nLDH_FC &lt;- readRDS(\"data/dataframes/LDH_FC.rds\")\nBac_order &lt;- read_csv(file.path(metadata_path, \"Order_Bacteria_LDH.csv\"))\n\n\n\nFunction for each temp condition and endpoint\n\n# Function to analyze each temp condition\nanalysis_function &lt;- function(data, each_temp, each_endpoint, cutoff_pvalue, cutoff_FC) {\n  \n  # Subset the data to the selected temp\n  data_subset &lt;- data %&gt;%\n    filter(Temp == each_temp) %&gt;%\n    filter(Well_Endpoint == each_endpoint)\n  \n  # Mixed-effects model with random effects\n  model &lt;- lmer(FC ~ Species \n                + (1|Line) + (1|Line:Date), \n                data = data_subset)\n  #Anova\n  anova &lt;- anova(model)\n  anova_df &lt;- as.data.frame(anova) %&gt;%\n    mutate(sign = case_when(\n      `Pr(&gt;F)` &lt; cutoff_pvalue ~ \"*\",\n      TRUE ~ \"\")) %&gt;%\n    mutate_if(is.numeric, ~ format(., digits = 2, scientific = TRUE))\n  \n  # Calculate Individual contrasts\n  emmeans_model &lt;- emmeans(model, ~ Species)\n  emmeans_contrasts &lt;- pairs(emmeans_model, adjust = \"none\")    \n  \n  # Extract random effects and convert to dataframe (if not singular)\n  random_effects_df &lt;- as.data.frame(VarCorr(model)) %&gt;%\n    mutate(proportion = round(100 * (vcov / sum(vcov)), 2)) \n  \n  # Adds predictions based on fixed effects, averaged over random effects. It gives a population estimate\n  data_subset &lt;- cbind(data_subset, predval = predict(model,re.form = NA, se.fit = TRUE))\n  data_summary_df &lt;- data_subset %&gt;%\n    group_by(Species, bacteria_label) %&gt;%\n    summarize(mean.real = mean(FC),\n              mean.predval = mean(predval.fit), \n              mean.predval.se = mean(predval.se.fit)) %&gt;%\n    mutate(max = mean.predval + 2*mean.predval.se,\n           min = mean.predval - 2*mean.predval.se)\n  \n  # Convert contrasts to dataframe and adjust pvalues. Filter contrast to Uncolonized only\n  contrasts_df &lt;- as.data.frame(summary(emmeans_contrasts)) %&gt;%\n    filter(str_detect(contrast, \"Uncolonized\")) %&gt;%\n    mutate(p.adj.holm = p.adjust(p.value, method = \"holm\")) %&gt;%\n    mutate(sign = case_when(\n      p.adj.holm &lt; 0.05 ~ \"*\",\n      TRUE ~ \"\"))\n  \n  # Edits to the contrast dataframe to include pvalue brackets in plot\n  contrasts_df &lt;- contrasts_df %&gt;%\n    separate(contrast, into = c(\"condition1\", \"condition2\"), sep = \" - \", remove = F) \n  \n  contrasts_df$group1 &lt;- Bac_order$bacteria_label[match(contrasts_df$condition1, Bac_order$Species)]\n  contrasts_df$group2 &lt;- Bac_order$bacteria_label[match(contrasts_df$condition2, Bac_order$Species)]\n  \n  # Calculate fold-change values for each contrast\n  contrasts_df &lt;- contrasts_df %&gt;%\n    ungroup() %&gt;%\n    left_join(select(data_summary_df, Species, mean.predval), by = join_by(condition1 == Species)) %&gt;%\n    left_join(select(data_summary_df, Species, mean.predval), by = join_by(condition2 == Species), suffix = c(\".1\", \".2\")) %&gt;%\n    mutate(FC = mean.predval.1 / mean.predval.2,\n           FC = if_else(FC &lt; 1, -1 / FC, FC),\n           highlighted = case_when(\n             FC &lt;= -cutoff_FC ~ \"-\",\n             FC &gt;= cutoff_FC ~ \"+\",\n             TRUE ~ \"\")) \n  \n  # Select p values to plot and define their location\n  contrast_sign &lt;- contrasts_df %&gt;%\n    filter(sign != \"\" & highlighted != \"\") %&gt;%\n    mutate(p.adj.holm = format(p.adj.holm, digits = 2, scientific = TRUE))\n  \n  location &lt;- max(data_subset$FC, na.rm = TRUE) * 1.1\n  \n  # Standard Boxplot\n  plot_1 &lt;- ggplot() +\n    geom_boxplot(data = data_subset, aes(x = bacteria_label, y = FC, fill = bacteria_label)) + \n    \n    geom_jitter(data = data_subset, aes(x = bacteria_label, y = FC, shape = Line), \n                fill = \"grey50\", color = \"grey30\", size = 2, width = 0.05, stroke = 0.75) +\n    \n    scale_fill_manual(values = c(\"grey80\",\"#AA35E3\",\"#2e67f2\",\"#927ed1\")) +\n    scale_shape_manual(values = c(21, 22, 24)) +\n    \n    labs(x = \"\",\n         y = \"Fold change in LDH from -1 hour\") +\n    \n    theme_bw() +\n    theme(panel.grid = element_blank(),\n          legend.position = \"none\",\n          text = element_text(size = 20), \n          axis.text.x = element_markdown(), \n          axis.text.y = element_text(color = \"black\"))\n  \n  # Plot with predicted means and standard errors of the estimates\n  plot_2 &lt;- ggplot() +\n    geom_point(data = data_subset, \n                aes(x = bacteria_label, y = FC, fill = bacteria_label, color = bacteria_label, shape = Line), \n                position = position_jitterdodge(dodge.width = 0.7, jitter.width = 0.2),\n                size = 1.5, alpha = 0.75, stroke = 0.75) +\n    \n    geom_point(data = data_summary_df, aes(x = bacteria_label, y = mean.predval), shape = 3, size = 3) +\n    geom_errorbar(data = data_summary_df, aes(x = bacteria_label,\n                                              y = mean.predval,\n                                              ymax = max,\n                                              ymin = min),\n                  width = 0.4) +\n    \n    scale_fill_manual(values = c(\"#5b5b5b\",\"#AA35E3\",\"#2e67f2\",\"#927ed1\")) +\n    scale_color_manual(values = c(\"#5b5b5b\",\"#AA35E3\",\"#2e67f2\",\"#927ed1\")) +\n    scale_shape_manual(values = c(21, 22, 24)) +\n    \n    scale_y_continuous(expand = c(0.1,0)) +\n    \n    labs(x = \"\",\n         y = \"Fold change in LDH from -1 hour\",\n         fill = \"Bacteria\", color = \"Bacteria\", shape = \"HNO Line\") +\n    \n    theme_bw() +\n    theme(panel.grid = element_blank(), \n          legend.text = element_markdown(),\n          text = element_text(size = 20), \n          axis.text.x = element_markdown(), \n          axis.text.y = element_text(color = \"black\"))\n  \n  # Conditionally add p-value annotations layer\n  if (nrow(contrast_sign) &gt; 0) {\n    plot_2 &lt;- plot_2 +\n      stat_pvalue_manual(contrast_sign, label = \"p.adj.holm\", y.position = location,\n                         tip.length = 0.02, bracket.shorten = 0.2, vjust = -0.2, bracket.size = 0.3, size = 3.5)\n  } else {\n    plot_2 &lt;- plot_2\n  }\n  \n  # Arrange plot and tables for summary pdf\n  table &lt;- contrasts_df %&gt;%\n    select(condition1, condition2, p.adj.holm, sign, mean.predval.1, mean.predval.2, FC, highlighted) %&gt;%\n    mutate(p.adj.holm = format(p.adj.holm, digits = 2, scientific = TRUE))\n  \n  Tmin &lt;- ttheme_minimal()\n  panel &lt;- ggarrange(plot_1 + theme(plot.margin = unit(c(0.25,0.25,0.25,0.25), \"in\")), \n                     plot_2 + theme(plot.margin = unit(c(0.25,0.25,0.25,0.25), \"in\")),\n                     tableGrob(anova_df, theme = Tmin), \n                     tableGrob(random_effects_df, theme = Tmin, rows = NULL), \n                     tableGrob(table, theme = Tmin, rows = NULL), \n                     ncol = 1, heights = c(0.6, 0.6, 0.1, 0.2, 0.2),\n                     labels = c(\"  Standard Boxplot \", \"Predicted Mean ± 2*SE\", \"    Anova    \", \"Random Effects\", \"   Contrasts  \"))\n  panel &lt;- annotate_figure(panel, top = text_grob(\n    paste0(\"Analysis for \", each_temp, \"C timepoint \", each_endpoint, \" h. P-value: \", cutoff_pvalue, \" and FC: \", cutoff_FC),\n                                                         face = \"bold\", size = 14, color = \"red\"))\n  \n  # Save files\n  ggsave(panel, filename = paste0(figures_folder, \"/summaryLDH_\", each_temp, \"C_\", each_endpoint, \"h.pdf\"), width = 9, height = 14)\n  ggsave(plot_2, filename = paste0(figures_folder, \"/plotLDH_\", each_temp, \"C_\", each_endpoint, \"h.png\"), width = 7, height = 6)\n  saveRDS(plot_2, file.path(figures_folder, paste0(\"plotLDH_\", each_temp, \"C_\", each_endpoint, \"h.rds\")))\n  write_csv(anova_df, file.path(stats_folder, paste0(\"anova_\", each_temp, \"C_\", each_endpoint, \"h.csv\")))\n  write_csv(random_effects_df, file.path(stats_folder, paste0(\"stats_random_effects_\", each_temp, \"C_\", each_endpoint, \"h.csv\")))\n  write_csv(contrasts_df, file.path(stats_folder, paste0(\"stats_contrasts_\", each_temp, \"C_\", each_endpoint, \"h.csv\")))\n  write_csv(data_summary_df, file.path(stats_folder, paste0(\"stats_summary_\", each_temp, \"C_\", each_endpoint, \"h.csv\")))\n  \n  return(list(\n    anova = anova_df,\n    random_effects = random_effects_df,\n    contrasts = contrasts_df,\n    data_summary = data_summary_df,\n    data_subset = data_subset,\n    plot_1 = plot_1,\n    plot_2 = plot_2,\n    panel = panel\n  ))\n}\n\n\n\nApply to each temp\n\nMain Data: 34C\n\nanalysis_function(LDH_FC, each_temp = \"34\", each_endpoint = \"48\", cutoff_pvalue = 0.05, cutoff_FC = 1)\n\n$anova\n         Sum Sq Mean Sq NumDF   DenDF F value  Pr(&gt;F) sign\nSpecies 1.9e+02 6.3e+01     3 6.6e+01   4e+00 1.1e-02    *\n\n$random_effects\n        grp        var1 var2       vcov     sdcor proportion\n1 Line:Date (Intercept) &lt;NA&gt;  0.0000000 0.0000000       0.00\n2      Line (Intercept) &lt;NA&gt;  0.3787548 0.6154306       2.36\n3  Residual        &lt;NA&gt; &lt;NA&gt; 15.6531696 3.9564087      97.64\n\n$contrasts\n           contrast condition1  condition2   estimate       SE       df\n1 Dpi - Uncolonized        Dpi Uncolonized  0.5376209 1.261251 51.62153\n2 Sau - Uncolonized        Sau Uncolonized  4.0243686 1.312822 53.38139\n3 Spn - Uncolonized        Spn Uncolonized -0.2551308 1.289533 52.44458\n     t.ratio     p.value p.adj.holm sign\n1  0.4262599 0.671690735 1.00000000     \n2  3.0654325 0.003406184 0.01021855    *\n3 -0.1978474 0.843929327 1.00000000     \n                                                 group1\n1 &lt;i&gt;&lt;b&gt;&lt;span style='color:#0443DC;'&gt;Dpi&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;\n2 &lt;i&gt;&lt;b&gt;&lt;span style='color:#6D05A0;'&gt;Sau&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;\n3 &lt;i&gt;&lt;b&gt;&lt;span style='color:#927ED1;'&gt;Spn&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;\n                                            group2 mean.predval.1\n1 &lt;b&gt;&lt;span style='color:#5b5b5b;'&gt;Uncol&lt;/span&gt;&lt;/b&gt;       2.147787\n2 &lt;b&gt;&lt;span style='color:#5b5b5b;'&gt;Uncol&lt;/span&gt;&lt;/b&gt;       5.634535\n3 &lt;b&gt;&lt;span style='color:#5b5b5b;'&gt;Uncol&lt;/span&gt;&lt;/b&gt;       1.355036\n  mean.predval.2        FC highlighted\n1       1.610167  1.333891           +\n2       1.610167  3.499349           +\n3       1.610167 -1.188283           -\n\n$data_summary\n# A tibble: 4 × 7\n# Groups:   Species [4]\n  Species    bacteria_label mean.real mean.predval mean.predval.se   max     min\n  &lt;fct&gt;      &lt;fct&gt;              &lt;dbl&gt;        &lt;dbl&gt;           &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;\n1 Dpi        &lt;i&gt;&lt;b&gt;&lt;span s…      2.11         2.15           1.03   4.20  0.0973\n2 Sau        &lt;i&gt;&lt;b&gt;&lt;span s…      5.62         5.63           1.08   7.80  3.47  \n3 Spn        &lt;i&gt;&lt;b&gt;&lt;span s…      1.33         1.36           1.06   3.47 -0.758 \n4 Uncoloniz… &lt;b&gt;&lt;span styl…      1.59         1.61           0.884  3.38 -0.158 \n\n$data_subset\n         Date   Line     Species\n1  01_17_2023 HNO204         Dpi\n2  01_17_2023 HNO204         Sau\n3  01_17_2023 HNO204         Spn\n4  01_17_2023 HNO204 Uncolonized\n5  01_24_2023 HNO919         Dpi\n6  01_24_2023 HNO919         Spn\n7  01_24_2023 HNO919 Uncolonized\n8  02_07_2023 HNO204         Dpi\n9  02_07_2023 HNO204         Sau\n10 02_07_2023 HNO204         Spn\n11 02_07_2023 HNO204 Uncolonized\n12 02_14_2023 HNO919         Dpi\n13 02_14_2023 HNO919         Sau\n14 02_14_2023 HNO919         Spn\n15 02_14_2023 HNO919 Uncolonized\n16 02_28_2023 HNO204         Dpi\n17 02_28_2023 HNO204         Sau\n18 02_28_2023 HNO204         Spn\n19 02_28_2023 HNO204 Uncolonized\n20 08_09_2022 HNO918         Dpi\n21 08_09_2022 HNO918         Spn\n22 08_09_2022 HNO918 Uncolonized\n23 08_10_2022 HNO204         Dpi\n24 08_10_2022 HNO204         Spn\n25 08_10_2022 HNO204 Uncolonized\n26 08_16_2022 HNO919         Dpi\n27 08_16_2022 HNO919         Sau\n28 08_16_2022 HNO919 Uncolonized\n29 08_17_2022 HNO918         Dpi\n30 08_17_2022 HNO918         Sau\n31 08_17_2022 HNO918 Uncolonized\n32 08_23_2022 HNO204         Dpi\n33 08_23_2022 HNO204         Spn\n34 08_23_2022 HNO204 Uncolonized\n35 08_30_2022 HNO918         Dpi\n36 08_30_2022 HNO918         Sau\n37 08_30_2022 HNO918         Spn\n38 08_30_2022 HNO918 Uncolonized\n39 08_31_2022 HNO204         Dpi\n40 08_31_2022 HNO204         Spn\n41 08_31_2022 HNO204 Uncolonized\n42 09_06_2022 HNO919         Dpi\n43 09_06_2022 HNO919         Sau\n44 09_06_2022 HNO919         Spn\n45 09_06_2022 HNO919 Uncolonized\n46 09_07_2022 HNO918         Dpi\n47 09_07_2022 HNO918 Uncolonized\n48 09_13_2022 HNO204         Dpi\n49 09_13_2022 HNO204         Spn\n50 09_13_2022 HNO204 Uncolonized\n51 09_14_2022 HNO919         Dpi\n52 09_14_2022 HNO919         Sau\n53 09_14_2022 HNO919         Spn\n54 09_14_2022 HNO919 Uncolonized\n55 09_20_2022 HNO918         Sau\n56 09_20_2022 HNO918 Uncolonized\n57 09_21_2022 HNO204         Sau\n58 09_21_2022 HNO204 Uncolonized\n59 09_27_2023 HNO919         Sau\n60 09_27_2023 HNO919         Spn\n61 09_27_2023 HNO919 Uncolonized\n62 10_04_2022 HNO918         Sau\n63 10_04_2022 HNO918         Spn\n64 10_04_2022 HNO918 Uncolonized\n65 10_11_2022 HNO204         Sau\n66 10_11_2022 HNO204         Spn\n67 10_11_2022 HNO204 Uncolonized\n68 10_25_2022 HNO204         Sau\n69 10_25_2022 HNO204 Uncolonized\n70 11_01_2022 HNO919         Dpi\n71 11_01_2022 HNO919 Uncolonized\n72 11_02_2022 HNO919 Uncolonized\n                                          bacteria_label Temp Well_Endpoint\n1  &lt;i&gt;&lt;b&gt;&lt;span style='color:#0443DC;'&gt;Dpi&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;   34            48\n2  &lt;i&gt;&lt;b&gt;&lt;span style='color:#6D05A0;'&gt;Sau&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;   34            48\n3  &lt;i&gt;&lt;b&gt;&lt;span style='color:#927ED1;'&gt;Spn&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;   34            48\n4       &lt;b&gt;&lt;span style='color:#5b5b5b;'&gt;Uncol&lt;/span&gt;&lt;/b&gt;   34            48\n5  &lt;i&gt;&lt;b&gt;&lt;span style='color:#0443DC;'&gt;Dpi&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;   34            48\n6  &lt;i&gt;&lt;b&gt;&lt;span style='color:#927ED1;'&gt;Spn&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;   34            48\n7       &lt;b&gt;&lt;span style='color:#5b5b5b;'&gt;Uncol&lt;/span&gt;&lt;/b&gt;   34            48\n8  &lt;i&gt;&lt;b&gt;&lt;span style='color:#0443DC;'&gt;Dpi&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;   34            48\n9  &lt;i&gt;&lt;b&gt;&lt;span style='color:#6D05A0;'&gt;Sau&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;   34            48\n10 &lt;i&gt;&lt;b&gt;&lt;span style='color:#927ED1;'&gt;Spn&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;   34            48\n11      &lt;b&gt;&lt;span style='color:#5b5b5b;'&gt;Uncol&lt;/span&gt;&lt;/b&gt;   34            48\n12 &lt;i&gt;&lt;b&gt;&lt;span style='color:#0443DC;'&gt;Dpi&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;   34            48\n13 &lt;i&gt;&lt;b&gt;&lt;span style='color:#6D05A0;'&gt;Sau&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;   34            48\n14 &lt;i&gt;&lt;b&gt;&lt;span style='color:#927ED1;'&gt;Spn&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;   34            48\n15      &lt;b&gt;&lt;span style='color:#5b5b5b;'&gt;Uncol&lt;/span&gt;&lt;/b&gt;   34            48\n16 &lt;i&gt;&lt;b&gt;&lt;span style='color:#0443DC;'&gt;Dpi&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;   34            48\n17 &lt;i&gt;&lt;b&gt;&lt;span style='color:#6D05A0;'&gt;Sau&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;   34            48\n18 &lt;i&gt;&lt;b&gt;&lt;span style='color:#927ED1;'&gt;Spn&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;   34            48\n19      &lt;b&gt;&lt;span style='color:#5b5b5b;'&gt;Uncol&lt;/span&gt;&lt;/b&gt;   34            48\n20 &lt;i&gt;&lt;b&gt;&lt;span style='color:#0443DC;'&gt;Dpi&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;   34            48\n21 &lt;i&gt;&lt;b&gt;&lt;span style='color:#927ED1;'&gt;Spn&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;   34            48\n22      &lt;b&gt;&lt;span style='color:#5b5b5b;'&gt;Uncol&lt;/span&gt;&lt;/b&gt;   34            48\n23 &lt;i&gt;&lt;b&gt;&lt;span style='color:#0443DC;'&gt;Dpi&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;   34            48\n24 &lt;i&gt;&lt;b&gt;&lt;span style='color:#927ED1;'&gt;Spn&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;   34            48\n25      &lt;b&gt;&lt;span style='color:#5b5b5b;'&gt;Uncol&lt;/span&gt;&lt;/b&gt;   34            48\n26 &lt;i&gt;&lt;b&gt;&lt;span style='color:#0443DC;'&gt;Dpi&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;   34            48\n27 &lt;i&gt;&lt;b&gt;&lt;span style='color:#6D05A0;'&gt;Sau&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;   34            48\n28      &lt;b&gt;&lt;span style='color:#5b5b5b;'&gt;Uncol&lt;/span&gt;&lt;/b&gt;   34            48\n29 &lt;i&gt;&lt;b&gt;&lt;span style='color:#0443DC;'&gt;Dpi&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;   34            48\n30 &lt;i&gt;&lt;b&gt;&lt;span style='color:#6D05A0;'&gt;Sau&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;   34            48\n31      &lt;b&gt;&lt;span style='color:#5b5b5b;'&gt;Uncol&lt;/span&gt;&lt;/b&gt;   34            48\n32 &lt;i&gt;&lt;b&gt;&lt;span style='color:#0443DC;'&gt;Dpi&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;   34            48\n33 &lt;i&gt;&lt;b&gt;&lt;span style='color:#927ED1;'&gt;Spn&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;   34            48\n34      &lt;b&gt;&lt;span style='color:#5b5b5b;'&gt;Uncol&lt;/span&gt;&lt;/b&gt;   34            48\n35 &lt;i&gt;&lt;b&gt;&lt;span style='color:#0443DC;'&gt;Dpi&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;   34            48\n36 &lt;i&gt;&lt;b&gt;&lt;span style='color:#6D05A0;'&gt;Sau&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;   34            48\n37 &lt;i&gt;&lt;b&gt;&lt;span style='color:#927ED1;'&gt;Spn&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;   34            48\n38      &lt;b&gt;&lt;span style='color:#5b5b5b;'&gt;Uncol&lt;/span&gt;&lt;/b&gt;   34            48\n39 &lt;i&gt;&lt;b&gt;&lt;span style='color:#0443DC;'&gt;Dpi&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;   34            48\n40 &lt;i&gt;&lt;b&gt;&lt;span style='color:#927ED1;'&gt;Spn&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;   34            48\n41      &lt;b&gt;&lt;span style='color:#5b5b5b;'&gt;Uncol&lt;/span&gt;&lt;/b&gt;   34            48\n42 &lt;i&gt;&lt;b&gt;&lt;span style='color:#0443DC;'&gt;Dpi&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;   34            48\n43 &lt;i&gt;&lt;b&gt;&lt;span style='color:#6D05A0;'&gt;Sau&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;   34            48\n44 &lt;i&gt;&lt;b&gt;&lt;span style='color:#927ED1;'&gt;Spn&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;   34            48\n45      &lt;b&gt;&lt;span style='color:#5b5b5b;'&gt;Uncol&lt;/span&gt;&lt;/b&gt;   34            48\n46 &lt;i&gt;&lt;b&gt;&lt;span style='color:#0443DC;'&gt;Dpi&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;   34            48\n47      &lt;b&gt;&lt;span style='color:#5b5b5b;'&gt;Uncol&lt;/span&gt;&lt;/b&gt;   34            48\n48 &lt;i&gt;&lt;b&gt;&lt;span style='color:#0443DC;'&gt;Dpi&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;   34            48\n49 &lt;i&gt;&lt;b&gt;&lt;span style='color:#927ED1;'&gt;Spn&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;   34            48\n50      &lt;b&gt;&lt;span style='color:#5b5b5b;'&gt;Uncol&lt;/span&gt;&lt;/b&gt;   34            48\n51 &lt;i&gt;&lt;b&gt;&lt;span style='color:#0443DC;'&gt;Dpi&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;   34            48\n52 &lt;i&gt;&lt;b&gt;&lt;span style='color:#6D05A0;'&gt;Sau&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;   34            48\n53 &lt;i&gt;&lt;b&gt;&lt;span style='color:#927ED1;'&gt;Spn&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;   34            48\n54      &lt;b&gt;&lt;span style='color:#5b5b5b;'&gt;Uncol&lt;/span&gt;&lt;/b&gt;   34            48\n55 &lt;i&gt;&lt;b&gt;&lt;span style='color:#6D05A0;'&gt;Sau&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;   34            48\n56      &lt;b&gt;&lt;span style='color:#5b5b5b;'&gt;Uncol&lt;/span&gt;&lt;/b&gt;   34            48\n57 &lt;i&gt;&lt;b&gt;&lt;span style='color:#6D05A0;'&gt;Sau&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;   34            48\n58      &lt;b&gt;&lt;span style='color:#5b5b5b;'&gt;Uncol&lt;/span&gt;&lt;/b&gt;   34            48\n59 &lt;i&gt;&lt;b&gt;&lt;span style='color:#6D05A0;'&gt;Sau&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;   34            48\n60 &lt;i&gt;&lt;b&gt;&lt;span style='color:#927ED1;'&gt;Spn&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;   34            48\n61      &lt;b&gt;&lt;span style='color:#5b5b5b;'&gt;Uncol&lt;/span&gt;&lt;/b&gt;   34            48\n62 &lt;i&gt;&lt;b&gt;&lt;span style='color:#6D05A0;'&gt;Sau&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;   34            48\n63 &lt;i&gt;&lt;b&gt;&lt;span style='color:#927ED1;'&gt;Spn&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;   34            48\n64      &lt;b&gt;&lt;span style='color:#5b5b5b;'&gt;Uncol&lt;/span&gt;&lt;/b&gt;   34            48\n65 &lt;i&gt;&lt;b&gt;&lt;span style='color:#6D05A0;'&gt;Sau&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;   34            48\n66 &lt;i&gt;&lt;b&gt;&lt;span style='color:#927ED1;'&gt;Spn&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;   34            48\n67      &lt;b&gt;&lt;span style='color:#5b5b5b;'&gt;Uncol&lt;/span&gt;&lt;/b&gt;   34            48\n68 &lt;i&gt;&lt;b&gt;&lt;span style='color:#6D05A0;'&gt;Sau&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;   34            48\n69      &lt;b&gt;&lt;span style='color:#5b5b5b;'&gt;Uncol&lt;/span&gt;&lt;/b&gt;   34            48\n70 &lt;i&gt;&lt;b&gt;&lt;span style='color:#0443DC;'&gt;Dpi&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;   34            48\n71      &lt;b&gt;&lt;span style='color:#5b5b5b;'&gt;Uncol&lt;/span&gt;&lt;/b&gt;   34            48\n72      &lt;b&gt;&lt;span style='color:#5b5b5b;'&gt;Uncol&lt;/span&gt;&lt;/b&gt;   34            48\n           FC predval.fit predval.se.fit\n1   1.6107056    2.147787      1.0252266\n2   1.1521253    5.634535      1.0825826\n3   1.2196382    1.355036      1.0566856\n4   1.4673629    1.610167      0.8842437\n5   1.1666667    2.147787      1.0252266\n6   1.0420561    1.355036      1.0566856\n7   1.0629921    1.610167      0.8842437\n8   1.1233244    2.147787      1.0252266\n9  18.7660099    5.634535      1.0825826\n10  1.1213720    1.355036      1.0566856\n11  1.3569554    1.610167      0.8842437\n12  1.1079295    2.147787      1.0252266\n13  1.4253394    5.634535      1.0825826\n14  1.1241535    1.355036      1.0566856\n15  0.8728324    1.610167      0.8842437\n16  0.9670588    2.147787      1.0252266\n17  1.1798715    5.634535      1.0825826\n18  1.0730594    1.355036      1.0566856\n19  1.2884097    1.610167      0.8842437\n20  2.8243512    2.147787      1.0252266\n21  1.7787115    1.355036      1.0566856\n22  2.6411765    1.610167      0.8842437\n23  2.3894340    2.147787      1.0252266\n24  1.8271437    1.355036      1.0566856\n25  2.0180878    1.610167      0.8842437\n26  2.1775535    2.147787      1.0252266\n27  1.7889578    5.634535      1.0825826\n28  1.7968385    1.610167      0.8842437\n29  2.4007134    2.147787      1.0252266\n30  4.8096318    5.634535      1.0825826\n31  1.8421673    1.610167      0.8842437\n32  5.1042850    2.147787      1.0252266\n33  0.9423572    1.355036      1.0566856\n34  2.4878412    1.610167      0.8842437\n35  2.8830189    2.147787      1.0252266\n36  1.5291971    5.634535      1.0825826\n37  2.1863799    1.355036      1.0566856\n38  2.5090253    1.610167      0.8842437\n39  3.6423077    2.147787      1.0252266\n40  1.6666667    1.355036      1.0566856\n41  1.6231884    1.610167      0.8842437\n42  1.9311741    2.147787      1.0252266\n43  1.9799197    5.634535      1.0825826\n44  1.1392405    1.355036      1.0566856\n45  1.2775330    1.610167      0.8842437\n46  1.3724696    2.147787      1.0252266\n47  1.7096774    1.610167      0.8842437\n48  1.5791506    2.147787      1.0252266\n49  1.3440000    1.355036      1.0566856\n50  1.3512397    1.610167      0.8842437\n51  2.3795380    2.147787      1.0252266\n52  1.4391691    5.634535      1.0825826\n53  1.1746988    1.355036      1.0566856\n54  1.2951807    1.610167      0.8842437\n55 30.6586103    5.634535      1.0825826\n56  1.6335404    1.610167      0.8842437\n57  1.2132353    5.634535      1.0825826\n58  1.5528701    1.610167      0.8842437\n59  1.8671679    5.634535      1.0825826\n60  1.4087302    1.355036      1.0566856\n61  1.6336634    1.610167      0.8842437\n62  1.0116618    5.634535      1.0825826\n63  0.9728097    1.355036      1.0566856\n64  1.2942857    1.610167      0.8842437\n65 13.7467018    5.634535      1.0825826\n66  1.2047872    1.355036      1.0566856\n67  1.3798701    1.610167      0.8842437\n68  1.6891026    5.634535      1.0825826\n69  1.6053333    1.610167      0.8842437\n70  1.2621723    2.147787      1.0252266\n71  1.3215686    1.610167      0.8842437\n72  1.0997067    1.610167      0.8842437\n\n$plot_1\n\n\n\n\n\n\n$plot_2\n\n\n\n\n\n\n$panel\n\n\n\n\n\n\n\nSupplemental Data: 37C\n\nanalysis_function(LDH_FC, each_temp = \"37\", each_endpoint = \"48\", cutoff_pvalue = 0.05, cutoff_FC = 1)\n\n$anova\n         Sum Sq Mean Sq NumDF   DenDF F value  Pr(&gt;F) sign\nSpecies 3.4e+01 1.1e+01     3 3.2e+01 4.2e+00 1.3e-02    *\n\n$random_effects\n        grp        var1 var2      vcov     sdcor proportion\n1 Line:Date (Intercept) &lt;NA&gt; 0.1592123 0.3990142       5.63\n2      Line (Intercept) &lt;NA&gt; 0.0000000 0.0000000       0.00\n3  Residual        &lt;NA&gt; &lt;NA&gt; 2.6703268 1.6341135      94.37\n\n$contrasts\n           contrast condition1  condition2   estimate        SE       df\n1 Dpi - Uncolonized        Dpi Uncolonized  0.6737338 0.6154067 36.63814\n2 Sau - Uncolonized        Sau Uncolonized  1.6196034 0.6319761 37.41009\n3 Spn - Uncolonized        Spn Uncolonized -0.7311755 0.6330511 37.41164\n    t.ratio    p.value p.adj.holm sign\n1  1.094778 0.28075888 0.51082708     \n2  2.562761 0.01453752 0.04361255    *\n3 -1.155002 0.25541354 0.51082708     \n                                                 group1\n1 &lt;i&gt;&lt;b&gt;&lt;span style='color:#0443DC;'&gt;Dpi&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;\n2 &lt;i&gt;&lt;b&gt;&lt;span style='color:#6D05A0;'&gt;Sau&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;\n3 &lt;i&gt;&lt;b&gt;&lt;span style='color:#927ED1;'&gt;Spn&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;\n                                            group2 mean.predval.1\n1 &lt;b&gt;&lt;span style='color:#5b5b5b;'&gt;Uncol&lt;/span&gt;&lt;/b&gt;       2.681271\n2 &lt;b&gt;&lt;span style='color:#5b5b5b;'&gt;Uncol&lt;/span&gt;&lt;/b&gt;       3.627141\n3 &lt;b&gt;&lt;span style='color:#5b5b5b;'&gt;Uncol&lt;/span&gt;&lt;/b&gt;       1.276362\n  mean.predval.2        FC highlighted\n1       2.007537  1.335602           +\n2       2.007537  1.806761           +\n3       2.007537 -1.572859           -\n\n$data_summary\n# A tibble: 4 × 7\n# Groups:   Species [4]\n  Species     bacteria_label  mean.real mean.predval mean.predval.se   max   min\n  &lt;fct&gt;       &lt;fct&gt;               &lt;dbl&gt;        &lt;dbl&gt;           &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 Dpi         &lt;i&gt;&lt;b&gt;&lt;span st…      2.68         2.68           0.485  3.65 1.71 \n2 Sau         &lt;i&gt;&lt;b&gt;&lt;span st…      3.60         3.63           0.507  4.64 2.61 \n3 Spn         &lt;i&gt;&lt;b&gt;&lt;span st…      1.28         1.28           0.506  2.29 0.263\n4 Uncolonized &lt;b&gt;&lt;span style…      2.01         2.01           0.386  2.78 1.24 \n\n$data_subset\n         Date   Line     Species\n1  02_28_2023 HNO204         Sau\n2  02_28_2023 HNO204 Uncolonized\n3  08_09_2022 HNO918         Dpi\n4  08_09_2022 HNO918         Spn\n5  08_09_2022 HNO918 Uncolonized\n6  08_10_2022 HNO204         Dpi\n7  08_10_2022 HNO204         Spn\n8  08_10_2022 HNO204 Uncolonized\n9  08_17_2022 HNO918         Dpi\n10 08_17_2022 HNO918         Sau\n11 08_17_2022 HNO918         Spn\n12 08_17_2022 HNO918 Uncolonized\n13 08_23_2022 HNO204         Dpi\n14 08_23_2022 HNO204         Spn\n15 08_23_2022 HNO204 Uncolonized\n16 08_30_2022 HNO918         Dpi\n17 08_30_2022 HNO918         Sau\n18 08_30_2022 HNO918         Spn\n19 08_30_2022 HNO918 Uncolonized\n20 08_31_2022 HNO204         Dpi\n21 08_31_2022 HNO204         Spn\n22 08_31_2022 HNO204 Uncolonized\n23 09_06_2022 HNO919         Dpi\n24 09_06_2022 HNO919         Sau\n25 09_06_2022 HNO919         Spn\n26 09_06_2022 HNO919 Uncolonized\n27 09_07_2022 HNO918         Dpi\n28 09_07_2022 HNO918 Uncolonized\n29 09_13_2022 HNO204         Dpi\n30 09_13_2022 HNO204         Spn\n31 09_13_2022 HNO204 Uncolonized\n32 09_14_2022 HNO919         Dpi\n33 09_14_2022 HNO919         Sau\n34 09_14_2022 HNO919 Uncolonized\n35 09_20_2022 HNO918         Sau\n36 09_20_2022 HNO918 Uncolonized\n37 09_21_2022 HNO204         Sau\n38 09_21_2022 HNO204 Uncolonized\n39 09_27_2023 HNO919         Sau\n40 09_27_2023 HNO919         Spn\n41 09_27_2023 HNO919 Uncolonized\n42 10_04_2022 HNO918         Sau\n43 10_04_2022 HNO918         Spn\n44 10_04_2022 HNO918 Uncolonized\n45 10_11_2022 HNO204         Sau\n46 10_11_2022 HNO204         Spn\n47 10_11_2022 HNO204 Uncolonized\n48 10_25_2022 HNO204         Sau\n49 10_25_2022 HNO204 Uncolonized\n50 11_01_2022 HNO919         Dpi\n51 11_01_2022 HNO919 Uncolonized\n52 11_02_2022 HNO919         Dpi\n53 11_02_2022 HNO919 Uncolonized\n                                          bacteria_label Temp Well_Endpoint\n1  &lt;i&gt;&lt;b&gt;&lt;span style='color:#6D05A0;'&gt;Sau&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;   37            48\n2       &lt;b&gt;&lt;span style='color:#5b5b5b;'&gt;Uncol&lt;/span&gt;&lt;/b&gt;   37            48\n3  &lt;i&gt;&lt;b&gt;&lt;span style='color:#0443DC;'&gt;Dpi&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;   37            48\n4  &lt;i&gt;&lt;b&gt;&lt;span style='color:#927ED1;'&gt;Spn&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;   37            48\n5       &lt;b&gt;&lt;span style='color:#5b5b5b;'&gt;Uncol&lt;/span&gt;&lt;/b&gt;   37            48\n6  &lt;i&gt;&lt;b&gt;&lt;span style='color:#0443DC;'&gt;Dpi&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;   37            48\n7  &lt;i&gt;&lt;b&gt;&lt;span style='color:#927ED1;'&gt;Spn&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;   37            48\n8       &lt;b&gt;&lt;span style='color:#5b5b5b;'&gt;Uncol&lt;/span&gt;&lt;/b&gt;   37            48\n9  &lt;i&gt;&lt;b&gt;&lt;span style='color:#0443DC;'&gt;Dpi&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;   37            48\n10 &lt;i&gt;&lt;b&gt;&lt;span style='color:#6D05A0;'&gt;Sau&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;   37            48\n11 &lt;i&gt;&lt;b&gt;&lt;span style='color:#927ED1;'&gt;Spn&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;   37            48\n12      &lt;b&gt;&lt;span style='color:#5b5b5b;'&gt;Uncol&lt;/span&gt;&lt;/b&gt;   37            48\n13 &lt;i&gt;&lt;b&gt;&lt;span style='color:#0443DC;'&gt;Dpi&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;   37            48\n14 &lt;i&gt;&lt;b&gt;&lt;span style='color:#927ED1;'&gt;Spn&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;   37            48\n15      &lt;b&gt;&lt;span style='color:#5b5b5b;'&gt;Uncol&lt;/span&gt;&lt;/b&gt;   37            48\n16 &lt;i&gt;&lt;b&gt;&lt;span style='color:#0443DC;'&gt;Dpi&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;   37            48\n17 &lt;i&gt;&lt;b&gt;&lt;span style='color:#6D05A0;'&gt;Sau&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;   37            48\n18 &lt;i&gt;&lt;b&gt;&lt;span style='color:#927ED1;'&gt;Spn&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;   37            48\n19      &lt;b&gt;&lt;span style='color:#5b5b5b;'&gt;Uncol&lt;/span&gt;&lt;/b&gt;   37            48\n20 &lt;i&gt;&lt;b&gt;&lt;span style='color:#0443DC;'&gt;Dpi&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;   37            48\n21 &lt;i&gt;&lt;b&gt;&lt;span style='color:#927ED1;'&gt;Spn&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;   37            48\n22      &lt;b&gt;&lt;span style='color:#5b5b5b;'&gt;Uncol&lt;/span&gt;&lt;/b&gt;   37            48\n23 &lt;i&gt;&lt;b&gt;&lt;span style='color:#0443DC;'&gt;Dpi&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;   37            48\n24 &lt;i&gt;&lt;b&gt;&lt;span style='color:#6D05A0;'&gt;Sau&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;   37            48\n25 &lt;i&gt;&lt;b&gt;&lt;span style='color:#927ED1;'&gt;Spn&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;   37            48\n26      &lt;b&gt;&lt;span style='color:#5b5b5b;'&gt;Uncol&lt;/span&gt;&lt;/b&gt;   37            48\n27 &lt;i&gt;&lt;b&gt;&lt;span style='color:#0443DC;'&gt;Dpi&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;   37            48\n28      &lt;b&gt;&lt;span style='color:#5b5b5b;'&gt;Uncol&lt;/span&gt;&lt;/b&gt;   37            48\n29 &lt;i&gt;&lt;b&gt;&lt;span style='color:#0443DC;'&gt;Dpi&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;   37            48\n30 &lt;i&gt;&lt;b&gt;&lt;span style='color:#927ED1;'&gt;Spn&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;   37            48\n31      &lt;b&gt;&lt;span style='color:#5b5b5b;'&gt;Uncol&lt;/span&gt;&lt;/b&gt;   37            48\n32 &lt;i&gt;&lt;b&gt;&lt;span style='color:#0443DC;'&gt;Dpi&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;   37            48\n33 &lt;i&gt;&lt;b&gt;&lt;span style='color:#6D05A0;'&gt;Sau&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;   37            48\n34      &lt;b&gt;&lt;span style='color:#5b5b5b;'&gt;Uncol&lt;/span&gt;&lt;/b&gt;   37            48\n35 &lt;i&gt;&lt;b&gt;&lt;span style='color:#6D05A0;'&gt;Sau&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;   37            48\n36      &lt;b&gt;&lt;span style='color:#5b5b5b;'&gt;Uncol&lt;/span&gt;&lt;/b&gt;   37            48\n37 &lt;i&gt;&lt;b&gt;&lt;span style='color:#6D05A0;'&gt;Sau&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;   37            48\n38      &lt;b&gt;&lt;span style='color:#5b5b5b;'&gt;Uncol&lt;/span&gt;&lt;/b&gt;   37            48\n39 &lt;i&gt;&lt;b&gt;&lt;span style='color:#6D05A0;'&gt;Sau&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;   37            48\n40 &lt;i&gt;&lt;b&gt;&lt;span style='color:#927ED1;'&gt;Spn&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;   37            48\n41      &lt;b&gt;&lt;span style='color:#5b5b5b;'&gt;Uncol&lt;/span&gt;&lt;/b&gt;   37            48\n42 &lt;i&gt;&lt;b&gt;&lt;span style='color:#6D05A0;'&gt;Sau&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;   37            48\n43 &lt;i&gt;&lt;b&gt;&lt;span style='color:#927ED1;'&gt;Spn&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;   37            48\n44      &lt;b&gt;&lt;span style='color:#5b5b5b;'&gt;Uncol&lt;/span&gt;&lt;/b&gt;   37            48\n45 &lt;i&gt;&lt;b&gt;&lt;span style='color:#6D05A0;'&gt;Sau&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;   37            48\n46 &lt;i&gt;&lt;b&gt;&lt;span style='color:#927ED1;'&gt;Spn&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;   37            48\n47      &lt;b&gt;&lt;span style='color:#5b5b5b;'&gt;Uncol&lt;/span&gt;&lt;/b&gt;   37            48\n48 &lt;i&gt;&lt;b&gt;&lt;span style='color:#6D05A0;'&gt;Sau&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;   37            48\n49      &lt;b&gt;&lt;span style='color:#5b5b5b;'&gt;Uncol&lt;/span&gt;&lt;/b&gt;   37            48\n50 &lt;i&gt;&lt;b&gt;&lt;span style='color:#0443DC;'&gt;Dpi&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;   37            48\n51      &lt;b&gt;&lt;span style='color:#5b5b5b;'&gt;Uncol&lt;/span&gt;&lt;/b&gt;   37            48\n52 &lt;i&gt;&lt;b&gt;&lt;span style='color:#0443DC;'&gt;Dpi&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;   37            48\n53      &lt;b&gt;&lt;span style='color:#5b5b5b;'&gt;Uncol&lt;/span&gt;&lt;/b&gt;   37            48\n           FC predval.fit predval.se.fit\n1   1.5136986    3.627141      0.5065006\n2   1.4781705    2.007537      0.3859056\n3   2.2846571    2.681271      0.4850404\n4   1.4300518    1.276362      0.5064943\n5   2.5632816    2.007537      0.3859056\n6   2.7198708    2.681271      0.4850404\n7   0.2867798    1.276362      0.5064943\n8   2.5420207    2.007537      0.3859056\n9   3.0947136    2.681271      0.4850404\n10  2.2683449    3.627141      0.5065006\n11  0.4345635    1.276362      0.5064943\n12  1.7299169    2.007537      0.3859056\n13  2.2388127    2.681271      0.4850404\n14  1.7504621    1.276362      0.5064943\n15  3.1889793    2.007537      0.3859056\n16  2.9825175    2.681271      0.4850404\n17  3.1650165    3.627141      0.5065006\n18  1.9658703    1.276362      0.5064943\n19  2.1770833    2.007537      0.3859056\n20  3.2170819    2.681271      0.4850404\n21  1.1304348    1.276362      0.5064943\n22  4.0029940    2.007537      0.3859056\n23  2.4717742    2.681271      0.4850404\n24  1.8406375    3.627141      0.5065006\n25  1.2559055    1.276362      0.5064943\n26  1.3755102    2.007537      0.3859056\n27  2.7200000    2.681271      0.4850404\n28  3.1715116    2.007537      0.3859056\n29  4.2857143    2.681271      0.4850404\n30  1.6109589    1.276362      0.5064943\n31  2.2633745    2.007537      0.3859056\n32  2.5892473    2.681271      0.4850404\n33  3.8017429    3.627141      0.5065006\n34  0.8404352    2.007537      0.3859056\n35  1.5977444    3.627141      0.5065006\n36  1.5537190    2.007537      0.3859056\n37  1.6948640    3.627141      0.5065006\n38  1.2089041    2.007537      0.3859056\n39  1.8498728    3.627141      0.5065006\n40  1.3581081    1.276362      0.5064943\n41  0.9537037    2.007537      0.3859056\n42  7.2729885    3.627141      0.5065006\n43  1.2089552    1.276362      0.5064943\n44  1.4824561    2.007537      0.3859056\n45  1.9615385    3.627141      0.5065006\n46  1.6141975    1.276362      0.5064943\n47  1.2881844    2.007537      0.3859056\n48 12.6428571    3.627141      0.5065006\n49  1.7321937    2.007537      0.3859056\n50  1.7596899    2.681271      0.4850404\n51  2.4734848    2.007537      0.3859056\n52  1.8522727    2.681271      0.4850404\n53  2.1172840    2.007537      0.3859056\n\n$plot_1\n\n\n\n\n\n\n$plot_2\n\n\n\n\n\n\n$panel\n\n\n\n\n\n\n\nMerged Files\n\npdf_output &lt;- file.path(figures_folder, \"HNOBac_SummaryLDH.pdf\")\n\n# Check if the file exists, and delete if it does\nif (file.exists(pdf_output)) {\n  file.remove(pdf_output)\n}\n\n[1] TRUE\n\n# Now combine the PDFs into a new file\npdf_files &lt;- list.files(figures_folder, pattern = \"\\\\.pdf$\", full.names = TRUE)\nqpdf::pdf_combine(input = pdf_files, output = pdf_output)\n\n[1] \"data/outputs/LDH/figures/HNOBac_SummaryLDH.pdf\""
  },
  {
    "objectID": "Methods_Cytokines.html#data-input-and-selection",
    "href": "Methods_Cytokines.html#data-input-and-selection",
    "title": "Cytokines",
    "section": "Data Input and Selection",
    "text": "Data Input and Selection\n\nFile Paths\n\n# Folder paths\ninput_path &lt;- \"data/input_data/Cytokines/\"\nmetadata_path &lt;- \"data/metadata/Cytokines\"\n\n# Create subfolders for output files\nanalysis_folder &lt;- \"data/outputs/Cytokines/analysis_log2FC\"\nif (!file.exists(\"data/outputs/Cytokines/analysis_log2FC\")) {\n  dir.create(\"data/outputs/Cytokines/analysis_log2FC\", recursive = TRUE)\n}\ndataframes_folder &lt;- \"data/dataframes\"\nif (!file.exists(\"data/dataframes\")) {\n  dir.create(\"data/dataframes\", recursive = TRUE)\n}\n\n# Load metadata\ninput_data &lt;- read_excel(file.path(metadata_path, \"Sample_List.xlsx\"))\norder_Cyto &lt;- read_csv(file.path(metadata_path, \"Order_Cytokines.csv\")) %&gt;% mutate_if(is.character, factor)\n\n\n\nData input and clean-up\n\n# List all the input files, loop through each file and create a merged dataframe \nfile_list &lt;- list.files(input_path, pattern = \"Detail\\\\.xls$\", full.names = TRUE)\n\nfor (file_path in file_list) {\n  # Read the Excel file and skip the first 3 rows\n  file_data &lt;- read_excel(file_path, sheet = \"Summary\", skip = 3)\n  \n  # Left join with the existing sample_list\n  input_data &lt;- left_join(input_data, file_data, by = \"Analyte  Sample\")\n}\n\n# Rename \"Analyte  Sample\" to avoid issues with spaces in variable names\ninput_data &lt;- input_data %&gt;% \n  rename(\"SampleID\" = \"Analyte  Sample\")\n\n# Pivot the data from wide to long format crating the Cytokine variable\ninput_data_long &lt;- pivot_longer(input_data, \n                         cols = (which(names(input_data) == \"SampleID\") + 1):ncol(input_data),\n                         names_to = \"Cytokine\", values_to = \"value\")\n\n# Identify samples below and above the limit of detection and assign them a concentration value\ninput_data_long &lt;- input_data_long %&gt;%\n  mutate(concentration = if_else(value == \"N/A\", NA, as.numeric(gsub(\"&lt;|↓|&gt;|↑\", \"\", value))),\n         below_LD = if_else(value == \"N/A\" | grepl(\"&lt;|↓\", value), TRUE, FALSE),\n         above_LD = if_else(grepl(\"&gt;|↑\", value), TRUE, FALSE))\n\n# Add columns with a simpler Cytokine name (Cyto) and Category names\ninput_data_long &lt;- left_join(input_data_long, order_Cyto, by = \"Cytokine\")\n\n# Add column with sample type information (NB control vs. bacterial sample)\ninput_data_long &lt;- input_data_long %&gt;% \n  mutate(sample_type = if_else(viability == \"control\", \"control\", \"bacteria\"))\n\n# Get average values for conditions that have technical replicas (control or NB samples)\ninput_data_long &lt;- input_data_long %&gt;% \n  group_by(date, Cyto, Category, location, line, time, bacteria, viability) %&gt;% \n  mutate(concentration_NA = ifelse(below_LD | above_LD, NA, concentration)) %&gt;% \n  mutate(concentration_avg = mean(concentration_NA, na.rm = TRUE)) %&gt;% \n  mutate(concentration_final = ifelse(is.na(concentration_avg), concentration, concentration_avg)) %&gt;% \n  select(-concentration, concentration_NA, concentration_avg) %&gt;%\n  arrange(below_LD, above_LD) %&gt;%\n  distinct(date, Cyto, Category, location, line, time, bacteria, viability, .keep_all = TRUE) %&gt;% \n  ungroup()\n\n# Cleaning up extra columns\ninput_data_long &lt;- input_data_long %&gt;%\n  select(date, Cyto, Category, location, line, time, sample_type, bacteria, viability, concentration_final, below_LD, above_LD) \n\n# Factoring variables with the right levels\ninput_data_long &lt;- input_data_long %&gt;% mutate_if(is.character, factor)\n\ninput_data_long$bacteria &lt;- factor(input_data_long$bacteria, levels = c(\"NB\", \"Dpi\", \"Sau\", \"Spn\"))\ninput_data_long$viability &lt;- factor(input_data_long$viability, levels = c(\"control\", \"live\", \"IRR\"))\ninput_data_long$line &lt;- fct_recode(input_data_long$line, \"HNO204\" = \"B\", \"HNO919\" = \"C\") \ninput_data_long$location &lt;- fct_recode(input_data_long$location, \"Apical\" = \"Ap\", \"Basal\" = \"Baso\")\ninput_data_long$Cyto &lt;- factor(input_data_long$Cyto, levels = rev(order_Cyto$Cyto))\ninput_data_long$Category &lt;- factor(input_data_long$Category, levels = unique(order_Cyto$Category))\n\n# Making new data frame with the 48h time point only\ninput_data_long_t48 &lt;- input_data_long %&gt;% \n  filter(time != 0)\n\n# Calculating log2FC relative to the non-bacteria controls\ninput_data_log2FC &lt;- input_data_long_t48 %&gt;%\n  group_by(date, Cyto, Category, location, line, time) %&gt;%\n  reframe(\n    bacteria = bacteria[sample_type == \"bacteria\"],\n    viability = viability[sample_type == \"bacteria\"],\n    log2FC = log2(concentration_final[sample_type == \"bacteria\"] / concentration_final[sample_type == \"control\"]),\n    log2ctl = log2(concentration_final[sample_type == \"control\"]),\n    below_LD = below_LD[sample_type == \"bacteria\"],\n    above_LD = above_LD[sample_type == \"bacteria\"]\n  )\n\n# Factoring variables with the right levels\ninput_data_log2FC$bacteria &lt;- factor(input_data_log2FC$bacteria, levels = c(\"Dpi\", \"Sau\", \"Spn\"))\n\n# Cleaning-up objects from the environment\nrm(input_data, input_path, metadata_path, file_list, file_path, file_data, order_Cyto)\n\n\n\nSelection of Cyto-location groups\n\nProportion of samples above the detection limit\n\n# Calculate for each Cytokine and Location the proportion of samples above limit of detection\nLD_all &lt;- input_data_long %&gt;%\n  group_by(Cyto, location) %&gt;%\n  summarise(detected_all = 1 - mean(below_LD), .groups = 'drop') \n\n# Same, but without including the time 0h\nLD_48h &lt;- input_data_long %&gt;%\n  filter(time != 0) %&gt;%\n  group_by(Cyto, location) %&gt;%\n  summarise(detected_48 = 1 - mean(below_LD), .groups = 'drop') \n\n# Combine the individual data frames and add label column with combined Cyto and location\nLD &lt;- left_join(LD_all, LD_48h, by = join_by(Cyto, location)) %&gt;%\n  mutate(group_label = paste(Cyto, location, sep = \"_\")) %&gt;%\n  relocate(group_label, .after = location)\n\n# Plot function\nplot_select_function &lt;- function(data, x_var, title) {\n  ggplot(data = data, aes(x = reorder(group_label, {{x_var}}), y = {{x_var}}, fill = location)) +\n    geom_bar(stat = \"identity\", position = position_dodge()) + \n    scale_y_continuous(expand = c(0, 0)) +\n    scale_fill_manual(values = c(\"coral\", \"steelblue1\")) +\n    coord_flip() +\n    labs(title = title, x = \"\", y = \"\") +\n    theme_bw() +\n    theme(panel.grid = element_blank(),\n          text = element_text(size = 10))\n\n}\n\n# Create and arrange plots\np_all &lt;- plot_select_function(LD, detected_all, \"Proportion of samples above detection limit (all pg/mL values)\")\np_48h &lt;- plot_select_function(LD, detected_48, \"Proportion of samples above detection limit (pg/mL values at 48h)\")\n\nLD_Plots &lt;- ggarrange(p_all, p_48h, ncol = 1, common.legend = T)\nggexport(LD_Plots, filename = file.path(analysis_folder, \"LD_Plots.pdf\"), height = 30, width = 10)\n\n\nLD_Plots\n\n\n\n\n\n\nlog2FC range values\n\n# Calculate the range for each log2FC\nrange_log2FC &lt;- input_data_log2FC %&gt;%\n  group_by(Cyto, location) %&gt;%\n  mutate(min = ifelse(is.na(log2FC), 0, min(log2FC, na.rm = TRUE))) %&gt;%\n  mutate(max = max(log2FC, na.rm = TRUE)) %&gt;%\n  mutate(range = max - min) %&gt;%\n  summarise(range = mean(range, na.rm = TRUE), .groups = 'drop')\n\n# Combine the range_log2FC and LD data frames into a summary file used for analysis selection\nselect_summary &lt;- left_join(LD, range_log2FC, by = join_by(Cyto, location)) %&gt;%\n   mutate(group_label = paste(Cyto, location, sep = \"_\"))\n\n# Plot the range in a similar way to the limit of detection\np_range &lt;- plot_select_function(select_summary, range, \"log2FC range\")\nggsave(p_range, filename = file.path(analysis_folder, \"Range_Plot.png\"), height = 8, width = 10)\n\n\np_range\n\n\n\n\n\n\nFiltering/selection thresholds\n\n# Define cut-off values for group rejection and statistical analysis \nselect_summary &lt;- select_summary %&gt;%\n  mutate(group_rejected = as.factor(ifelse(range &lt; 2.5 & detected_48 &lt; 0.25, TRUE, FALSE))) %&gt;%\n  mutate(group_stats = as.factor(ifelse(range &gt; 3, TRUE, FALSE)))\n\n# Plot correlation between range and proportion of detected samples\np_correlation_FC &lt;- ggplot(select_summary, aes(x = range, y = detected_48, color = Cyto, shape = location)) +\n  geom_point(aes(size = group_rejected)) +\n  scale_size_manual(values = c(4, 2)) +\n  geom_point(data = subset(select_summary, group_stats == TRUE), size = 2, color = \"black\") +\n  theme_bw() +\n  theme(panel.grid = element_blank(),\n        text = element_text(size = 10)) +\n  labs(x = \"log2FC range\",\n       y = \"Proportion of samples above detection limit (pg/mL values at 48h)\")\n\nggsave(p_correlation_FC, filename = file.path(analysis_folder, \"LDvsRange_Plot.png\"), height = 8, width = 10)\n\n\nggplotly(p_correlation_FC)\n\n\n\n\nsaveWidget(ggplotly(p_correlation_FC), file.path(analysis_folder, \"LDvsRange_Interactive.html\"), selfcontained = TRUE)\n\n\n# Apply the grouping variables to the raw and log2FC data frames\ninput_data_long_t48 &lt;- left_join(input_data_long_t48, select_summary, by = join_by(Cyto, location))\ninput_data_log2FC &lt;- left_join(input_data_log2FC, select_summary, by = join_by(Cyto, location)) \n\n\n\n\nSaving files\n\n# Save data frames as CSV files in the dataframes folder\nwrite_csv(input_data_long_t48, file.path(dataframes_folder, \"Cyto_values_48h.csv\"))\nwrite_csv(input_data_log2FC, file.path(dataframes_folder, \"Cyto_log2FC_48h.csv\"))\n\n# Save data frames as R objects in the dataframes folder\nsaveRDS(input_data_long_t48, file.path(dataframes_folder, \"Cyto_values_48h.rds\"))\nsaveRDS(input_data_log2FC, file.path(dataframes_folder, \"Cyto_log2FC_48h.rds\"))\n\n# Cleaning-up all objects from the environment\nrm(list = ls())\n\n# Use this to read the final objects\nCyto_values_48h &lt;- readRDS(\"data/dataframes/Cyto_values_48h.rds\")\nCyto_log2FC_48h &lt;- readRDS(\"data/dataframes/Cyto_log2FC_48h.rds\")"
  },
  {
    "objectID": "Methods_Cytokines.html#heatmap",
    "href": "Methods_Cytokines.html#heatmap",
    "title": "Cytokines",
    "section": "Heatmap",
    "text": "Heatmap\n\nlog2FC analysis\n\nFile Paths\n\n# Folder paths\ndataframes_path &lt;- \"data/dataframes\"\nmetadata_path &lt;- \"data/metadata/Cytokines\"\n\n# Load data and metadata\nCyto_log2FC_48h &lt;- readRDS(\"data/dataframes/Cyto_log2FC_48h.rds\")\nBacVia_order &lt;- read_csv(file.path(metadata_path, \"Order_BacteriaViability_FC.csv\"))\n\n# Create subfolders for output files\nfigures_folder &lt;- \"data/outputs/Cytokines/figures_log2FC\"\nif (!file.exists(\"data/outputs/Cytokines/figures_log2FC\")) {\n  dir.create(\"data/outputs/Cytokines/figures_log2FC\", recursive = TRUE)\n}\n\n\n\nHeatmap plot\n\n# Averaging replicate log2FCs\nAvg_log2FC_Cytos &lt;- Cyto_log2FC_48h %&gt;%\n  group_by(Cyto, Category, location, viability, bacteria, group_rejected) %&gt;%\n  summarize(avg_log2FC = mean(log2FC, na.rm = TRUE), .groups = 'drop') %&gt;%\n  mutate(Bac.Via = paste(bacteria, viability, sep = \".\"))\n\n# Factor Ordering\nAvg_log2FC_Cytos &lt;- merge(Avg_log2FC_Cytos, BacVia_order, by = \"Bac.Via\")\nAvg_log2FC_Cytos$Bac.Via_label &lt;- factor(Avg_log2FC_Cytos$Bac.Via_label, levels = BacVia_order$Bac.Via_label)\n\n# Make new variable with a version of avg_log2FC with NAs if group_rejected is TRUE\nAvg_log2FC_Cytos &lt;- Avg_log2FC_Cytos %&gt;%\n  mutate(value = ifelse(group_rejected == TRUE, NA, avg_log2FC))\n\n\n# Code for heatmap\nplot_heatmap &lt;- ggplot(Avg_log2FC_Cytos, aes(x = Cyto, y = Bac.Via_label, fill = value)) +\n  geom_tile(color = \"black\") + \n  facet_grid(location ~ Category , space = \"free\", scales = \"free\") +\n  scale_fill_gradient2(low = \"#009ad1\", high = \"#AD1457\",\n                       mid = \"#fefbea\", na.value = \"grey\",\n                       name = expression(\"Log\" [2]*\"FC\")) +\n  labs(x = \"\", y = \"\") +\n  scale_y_discrete(expand = c(0,0), limits = rev) +\n  scale_x_discrete(expand = c(0,0), limits = rev) +\n  theme_bw() +\n  theme(panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        strip.background = element_rect(colour = \"black\", fill = NA),\n        strip.text.y = element_text(angle = -90, hjust = 0.5, size = 11),\n        axis.text.y = element_markdown(size = 11),\n        axis.text.x = element_text(size = 11, angle = 67,  hjust = 1),\n        panel.spacing = unit(4, 'pt')\n  )\n\n\nplot_heatmap \n\n\n\n\n\n\nSaving files\n\n# Save figure as png\nggsave(plot = plot_heatmap, filename = file.path(figures_folder, \"heatmap.png\"), width = unit(9, \"in\"), height = unit(3.5, \"in\"))\n\n# Save figure as an R object\nsaveRDS(plot_heatmap, file.path(figures_folder, \"heatmap.rds\"))\n\n# Cleaning-up all objects from the environment\nrm(list = ls())\n\n\n\n\npg/mL analysis\n\nFile Paths\n\n# Folder paths\ndataframes_path &lt;- \"data/dataframes\"\nmetadata_path &lt;- \"data/metadata/Cytokines\"\n\n# Load data and metadata\nCyto_values_48h &lt;- readRDS(file.path(dataframes_path, \"Cyto_values_48h.rds\"))\nBacVia_order &lt;- read_csv(file.path(metadata_path, \"Order_BacteriaViability.csv\"))\n\n# Create subfolders for output files\nfigures_folder &lt;- \"data/outputs/Cytokines/figures_pgml\"\nif (!file.exists(\"data/outputs/Cytokines/figures_pgml\")) {\n  dir.create(\"data/outputs/Cytokines/figures_pgml\", recursive = TRUE)\n}\n\n\n\nHeatmap plot\n\n# Averaging replicate log2FCs\nAvg_values_Cytos &lt;- Cyto_values_48h %&gt;%\n  group_by(Cyto, Category, location, viability, bacteria, group_rejected) %&gt;%\n  summarize(avg_value = mean(concentration_final, na.rm = TRUE), .groups = 'drop') %&gt;%\n  mutate(log_value = log10(avg_value)) %&gt;% \n  mutate(Bac.Via = paste(bacteria, viability, sep = \".\"))\n\n# Factor Ordering\nAvg_values_Cytos &lt;- merge(Avg_values_Cytos, BacVia_order, by = \"Bac.Via\")\nAvg_values_Cytos$Bac.Via_label &lt;- factor(Avg_values_Cytos$Bac.Via_label, levels = BacVia_order$Bac.Via_label)\n\n# Make new variable with a version of avg_log2FC with NAs if group_rejected is TRUE\nAvg_values_Cytos &lt;- Avg_values_Cytos %&gt;%\n  mutate(value = ifelse(group_rejected == TRUE, NA, log_value))\n\n\n# Code for heatmap\nplot_heatmap &lt;- ggplot(Avg_values_Cytos, aes(x = Cyto, y = Bac.Via_label, fill = value)) +\n  geom_tile(color = \"black\") + \n  facet_grid(location ~ Category , space = \"free\", scales = \"free\") +\n  scale_fill_gradient2(low = \"#009ad1\", high = \"#AD1457\",\n                       mid = \"#fefbea\", na.value = \"grey\",\n                       name = \"Log10 pg/mL\") +\n  labs(x = \"\", y = \"\") +\n  scale_y_discrete(expand = c(0,0), limits = rev) +\n  scale_x_discrete(expand = c(0,0), limits = rev) +\n  theme_bw() +\n  theme(panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        strip.background = element_rect(colour = \"black\", fill = NA),\n        strip.text.y = element_text(angle = -90, hjust = 0.5, size = 11),\n        axis.text.y = element_markdown(size = 11),\n        axis.text.x = element_text(size = 11, angle = 67,  hjust = 1),\n        panel.spacing = unit(4, 'pt')\n  )\n\n\nplot_heatmap \n\n\n\n\n\n\nSaving files\n\n# Save figure as png\nggsave(plot = plot_heatmap, filename = file.path(figures_folder, \"heatmap.png\"), width = unit(9, \"in\"), height = unit(3.5, \"in\"))\n\n# Save figure as an R object\nsaveRDS(plot_heatmap, file.path(figures_folder, \"heatmap.rds\"))\n\n# Cleaning-up all objects from the environment\nrm(list = ls())"
  },
  {
    "objectID": "Methods_Cytokines.html#stats-and-individual-plots",
    "href": "Methods_Cytokines.html#stats-and-individual-plots",
    "title": "Cytokines",
    "section": "Stats and Individual Plots",
    "text": "Stats and Individual Plots\n\nlog2FC analysis\n\nFile Paths\n\n# Folder paths\ndataframes_path &lt;- \"data/dataframes\"\nmetadata_path &lt;- \"data/metadata/Cytokines\"\nanalysis_folder &lt;- \"data/outputs/Cytokines/analysis_log2FC\"\nfigures_folder &lt;- \"data/outputs/Cytokines/figures_log2FC\"\n\n# Load data and metadata\nCyto_log2FC_48h &lt;- readRDS(file.path(dataframes_path, \"Cyto_log2FC_48h.rds\"))\nCyto_values_48h &lt;- readRDS(file.path(dataframes_path, \"Cyto_values_48h.rds\"))\nBac_order &lt;- read.csv(file.path(metadata_path, \"Order_Bacteria.csv\"))\nVia_order &lt;- read.csv(file.path(metadata_path, \"Order_Viability.csv\"))\n\n# Create subfolders for output files\nstats_folder &lt;- \"data/outputs/Cytokines/stats_log2FC\"\nif (!file.exists(\"data/outputs/Cytokines/stats_log2FC\")) {\n  dir.create(\"data/outputs/Cytokines/stats_log2FC\", recursive = TRUE)\n}\n\n\n# Subset the data for the selected analysis groups\nStats_log2FC &lt;- Cyto_log2FC_48h %&gt;%\n    filter(group_stats == TRUE) %&gt;%\n    arrange(desc(range))\n\nStats_values &lt;- Cyto_values_48h %&gt;%\n    filter(group_stats == TRUE) %&gt;%\n    arrange(desc(range))\n\n\n\nStats function\n\n# Function to analyze each individual Cyto-location group using log2FC data\nstats_function &lt;- function(log2FC_data, each_group) {\n  \n  # Subset the data\n  log2FCdata_subset &lt;- log2FC_data %&gt;%\n    filter(group_label == each_group) \n  \n  # First run linear mixed-effects model with random effects\n  model &lt;- lmer(log2FC ~ bacteria * viability \n                + (1|line) + (1|line:date), \n                data = log2FCdata_subset)\n  \n  # If model is singular, rerun linear model without random effects\n  singular = isSingular(model)\n  if (singular) {\n    model &lt;- lm(log2FC ~ bacteria * viability, \n                  data = log2FCdata_subset)\n  }\n  \n  # Individual contrasts\n  emmeans_model &lt;- emmeans(model, ~ bacteria * viability)\n  emmeans_bacteria &lt;- pairs(emmeans_model, simple = \"bacteria\", adjust = \"none\")   \n  emmeans_viability &lt;- pairs(emmeans_model, simple = \"viability\", adjust = \"none\")    \n  \n  # Extract fixed effects coefficients and convert to dataframe\n  fixed_effects_df &lt;- as.data.frame(summary(model)$coefficients) %&gt;%\n    mutate(singular = singular) %&gt;%\n    mutate(group_label = each_group) \n  \n  # Extract random effects data and convert to dataframe (if not singular)\n  if (singular) {\n    random_effects_df &lt;- data.frame()\n  } else {\n    random_effects_df &lt;- as.data.frame(VarCorr(model)) %&gt;%\n      mutate(proportion = round(100 * (vcov / sum(vcov)), 2)) %&gt;%\n      mutate(singular = singular) %&gt;%\n      mutate(group_label = each_group) \n  }\n  \n  # Extract bacteria contrasts from emmeans_model and convert to dataframe. Filter live only\n  contrasts_bacteria_df &lt;- as.data.frame(summary(emmeans_bacteria)) %&gt;%\n    filter(viability == \"live\") %&gt;%\n    mutate(contrast_label = paste(contrast, viability, sep = \" -- \")) %&gt;%\n    select(-contrast, -viability) %&gt;%\n    mutate(singular = singular) %&gt;%\n    mutate(group_label = each_group)\n  \n  # Extract viability contrasts from emmeans_model and convert to dataframe\n  contrasts_viability_df &lt;- as.data.frame(summary(emmeans_viability)) %&gt;%\n    mutate(contrast_label = paste(bacteria, contrast, sep = \" -- \")) %&gt;%\n    select(-contrast, -bacteria) %&gt;%\n    mutate(singular = singular) %&gt;%\n    mutate(group_label = each_group)\n  \n  # Combine contrasts dataframes\n  contrasts_df &lt;- rbind(contrasts_bacteria_df,contrasts_viability_df) \n  \n  # Adds predictions based on fixed effects, averaged over random effects. It gives a population estimate\n  log2FCdata_subset &lt;- cbind(log2FCdata_subset, predval = predict(model,re.form = NA, se.fit = TRUE))\n  \n  # Backtransform the predicted values and CIs\n  transf_preds_df &lt;- log2FCdata_subset %&gt;% group_by(bacteria, viability, group_label) %&gt;%\n    summarise(ml2ctl = mean(log2ctl), ml2FC = mean(log2FC), \n              ml2predval.fit = mean(predval.fit),\n              ml2predval.se.fit = mean(predval.se.fit),\n              .groups = 'drop') %&gt;%\n    mutate(pconcentration = 2^(ml2predval.fit + ml2ctl),\n           pconcentration_min = 2^(ml2predval.fit - 2*ml2predval.se.fit + ml2ctl),\n           pconcentration_max = 2^(ml2predval.fit + 2*ml2predval.se.fit + ml2ctl),\n           singular = singular)\n  \n  return(list(fixed_effects = fixed_effects_df, \n              random_effects = random_effects_df, \n              contrasts_bacteria = contrasts_bacteria_df,\n              contrasts_viability = contrasts_viability_df,\n              contrasts = contrasts_df,\n              transf_preds = transf_preds_df))\n}\n\n\n#Example use for a specific Cytokine-location group\neach_group = \"IL-18_Apical\" \nstats_function(Stats_log2FC, each_group)\n\n$fixed_effects\n                              Estimate Std. Error       df       t value\n(Intercept)              -0.0003868636  0.7931330  2.05754 -0.0004877663\nbacteriaSau               4.5300809095  0.6791742 25.00000  6.6699833590\nbacteriaSpn               0.5952640192  0.6791742 25.00000  0.8764525804\nviabilityIRR              0.0922784572  0.6791742 25.00000  0.1358686050\nbacteriaSau:viabilityIRR -5.3220291768  0.9604974 25.00000 -5.5409093475\nbacteriaSpn:viabilityIRR -0.8058310329  0.9604974 25.00000 -0.8389726088\n                             Pr(&gt;|t|) singular  group_label\n(Intercept)              9.996540e-01    FALSE IL-18_Apical\nbacteriaSau              5.459385e-07    FALSE IL-18_Apical\nbacteriaSpn              3.891283e-01    FALSE IL-18_Apical\nviabilityIRR             8.930133e-01    FALSE IL-18_Apical\nbacteriaSau:viabilityIRR 9.259495e-06    FALSE IL-18_Apical\nbacteriaSpn:viabilityIRR 4.094356e-01    FALSE IL-18_Apical\n\n$random_effects\n        grp        var1 var2      vcov     sdcor proportion singular\n1 line:date (Intercept) &lt;NA&gt; 0.9131340 0.9555805      32.74    FALSE\n2      line (Intercept) &lt;NA&gt; 0.4924641 0.7017579      17.65    FALSE\n3  Residual        &lt;NA&gt; &lt;NA&gt; 1.3838330 1.1763643      49.61    FALSE\n   group_label\n1 IL-18_Apical\n2 IL-18_Apical\n3 IL-18_Apical\n\n$contrasts_bacteria\n   estimate        SE df    t.ratio      p.value    contrast_label singular\n1 -4.530081 0.6791742 25 -6.6699834 5.459384e-07 Dpi - Sau -- live    FALSE\n2 -0.595264 0.6791742 25 -0.8764526 3.891283e-01 Dpi - Spn -- live    FALSE\n3  3.934817 0.6791742 25  5.7935308 4.863827e-06 Sau - Spn -- live    FALSE\n   group_label\n1 IL-18_Apical\n2 IL-18_Apical\n3 IL-18_Apical\n\n$contrasts_viability\n     estimate        SE df    t.ratio      p.value    contrast_label singular\n1 -0.09227846 0.6791742 25 -0.1358686 8.930133e-01 Dpi -- live - IRR    FALSE\n2  5.22975072 0.6791742 25  7.7001605 4.681221e-08 Sau -- live - IRR    FALSE\n3  0.71355258 0.6791742 25  1.0506178 3.034844e-01 Spn -- live - IRR    FALSE\n   group_label\n1 IL-18_Apical\n2 IL-18_Apical\n3 IL-18_Apical\n\n$contrasts\n     estimate        SE df    t.ratio      p.value    contrast_label singular\n1 -4.53008091 0.6791742 25 -6.6699834 5.459384e-07 Dpi - Sau -- live    FALSE\n2 -0.59526402 0.6791742 25 -0.8764526 3.891283e-01 Dpi - Spn -- live    FALSE\n3  3.93481689 0.6791742 25  5.7935308 4.863827e-06 Sau - Spn -- live    FALSE\n4 -0.09227846 0.6791742 25 -0.1358686 8.930133e-01 Dpi -- live - IRR    FALSE\n5  5.22975072 0.6791742 25  7.7001605 4.681221e-08 Sau -- live - IRR    FALSE\n6  0.71355258 0.6791742 25  1.0506178 3.034844e-01 Spn -- live - IRR    FALSE\n   group_label\n1 IL-18_Apical\n2 IL-18_Apical\n3 IL-18_Apical\n4 IL-18_Apical\n5 IL-18_Apical\n6 IL-18_Apical\n\n$transf_preds\n# A tibble: 6 × 11\n  bacteria viability group_label  ml2ctl     ml2FC ml2predval.fit\n  &lt;fct&gt;    &lt;fct&gt;     &lt;chr&gt;         &lt;dbl&gt;     &lt;dbl&gt;          &lt;dbl&gt;\n1 Dpi      live      IL-18_Apical   1.80 -0.000387      -0.000387\n2 Dpi      IRR       IL-18_Apical   1.80  0.0919         0.0919  \n3 Sau      live      IL-18_Apical   1.80  4.53           4.53    \n4 Sau      IRR       IL-18_Apical   1.80 -0.700         -0.700   \n5 Spn      live      IL-18_Apical   1.80  0.595          0.595   \n6 Spn      IRR       IL-18_Apical   1.80 -0.119         -0.119   \n# ℹ 5 more variables: ml2predval.se.fit &lt;dbl&gt;, pconcentration &lt;dbl&gt;,\n#   pconcentration_min &lt;dbl&gt;, pconcentration_max &lt;dbl&gt;, singular &lt;lgl&gt;\n\n\n\n# Apply the function to each unique group label and combine results into a list\nstats_list &lt;- map(unique(Stats_log2FC$group_label), function(group) {\n  cat(\"Processing group:\", group, \"\\n\")  # Add this line to print the group\n  stats_function(Stats_log2FC, group)\n})\n\nProcessing group: IL-18_Apical \nProcessing group: IL-1RN_Basal \nProcessing group: IL-18_Basal \nProcessing group: G-CSF_Basal \nProcessing group: CXCL-10_Apical \nProcessing group: IL-6_Apical \nProcessing group: IL-1α_Basal \nProcessing group: IL-1α_Apical \nProcessing group: G-CSF_Apical \nProcessing group: IL-6_Basal \nProcessing group: GM-CSF_Apical \nProcessing group: IL-36β_Basal \nProcessing group: IL-1RN_Apical \nProcessing group: GM-CSF_Basal \nProcessing group: L-VEGF_Apical \nProcessing group: IL-1β_Basal \nProcessing group: CCL-2_Apical \nProcessing group: CCL-4_Basal \nProcessing group: CCL-20_Apical \nProcessing group: IL-36β_Apical \nProcessing group: CXCL-11_Apical \nProcessing group: CXCL-10_Basal \nProcessing group: CCL-5_Basal \nProcessing group: CCL-20_Basal \nProcessing group: TNF-α_Apical \nProcessing group: CCL-5_Apical \nProcessing group: IL-1β_Apical \nProcessing group: CCL-4_Apical \nProcessing group: CCL-2_Basal \nProcessing group: CXCL-9_Apical \nProcessing group: TNF-α_Basal \nProcessing group: MMP-9_Apical \n\n# Combine all fixed effects dataframes in the list into a single dataframe\nstats_fixed_effects &lt;- bind_rows(map(stats_list, pluck, \"fixed_effects\"))\n\n# Combine all random effects dataframes in the list into a single dataframe\nstats_random_effects &lt;- bind_rows(map(stats_list, pluck, \"random_effects\"))\n\n# Combine all contrasts dataframes in the list into a single dataframe\nstats_contrasts &lt;- bind_rows(map(stats_list, pluck, \"contrasts\"))\n\n# Combine all backtransformed predicted values dataframes in the list into a single dataframe\nstats_transf_preds &lt;- bind_rows(map(stats_list, pluck, \"transf_preds\"))\n\n\nP.value Correction\n\n# Adjust across all Cyto-Location groups using FDR\nstats_contrasts &lt;- stats_contrasts %&gt;%\n  mutate(adj.p.FDR = p.adjust(p.value, method = \"fdr\")) %&gt;%\n  mutate(sign.FDR = ifelse(adj.p.FDR &lt; 0.05, T, F)) \n\n\n\nContrasts table formatting\n\n# Separate contrast names into 2 groups matching the x axis labels for the individual plots\nstats_contrasts &lt;- stats_contrasts %&gt;%\n  separate(contrast_label, into = c(\"bacteria\", \"viability\"), sep = \"--\") %&gt;%\n  mutate(bacteria = str_trim(bacteria),  # Remove leading/trailing spaces\n         viability = str_trim(viability)) %&gt;%\n  separate(bacteria, into = c(\"bact1\", \"bact2\"), sep = \"-\") %&gt;%\n  mutate(bact2 = str_trim(if_else(!is.na(bact2), bact2, bact1)),\n         bact1 = str_trim(bact1)) %&gt;%\n  separate(viability, into = c(\"via1\", \"via2\"), sep = \"-\") %&gt;%\n  mutate(via2 = str_trim(if_else(!is.na(via2), via2, via1)),\n         via1 = str_trim(via1))\n\n# Substitute bacteria and viability names with the label versions\nstats_contrasts$bact1_label &lt;- Bac_order$bacteria_label[match(stats_contrasts$bact1, Bac_order$bacteria)]\nstats_contrasts$bact2_label &lt;- Bac_order$bacteria_label[match(stats_contrasts$bact2, Bac_order$bacteria)]\nstats_contrasts$via1_label &lt;- Via_order$viability_label[match(stats_contrasts$via1, Via_order$viability)]\nstats_contrasts$via2_label &lt;- Via_order$viability_label[match(stats_contrasts$via2, Via_order$viability)]\n\n# Formatting of the p.value labels with option for * and **\nstats_contrasts &lt;- stats_contrasts %&gt;%\n  mutate(sign = case_when(\n    adj.p.FDR &lt; 0.05 ~ \"*\",\n    TRUE ~ \"\"  \n  ))\nstats_contrasts$adj.p.FDR = format(stats_contrasts$adj.p.FDR, digits = 2, scientific = TRUE) \n\n# Generate the final group labels\nstats_contrasts &lt;- stats_contrasts %&gt;%\n  mutate(group1 = paste(bact1_label, via1_label, sep = \" \"),\n         group2 = paste(bact2_label, via2_label, sep = \" \"),\n         contrast = paste(bact1, via1, \"vs.\", bact2, via2, sep = \" \"))\n\n\n\n\nPlot function\n\n# Function to plot each individual Cyto-location group using pg/mL data\nplot_function &lt;- function(true_data, stats_data, contrasts, each_group) {\n  \n  # Subset data\n  true_data &lt;- true_data %&gt;%\n    filter(group_label == each_group) \n  stats_data &lt;- stats_data %&gt;%\n    filter(group_label == each_group) \n  contrasts &lt;- contrasts %&gt;%\n    filter(group_label == each_group) \n  \n  # Factor Ordering\n  stats_data &lt;- merge(stats_data, Bac_order, by = \"bacteria\") \n  stats_data &lt;- merge(stats_data, Via_order, by = \"viability\") \n  stats_data$bacteria_label &lt;- factor(stats_data$bacteria_label, levels = Bac_order$bacteria_label)\n  stats_data$viability_label &lt;- factor(stats_data$viability_label, levels = Via_order$viability_label)\n\n  true_data &lt;- merge(true_data, Bac_order, by = \"bacteria\") \n  true_data &lt;- merge(true_data, Via_order, by = \"viability\") \n  true_data$bacteria_label &lt;- factor(true_data$bacteria_label, levels = Bac_order$bacteria_label)\n  true_data$viability_label &lt;- factor(true_data$viability_label, levels = Via_order$viability_label)\n  \n  # Add columns for coloring the background by viability\n  true_data &lt;- true_data %&gt;%\n    mutate(bar_pos = ifelse(viability == \"IRR\", Inf, NA)) %&gt;%\n    mutate(bar_neg = ifelse(viability == \"IRR\", 0, -Inf)) \n  \n  # Get location for p value labels\n  location &lt;- log10(max(stats_data$pconcentration_max, na.rm = TRUE)) * 1.3\n  \n  # Plot\n  plot &lt;- ggplot() +\n    # Background bars used to color by viability\n    geom_col(data = true_data, aes(x = interaction(bacteria_label, viability_label, lex.order = TRUE, sep = \" \"), y = bar_pos, fill = \"grey95\"),\n             position = \"identity\", show.legend = FALSE) +\n    geom_col(data = true_data, aes(x = interaction(bacteria_label, viability_label, lex.order = TRUE, sep = \" \"), y = bar_neg, fill = \"grey95\"),\n             position = \"identity\", show.legend = FALSE) +\n    \n    scale_fill_manual(values = c(\"grey95\")) +\n    new_scale_fill() +\n    \n    # Predictions from the model transformed into pg/mL\n    geom_point(data = stats_data, aes(x = interaction(bacteria_label, viability_label, lex.order = TRUE, sep = \" \"), \n                                    y = pconcentration), shape = 3, size = 3) +\n    geom_errorbar(data = stats_data, aes(x = interaction(bacteria_label, viability_label, lex.order = TRUE, sep = \" \"),\n                                       y = pconcentration,\n                                       ymin = pconcentration_min,\n                                       ymax = pconcentration_max),\n                  width = .2) +\n    \n    # True values in pg/mL\n    geom_jitter(data = true_data, aes(x = interaction(bacteria_label, viability_label, lex.order = TRUE, sep = \" \"), \n                                      y = concentration_final, color = bacteria_label, shape = line), width = 0.3, size = 3, show.legend = FALSE) + \n    \n    scale_color_manual(values = c(\"#5b5b5b\", \"#2e67f2\", \"#AA35E3\", \"#927ed1\")) +\n\n    # General style\n    scale_y_log10() +\n    scale_x_discrete(expand = c(0,0)) +\n    labs(title = each_group,\n         x = \"\",\n         y = \"pg/mL\",) +  \n    theme_bw() +\n    theme(panel.grid = element_blank(), \n          text = element_text(size = 12),\n          axis.text.x = element_markdown()) \n  \n  # Arrange plot and pvalues table\n  contrasts &lt;- contrasts %&gt;%\n    ungroup() %&gt;%\n    select(contrast, singular, estimate, SE, df, t.ratio, p.value, adj.p.FDR)\n\n  Tmin &lt;- ttheme_minimal()\n  panel &lt;- ggarrange(plot + theme(plot.margin = unit(c(0.25,0.25,0.25,0.25), \"in\")), \n                     tableGrob(contrasts, theme = Tmin, rows = NULL), \n                     ncol = 1, heights = c(0.7, 0.3))\n  \n  return(list(each_group,\n              plot, \n              panel))\n} \n\n\n#Example use for a specific Cytokine-location group\neach_group = \"IL-18_Apical\"\nplot_function(Stats_values, stats_transf_preds, stats_contrasts, each_group)\n\n[[1]]\n[1] \"IL-18_Apical\"\n\n[[2]]\n\n\n\n\n\n\n[[3]]\n\n\n\n\n\n\nplots_list &lt;- map(unique(Stats_values$group_label), ~plot_function(true_data = Stats_values, stats_data = stats_transf_preds, contrasts = stats_contrasts, .x))\n\n\n\nSaving files\n\n## Save outputs\nwrite_csv(stats_fixed_effects, file.path(stats_folder, \"stats_fixed_effects.csv\"))\nwrite_csv(stats_random_effects, file.path(stats_folder, \"stats_random_effects.csv\"))\nwrite_csv(stats_contrasts, file.path(stats_folder, \"stats_contrasts.csv\"))\nwrite_csv(stats_transf_preds, file.path(stats_folder, \"stats_transf_preds.csv\"))\n\n# Save all multiple plots/tables on individual pages of a single pdf\npdf(paste0(figures_folder, \"/Cyto_Boxplots.pdf\"), width = 11, height = 8.5)\nfor (i in seq_along(plots_list)) {\n  print(plots_list[[i]][3])\n}\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\ndev.off()\n\nquartz_off_screen \n                2 \n\n# Save all plot figures as an R object\nsaveRDS(plots_list, file.path(figures_folder, \"plots_list.rds\"))\n\n# Cleaning-up all objects from the environment\nrm(list = ls())\n\n\n\n\npg/mL analysis\n\nFile Paths\n\n# Folder paths\ndataframes_path &lt;- \"data/dataframes\"\nmetadata_path &lt;- \"data/metadata/Cytokines\"\n\n# Load data and metadata\nCyto_values_48h &lt;- readRDS(file.path(dataframes_path, \"Cyto_values_48h.rds\"))\nBacVia_order &lt;- read_csv(file.path(metadata_path, \"Order_BacteriaViability.csv\"))\n\n# Create subfolders for output files\nanalysis_folder &lt;- \"data/outputs/Cytokines/analysis_pgml\"\nif (!file.exists(\"data/outputs/Cytokines/analysis_pgml\")) {\n  dir.create(\"data/outputs/Cytokines/analysis_pgml\", recursive = TRUE)\n}\nfigures_folder &lt;- \"data/outputs/Cytokines/figures_pgml\"\nif (!file.exists(\"data/outputs/Cytokines/figures_pgml\")) {\n  dir.create(\"data/outputs/Cytokines/figures_pgml\", recursive = TRUE)\n}\nstats_folder &lt;- \"data/outputs/Cytokines/stats_pgml\"\nif (!file.exists(\"data/outputs/Cytokines/stats_pgml\")) {\n  dir.create(\"data/outputs/Cytokines/stats_pgml\", recursive = TRUE)\n}\n\n\n# Creating combined variable for bacteria and viability including the NB control. Eliminate rejected grouping.\nStats_values &lt;- Cyto_values_48h %&gt;%\n  mutate(Bac.Via = paste(bacteria, viability, sep = \".\")) %&gt;%\n  filter(group_rejected == FALSE) %&gt;%\n  arrange(desc(range))\n\n# Factor Ordering\nStats_values &lt;- merge(Stats_values, BacVia_order, by = \"Bac.Via\", all.x = TRUE)\nStats_values$Bac.Via &lt;- factor(Stats_values$Bac.Via, levels = BacVia_order$Bac.Via)\nStats_values$Bac.Via_label &lt;- factor(Stats_values$Bac.Via_label, levels = BacVia_order$Bac.Via_label)\n\n\n\nStats function\n\n# Function to analyze each individual Cyto-location group using pg/mL data\nstats_function &lt;- function(values_data, each_group) {\n  \n  # Subset the data\n  data_subset &lt;- values_data %&gt;%\n    filter(group_label == each_group) \n  \n  # First run linear mixed-effects model with random effects\n  model &lt;- lmer(log(concentration_final) ~ Bac.Via \n                + (1|line) + (1|line:date), \n                data = data_subset)\n  \n  # Extract random effects data and convert to dataframe\n  singular = isSingular(model)\n  random_effects_df &lt;- as.data.frame(VarCorr(model)) %&gt;%\n    mutate(proportion = round(100 * (vcov / sum(vcov)), 2)) %&gt;%\n    mutate(singular = singular) %&gt;%\n    mutate(group_label = each_group) \n  \n  # If model is singular, rerun linear mixed-effects model with only date as random effect\n  if (singular) {\n    model &lt;- lmer(log(concentration_final) ~ Bac.Via \n                   + (1|date), \n                  data = data_subset)\n  }\n  \n  anova &lt;- anova(model)\n  Bac.Via_pvalue &lt;- anova$`Pr(&gt;F)`[1]\n  \n  # Generate all individual contrasts without pvalue adjustment\n  emmeans_model &lt;- emmeans(model, ~ Bac.Via)\n  emmeans_contrasts &lt;- pairs(emmeans_model, adjust = \"none\")   \n  \n  # Extract fixed effects coefficients and convert to dataframe\n  fixed_effects_df &lt;- as.data.frame(summary(model)$coefficients) %&gt;%\n    mutate(singular = singular) %&gt;%\n    mutate(group_label = each_group) \n  \n  # Extract individual contrasts from emmeans_model and convert to dataframe. \n  contrasts_df &lt;- as.data.frame(summary(emmeans_contrasts)) %&gt;%\n    mutate(anova_pvalue = Bac.Via_pvalue) %&gt;%\n    mutate(singular = singular) %&gt;%\n    mutate(group_label = each_group)\n  \n  # Adds predictions based on fixed effects, averaged over random effects. It gives a population estimate\n  data_subset &lt;- cbind(data_subset, predval = predict(model,re.form = NA, se.fit = TRUE))\n  \n  # Backtransform the predicted values and CIs\n  transf_preds_df &lt;- data_subset %&gt;% group_by(Bac.Via, group_label) %&gt;%\n    summarise(mean.predval.fit = mean(predval.fit),\n              mean.predval.se.fit = mean(predval.se.fit),\n              mean.concentration = mean(concentration_final),\n              .groups = 'drop') %&gt;%\n    mutate(pconcentration = exp(mean.predval.fit),\n           pconcentration_min = exp(mean.predval.fit - 2*mean.predval.se.fit),\n           pconcentration_max = exp(mean.predval.fit + 2*mean.predval.se.fit),\n           viability = sub(\".*\\\\.\", \"\", Bac.Via))\n  \n  return(list(fixed_effects = fixed_effects_df, \n              random_effects = random_effects_df, \n              contrasts = contrasts_df,\n              transf_preds = transf_preds_df))\n}\n\n\n#Example use for a specific Cytokine-location group\neach_group = \"IL-1α_Apical\"  \n\nstats_function(Stats_values, each_group)\n\n$fixed_effects\n                 Estimate Std. Error        df    t value     Pr(&gt;|t|) singular\n(Intercept)     2.4726308  0.3959515  1.873679  6.2447818 2.887747e-02    FALSE\nBac.ViaSau.live 3.6525007  0.3149323 30.000020 11.5977343 1.301766e-12    FALSE\nBac.ViaDpi.live 1.7848537  0.3149323 30.000020  5.6674210 3.543744e-06    FALSE\nBac.ViaSpn.live 2.3216023  0.3149323 30.000020  7.3717511 3.266669e-08    FALSE\nBac.ViaSau.IRR  0.1420037  0.3149323 30.000020  0.4509025 6.553021e-01    FALSE\nBac.ViaDpi.IRR  1.1303061  0.3149323 30.000020  3.5890450 1.164830e-03    FALSE\nBac.ViaSpn.IRR  1.2557311  0.3149323 30.000020  3.9873053 3.953980e-04    FALSE\n                 group_label\n(Intercept)     IL-1α_Apical\nBac.ViaSau.live IL-1α_Apical\nBac.ViaDpi.live IL-1α_Apical\nBac.ViaSpn.live IL-1α_Apical\nBac.ViaSau.IRR  IL-1α_Apical\nBac.ViaDpi.IRR  IL-1α_Apical\nBac.ViaSpn.IRR  IL-1α_Apical\n\n$random_effects\n        grp        var1 var2       vcov     sdcor proportion singular\n1 line:date (Intercept) &lt;NA&gt; 0.44710947 0.6686624      55.20    FALSE\n2      line (Intercept) &lt;NA&gt; 0.06533639 0.2556098       8.07    FALSE\n3  Residual        &lt;NA&gt; &lt;NA&gt; 0.29754699 0.5454787      36.73    FALSE\n   group_label\n1 IL-1α_Apical\n2 IL-1α_Apical\n3 IL-1α_Apical\n\n$contrasts\n                contrast   estimate        SE df     t.ratio      p.value\n1  NB.control - Sau.live -3.6525007 0.3149323 30 -11.5977343 1.301778e-12\n2  NB.control - Dpi.live -1.7848537 0.3149323 30  -5.6674210 3.543752e-06\n3  NB.control - Spn.live -2.3216023 0.3149323 30  -7.3717511 3.266683e-08\n4   NB.control - Sau.IRR -0.1420037 0.3149323 30  -0.4509025 6.553021e-01\n5   NB.control - Dpi.IRR -1.1303061 0.3149323 30  -3.5890450 1.164830e-03\n6   NB.control - Spn.IRR -1.2557311 0.3149323 30  -3.9873053 3.953984e-04\n7    Sau.live - Dpi.live  1.8676470 0.3149323 30   5.9303133 1.694386e-06\n8    Sau.live - Spn.live  1.3308985 0.3149323 30   4.2259832 2.044954e-04\n9     Sau.live - Sau.IRR  3.5104970 0.3149323 30  11.1468318 3.442439e-12\n10    Sau.live - Dpi.IRR  2.5221947 0.3149323 30   8.0086893 6.126431e-09\n11    Sau.live - Spn.IRR  2.3967696 0.3149323 30   7.6104290 1.734664e-08\n12   Dpi.live - Spn.live -0.5367485 0.3149323 30  -1.7043301 9.865714e-02\n13    Dpi.live - Sau.IRR  1.6428500 0.3149323 30   5.2165185 1.263906e-05\n14    Dpi.live - Dpi.IRR  0.6545477 0.3149323 30   2.0783760 4.632656e-02\n15    Dpi.live - Spn.IRR  0.5291226 0.3149323 30   1.6801157 1.033206e-01\n16    Spn.live - Sau.IRR  2.1795985 0.3149323 30   6.9208486 1.099345e-07\n17    Spn.live - Dpi.IRR  1.1912962 0.3149323 30   3.7827061 6.912599e-04\n18    Spn.live - Spn.IRR  1.0658712 0.3149323 30   3.3844458 2.003887e-03\n19     Sau.IRR - Dpi.IRR -0.9883023 0.3149323 30  -3.1381425 3.796197e-03\n20     Sau.IRR - Spn.IRR -1.1137273 0.3149323 30  -3.5364028 1.340553e-03\n21     Dpi.IRR - Spn.IRR -0.1254250 0.3149323 30  -0.3982603 6.932586e-01\n   anova_pvalue singular  group_label\n1  7.759836e-12    FALSE IL-1α_Apical\n2  7.759836e-12    FALSE IL-1α_Apical\n3  7.759836e-12    FALSE IL-1α_Apical\n4  7.759836e-12    FALSE IL-1α_Apical\n5  7.759836e-12    FALSE IL-1α_Apical\n6  7.759836e-12    FALSE IL-1α_Apical\n7  7.759836e-12    FALSE IL-1α_Apical\n8  7.759836e-12    FALSE IL-1α_Apical\n9  7.759836e-12    FALSE IL-1α_Apical\n10 7.759836e-12    FALSE IL-1α_Apical\n11 7.759836e-12    FALSE IL-1α_Apical\n12 7.759836e-12    FALSE IL-1α_Apical\n13 7.759836e-12    FALSE IL-1α_Apical\n14 7.759836e-12    FALSE IL-1α_Apical\n15 7.759836e-12    FALSE IL-1α_Apical\n16 7.759836e-12    FALSE IL-1α_Apical\n17 7.759836e-12    FALSE IL-1α_Apical\n18 7.759836e-12    FALSE IL-1α_Apical\n19 7.759836e-12    FALSE IL-1α_Apical\n20 7.759836e-12    FALSE IL-1α_Apical\n21 7.759836e-12    FALSE IL-1α_Apical\n\n$transf_preds\n# A tibble: 7 × 9\n  Bac.Via    group_label mean.predval.fit mean.predval.se.fit mean.concentration\n  &lt;fct&gt;      &lt;chr&gt;                  &lt;dbl&gt;               &lt;dbl&gt;              &lt;dbl&gt;\n1 NB.control IL-1α_Apic…             2.47               0.396               13.6\n2 Sau.live   IL-1α_Apic…             6.13               0.396              514. \n3 Dpi.live   IL-1α_Apic…             4.26               0.396               99.4\n4 Spn.live   IL-1α_Apic…             4.79               0.396              162. \n5 Sau.IRR    IL-1α_Apic…             2.61               0.396               21.8\n6 Dpi.IRR    IL-1α_Apic…             3.60               0.396               52.6\n7 Spn.IRR    IL-1α_Apic…             3.73               0.396               59.2\n# ℹ 4 more variables: pconcentration &lt;dbl&gt;, pconcentration_min &lt;dbl&gt;,\n#   pconcentration_max &lt;dbl&gt;, viability &lt;chr&gt;\n\n\n\n# Apply the function to each unique group label and combine results into a list\nstats_list &lt;- map(unique(Stats_values$group_label), function(group) {\n  cat(\"Processing group:\", group, \"\\n\")  # Add this line to print the group name\n  stats_function(Stats_values, group)\n})\n\nProcessing group: IL-13_Basal \nProcessing group: IL-1RN_Basal \nProcessing group: CCL-2_Basal \nProcessing group: CXCL-9_Apical \nProcessing group: IL-6_Basal \nProcessing group: CCL-4_Basal \nProcessing group: CXCL-11_Apical \nProcessing group: IL-18_Basal \nProcessing group: IL-1RN_Apical \nProcessing group: G-CSF_Basal \nProcessing group: IL-1β_Apical \nProcessing group: IL-1β_Basal \nProcessing group: G-CSF_Apical \nProcessing group: IL-18_Apical \nProcessing group: CCL-2_Apical \nProcessing group: IFN-γ_Apical \nProcessing group: IL-36β_Apical \nProcessing group: L-VEGF_Apical \nProcessing group: CXCL-10_Apical \nProcessing group: GM-CSF_Apical \nProcessing group: CXCL-10_Basal \nProcessing group: IL-10_Apical \nProcessing group: TNF-α_Basal \nProcessing group: IL-6_Apical \nProcessing group: MMP-7_Apical \nProcessing group: TNF-α_Apical \nProcessing group: GM-CSF_Basal \nProcessing group: CCL-5_Basal \nProcessing group: CCL-20_Apical \nProcessing group: IL-1α_Basal \nProcessing group: IL-36β_Basal \nProcessing group: MMP-1_Apical \nProcessing group: CCL-20_Basal \nProcessing group: CCL-7_Apical \nProcessing group: MMP-1_Basal \nProcessing group: MMP-2_Apical \nProcessing group: IL-8_Basal \nProcessing group: MMP-9_Apical \nProcessing group: IL-5_Apical \nProcessing group: IL-8_Apical \nProcessing group: CCL-7_Basal \nProcessing group: IL-1α_Apical \nProcessing group: MMP-10_Basal \nProcessing group: CCL-4_Apical \nProcessing group: CCL-5_Apical \nProcessing group: MMP-9_Basal \nProcessing group: Eotaxin_Apical \nProcessing group: MMP-7_Basal \nProcessing group: L-VEGF_Basal \nProcessing group: CCL-19_Basal \nProcessing group: MMP-10_Apical \nProcessing group: IFN-γ_Basal \nProcessing group: MMP-2_Basal \nProcessing group: Eotaxin_Basal \nProcessing group: IL-10_Basal \nProcessing group: IL-5_Basal \n\n# Combine all fixed effects dataframes in the list into a single dataframe\nstats_fixed_effects &lt;- bind_rows(map(stats_list, pluck, \"fixed_effects\"))\n\n# Combine all random effects dataframes in the list into a single dataframe\nstats_random_effects &lt;- bind_rows(map(stats_list, pluck, \"random_effects\"))\n\n# Combine all contrasts dataframes in the list into a single dataframe\nstats_contrasts &lt;- bind_rows(map(stats_list, pluck, \"contrasts\"))\n\n# Combine all backtransformed predicted values dataframes in the list into a single dataframe\nstats_transf_preds &lt;- bind_rows(map(stats_list, pluck, \"transf_preds\"))\n\n\nP.value Correction\n\n# Filter rows with NB (controls)\ncontrast_NB &lt;- stats_contrasts %&gt;%\n  filter(str_count(contrast, \"NB.control\") == 1)\n\n# Filter rows with two live bacteria (live vs live)\ncontrast_live_vs_live &lt;- stats_contrasts %&gt;%\n  filter(str_count(contrast, \"live\") == 2)\n\n# Filter rows with one live and one IRR (same bacteria)\ncontrast_same_bacteria &lt;- stats_contrasts %&gt;%\n  filter(str_extract(contrast, \"[A-Za-z]+(?=.live)\") == str_extract(contrast, \"[A-Za-z]+(?=.IRR)\"))\n\n# Combine the filtered dataframes\nstats_contrasts_selection &lt;- bind_rows(contrast_NB, contrast_live_vs_live, contrast_same_bacteria) %&gt;%\n  arrange(group_label)\n\n# Selection of Cyto-Location groups to perform contrast analysis based on anova\nstats_contrasts_selection &lt;- stats_contrasts_selection %&gt;%\n  filter(anova_pvalue &lt; 0.05)\n\n\n# Adjust across all Cyto-Location groups using FDR\nstats_contrasts_selection &lt;- stats_contrasts_selection %&gt;%\n  mutate(adj.p.FDR = p.adjust(p.value, method = \"fdr\")) %&gt;%\n  mutate(sign.FDR = ifelse(adj.p.FDR &lt; 0.05, T, F)) \n\n\n\nP-value and Fold-Change significance added to Contrasts table\n\n# Separate contrast names into 2 groups matching the x axis labels for the individual plots\nstats_contrasts_selection &lt;- stats_contrasts_selection %&gt;%\n  separate(contrast, into = c(\"condition1\", \"condition2\"), sep = \" - \", remove = F) \n\n# Substitute bacteria and viability names with the label versions\nstats_contrasts_selection$group1 &lt;- BacVia_order$Bac.Via_label[match(stats_contrasts_selection$condition1, BacVia_order$Bac.Via)]\nstats_contrasts_selection$group2 &lt;- BacVia_order$Bac.Via_label[match(stats_contrasts_selection$condition2, BacVia_order$Bac.Via)]\n\n# Formatting of the p.value labels\nstats_contrasts_selection &lt;- stats_contrasts_selection %&gt;%\n  mutate(sign = case_when(\n    adj.p.FDR &lt; 0.05 ~ \"*\",\n    TRUE ~ \"\"  \n  ))\nstats_contrasts_selection$adj.p.FDR = format(stats_contrasts_selection$adj.p.FDR, digits = 2, scientific = TRUE) \n\n# Calculate fold-change values for each contrast\nstats_contrasts_selection &lt;- stats_contrasts_selection %&gt;%\n  ungroup() %&gt;%\n  left_join(select(stats_transf_preds, Bac.Via, group_label, pconcentration), by = join_by(group_label == group_label, condition1 == Bac.Via)) %&gt;%\n  left_join(select(stats_transf_preds, Bac.Via, group_label, pconcentration), by = join_by(group_label == group_label, condition2 == Bac.Via), suffix = c(\".1\", \".2\")) %&gt;%\n  mutate(FC = pconcentration.1 / pconcentration.2,\n         FC = if_else(FC &lt; 1, -1 / FC, FC),\n         highlighted = case_when(\n           FC &lt;= -4 ~ \"+\",\n           FC &gt;= 4 ~ \"-\",\n           TRUE ~ \"\")) \n\n\n\n\nPlot function\n\n# Function to plot each individual Cyto-location group using pg/mL data\nplot_function &lt;- function(true_data, stats_data, contrasts, random, each_group) {\n  \n  # Subset data\n  true_data &lt;- true_data %&gt;%\n    filter(group_label == each_group) \n  stats_data &lt;- stats_data %&gt;%\n    filter(group_label == each_group) \n  contrasts &lt;- contrasts %&gt;%\n    filter(group_label == each_group) \n  random &lt;- random %&gt;%\n    filter(group_label == each_group) \n  \n  # Factor Ordering\n  stats_data &lt;- merge(stats_data, BacVia_order, by = \"Bac.Via\") \n  stats_data$Bac.Via_label &lt;- factor(stats_data$Bac.Via_label, levels = BacVia_order$Bac.Via_label)\n\n  # Plot\n  plot &lt;- ggplot() +\n    \n    # True values in pg/mL\n    geom_jitter(data = true_data, \n                aes(x = Bac.Via_label, y = concentration_final, fill = Bac.Via_label, color = Bac.Via_label, shape = line),\n                width = 0.15, size = 3, alpha = 0.75, stroke = 0.75, show.legend = TRUE) +   \n    \n    scale_fill_manual(values = c(\"#5b5b5b\",\"#AA35E3\",\"#2e67f2\",\"#927ed1\",\"#AA35E3\",\"#2e67f2\",\"#927ed1\")) +\n    scale_color_manual(values = c(\"#5b5b5b\",\"#AA35E3\",\"#2e67f2\",\"#927ed1\",\"#AA35E3\",\"#2e67f2\",\"#927ed1\")) +\n    scale_shape_manual(values = c(22,24)) +\n    \n    # Predictions from the model transformed into pg/mL\n    geom_point(data = stats_data, aes(x = Bac.Via_label, y = pconcentration), shape = 3, size = 1) +\n    geom_errorbar(data = stats_data, aes(x = Bac.Via_label,\n                                         y = pconcentration,\n                                         ymin = pconcentration_min,\n                                         ymax = pconcentration_max),\n                  width = .15) +\n    \n    # Add sections for live vs. IRR\n    geom_vline(xintercept = 1.45, colour = \"grey70\", linetype = 'dotted') +\n    geom_vline(xintercept = 4.5, colour = \"grey70\", linetype = 'dotted') +\n    \n    # General style\n    scale_y_log10() +\n    scale_x_discrete(expand = c(0,0.5)) +\n    labs(title = each_group,\n         x = \"\",\n         y = \"pg/mL\",\n         fill = \"Bacteria\", color = \"Bacteria\", shape = \"Line\") +  \n    theme_bw() +\n    theme(panel.grid = element_blank(), \n          legend.text = element_markdown(),\n          text = element_text(size = 12),\n          axis.text.x = element_markdown()) \n  \n  # Conditionally arrange plot and p-values table if contrasts is not NULL\n  Tmin &lt;- ttheme_minimal()\n  if (!is.null(contrasts) && nrow(contrasts) &gt; 0) {\n    contrasts &lt;- contrasts %&gt;%\n      ungroup() %&gt;%\n      select(contrast, p.value, adj.p.FDR, sign, pconcentration.1, pconcentration.2, FC, highlighted)\n    \n    panel &lt;- ggarrange(plot + theme(plot.margin = unit(c(0.25, 0.25, 0.25, 0.25), \"in\")), \n                       tableGrob(random, theme = Tmin, rows = NULL),\n                       tableGrob(contrasts, theme = Tmin, rows = NULL), \n                       ncol = 1, heights = c(0.5, 0.2, 0.4))\n  } else {\n    panel &lt;- ggarrange(plot + theme(plot.margin = unit(c(0.25, 0.25, 0.25, 0.25), \"in\")), \n                       tableGrob(random, theme = Tmin, rows = NULL),\n                       NULL, \n                       ncol = 1, heights = c(0.5, 0.2, 0.4))\n  }\n  return(list(each_group, plot, panel))\n} \n\n\n#Example use for a specific Cytokine-location group\neach_group = \"IL-1α_Apical\" \n\nplot_function(Stats_values, stats_transf_preds, stats_contrasts_selection, stats_random_effects, each_group)\n\n[[1]]\n[1] \"IL-1α_Apical\"\n\n[[2]]\n\n\n\n\n\n\n[[3]]\n\n\n\n\n\n\nplots_list &lt;- map(unique(Stats_values$group_label), ~plot_function(true_data = Stats_values, stats_data = stats_transf_preds, contrasts = stats_contrasts_selection, random = stats_random_effects, .x))\n\n\n\nSaving files\n\n## Save outputs\nwrite_xlsx(stats_fixed_effects, file.path(stats_folder, \"stats_fixed_effects.xlsx\"))\nwrite_xlsx(stats_random_effects, file.path(stats_folder, \"stats_random_effects.xlsx\"))\nwrite_xlsx(stats_contrasts_selection, file.path(stats_folder, \"stats_contrasts.xlsx\"))\nwrite_xlsx(stats_transf_preds, file.path(stats_folder, \"stats_transf_preds.xlsx\"))\nsaveRDS(stats_contrasts_selection, file.path(stats_folder, \"stats_contrasts.rds\"))\n\n# Save all multiple plots/tables on individual pages of a single pdf\npdf(paste0(figures_folder, \"/Cyto_Boxplots.pdf\"), width = 10, height = 11)\nfor (i in seq_along(plots_list)) {\n  print(plots_list[[i]][3])\n}\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\ndev.off()\n\nquartz_off_screen \n                2 \n\n# Save all plot figures as an R object\nsaveRDS(plots_list, file.path(figures_folder, \"plots_list.rds\"))\n\n# Cleaning-up all objects from the environment\n#rm(list = ls())"
  },
  {
    "objectID": "Methods_HekBlue.html#data-input-and-selection",
    "href": "Methods_HekBlue.html#data-input-and-selection",
    "title": "HEK-Blue",
    "section": "Data Input and Selection",
    "text": "Data Input and Selection\n\nFile Paths\n\n# Folder paths\ninput_path &lt;- \"data/input_data/HekBlue/\"\nmetadata_path &lt;- \"data/metadata/HekBlue\"\n\n# Create subfolders for output files\ndataframes_folder &lt;- \"data/dataframes\"\nif (!file.exists(\"data/dataframes\")) {\n  dir.create(\"data/dataframes\", recursive = TRUE)\n}\noutputs_folder &lt;- \"data/outputs/HekBlue\"\nif (!file.exists(\"data/outputs/HekBlue\")) {\n  dir.create(\"data/outputs/HekBlue\", recursive = TRUE)\n}\n\n# Load data and metadata\nHek_Original &lt;- read_csv(file.path(input_path, \"HekData_IL1R.csv\"))\nBacVia_order &lt;- read_csv(file.path(metadata_path, \"Order_BacteriaViability.csv\"))\n\n\n# Split sample and standards dataframes\ndata_samples &lt;- Hek_Original %&gt;%\n  filter(type == \"sample\")\n\ndata_standards &lt;- Hek_Original %&gt;%\n  filter(type == \"standard\")\n\n# Rename columns\ncolnames(data_standards)[colnames(data_standards) == \"bacteria\"] &lt;- \"STD\"\ncolnames(data_standards)[colnames(data_standards) == \"treatment\"] &lt;- \"pg.ml\"\n\n# Remove extra columns from the standards dataframe\ndata_standards &lt;-\n  select(data_standards,\n         -well,\n         -sample,\n         -line,\n         -time,\n         -location,\n         -viability,\n         -`Analyte Sample`) %&gt;%\n  group_by(STD) \n\n# Select samples at 48h\ndata_samples &lt;- data_samples %&gt;%\n  filter(time == \"48\")\n\n# Variable formatting \ndata_standards$STD &lt;- as.factor(data_standards$STD)\ndata_standards$Abs &lt;- as.numeric(data_standards$Abs)\ndata_standards$pg.ml &lt;- as.numeric(data_standards$pg.ml)\ndata_samples$line &lt;- as.factor(data_samples$line)\ndata_samples$line &lt;- fct_recode(data_samples$line, \"HNO204\" = \"B\", \"HNO919\" = \"C\") \ndata_samples$location &lt;- fct_recode(data_samples$location, \"Apical\" = \"Ap\", \"Basal\" = \"Baso\")"
  },
  {
    "objectID": "Methods_HekBlue.html#standard-curve",
    "href": "Methods_HekBlue.html#standard-curve",
    "title": "HEK-Blue",
    "section": "Standard Curve",
    "text": "Standard Curve\n\n# Select standard curve values and log transform so it fits a linear model\ndata_standards &lt;- data_standards %&gt;% \n  filter(STD %in% c(\"STD1\", \"STD2\", \"STD3\", \"STD4\", \"STD5\", \"STD6\")) %&gt;%\n  mutate(log_pg.ml = log10(pg.ml))\n\n\n# Fit a linear model (lm) with \"Abs\" as the dependent variable and \"log_pg.ml\" as the independent variable\nlmStandard &lt;- lm(Abs ~ log_pg.ml, data_standards) \n  \n# Extract coefficients from the linear model\ncoefficients &lt;- lmStandard$coefficients\n\n# Apply linear model coefficients to calculate pg.ml in samples. LOD_pg.ml has a max value of 500\ndata_samples &lt;- data_samples %&gt;%\n  mutate(log_pg.ml = ((Abs - coefficients[1]) / coefficients[2]),\n         pg.ml = 10^(log_pg.ml),\n         LOD_pg.ml = ifelse(pg.ml &gt; 500, 500, pg.ml))\n\n\n# Add column with sample type information (NB control vs. bacterial sample). Calculate averages\ndata_samples_avg &lt;- data_samples %&gt;% \n  mutate(via = ifelse(bacteria == \"NB\", \"control\", viability)) %&gt;%\n  group_by(date, location, line, time, bacteria, via) %&gt;% \n  mutate(concentration_avg = mean(pg.ml, na.rm = TRUE),\n         Bac.Via = interaction(bacteria, via)) %&gt;%\n  distinct(date, location, line, time, bacteria, via, .keep_all = TRUE) %&gt;% \n  ungroup()\n\n\n# Factoring variables with the right levels\ndata_samples_avg &lt;- data_samples_avg %&gt;% mutate_if(is.character, factor)\ndata_samples_avg &lt;- merge(data_samples_avg, BacVia_order, by = \"Bac.Via\")\ndata_samples_avg$Bac.Via &lt;- factor(data_samples_avg$Bac.Via, levels = BacVia_order$Bac.Via)\ndata_samples_avg$Bac.Via_label &lt;- factor(data_samples_avg$Bac.Via_label, levels = BacVia_order$Bac.Via_label)\n\n\nPlot\n\n# Extract coefficients and R-squared value\nlm_eq &lt;- paste(\"y =\", round(coef(lmStandard)[2], 2), \"x +\", round(coef(lmStandard)[1], 2))\nr_squared &lt;- round(summary(lmStandard)$r.squared, 3)\n\n# Create the ggplot object\npg.ml_plot &lt;- ggplot(data_standards, aes(x = log_pg.ml, y = Abs)) +\n  geom_point() +\n  geom_smooth(method = \"lm\", se = FALSE, color = \"black\", linetype = \"dotted\", linewidth = 0.8) +\n  geom_point(data = data_samples_avg, aes(x = log_pg.ml, y = Abs), color = \"pink\") +\n  labs(x = \"log pg/mL\", y = \"Abs\") +\n  ggtitle(\"Standard Curve with sample data\") +\n  geom_text(x = min(data_samples_avg$log_pg.ml), y = max(data_samples_avg$Abs), \n            label = paste(\"Equation: \", lm_eq, \"\\nR-squared: \", r_squared), \n            hjust = 0, vjust = 1, color = \"black\") +\n  theme_bw() +\n  theme(panel.grid = element_blank(),\n        text = element_text(size = 14))\n\npg.ml_plot"
  },
  {
    "objectID": "Methods_HekBlue.html#saving-files",
    "href": "Methods_HekBlue.html#saving-files",
    "title": "HEK-Blue",
    "section": "Saving files",
    "text": "Saving files\n\n# Save data frames as CSV files in the dataframes folder\nwrite_csv(data_samples_avg, file.path(dataframes_folder, \"HekBlue_values.csv\"))\n\n# Save data frames as R objects in the dataframes folder\nsaveRDS(data_samples_avg, file.path(dataframes_folder, \"HekBlue_values.rds\"))\n\n# Use this to read the final objects\ndata_samples_avg &lt;- readRDS(\"data/dataframes/HekBlue_values.rds\")"
  },
  {
    "objectID": "Methods_HekBlue.html#results-plots",
    "href": "Methods_HekBlue.html#results-plots",
    "title": "HEK-Blue",
    "section": "Results Plots",
    "text": "Results Plots\n\nFunction for each location\n\n# Function to analyze each location\nanalysis_function &lt;- function(data, each_location) {\n  \n  # Subset the data to the selected location\n  data_subset &lt;- data %&gt;%\n    filter(location == each_location) \n  \n  #Plot\n  plot &lt;- ggplot() +\n    geom_hline(yintercept = 500, linetype = \"dashed\", color = \"gray\", size = 1) +\n    \n    geom_jitter(data = data_subset, \n               aes(x = Bac.Via_label, y = LOD_pg.ml, fill = Bac.Via_label, color = Bac.Via_label, shape = line),\n               width = 0.4, size = 2.5, alpha = 0.75, show.legend = TRUE) +   \n    \n    scale_fill_manual(values = c(\"#5b5b5b\",\"#AA35E3\",\"#2e67f2\",\"#927ed1\",\"#AA35E3\",\"#2e67f2\",\"#927ed1\")) +\n    scale_color_manual(values = c(\"#5b5b5b\",\"#AA35E3\",\"#2e67f2\",\"#927ed1\",\"#AA35E3\",\"#2e67f2\",\"#927ed1\")) +\n    scale_shape_manual(values = c(22,24)) +\n    \n    # Add sections for live vs. IRR\n    geom_segment(aes(x = 1.45 , y = Inf, xend = 1.45, yend = -90), colour = \"grey70\", linetype = 'dotted') +\n    geom_segment(aes(x = 4.5 , y = Inf, xend = 4.45, yend = -90), colour = \"grey70\", linetype = 'dotted') +\n    annotate(\"text\", \n             x = seq(1, 7, length.out = 7), y = -80,\n             size = 4,\n             label = c(\"\", \"\", \"Live\", \"\", \"\", \"Dead\", \"\")) +\n    \n    coord_cartesian(ylim = c(0, NA), clip = \"off\") +\n    \n    # General style\n    labs(title = paste0(each_location),\n         x = \"\",\n         y = \"pg/mL active IL-1α & IL-1β\",\n         fill = \"Bacteria\", color = \"Bacteria\", shape = \"Line\") +\n    theme_bw() +\n    theme(panel.grid = element_blank(), \n          legend.text = element_markdown(),\n          text = element_text(size = 20), \n          axis.text.y = element_text(color = \"black\"), \n          axis.text.x = element_markdown(angle = 0))\n  \n  # Save files\n  ggsave(plot, filename = paste0(outputs_folder, \"/plotHekBlue_\", each_location, \".png\"), width = 11, height = 10)\n  saveRDS(plot, file.path(outputs_folder, paste0(\"plotHekBlue_\", each_location, \".rds\")))\n  \n  return(plot = plot)\n}\n\n\n\nApply to each location\n\nApical\n\nanalysis_function(data_samples_avg, each_location = \"Apical\")\n\n\n\n\n\n\nBasal\n\nanalysis_function(data_samples_avg, each_location = \"Basal\")"
  },
  {
    "objectID": "RSession.html",
    "href": "RSession.html",
    "title": "R Session Info",
    "section": "",
    "text": "# List of all used packages\nlibrary(tidyverse)\nlibrary(ggpubr)\nlibrary(ggtext)\nlibrary(scales)\nlibrary(lme4)\nlibrary(afex)\nlibrary(emmeans)\nlibrary(gridExtra)\nlibrary(readxl)\nlibrary(writexl)\nlibrary(ggnewscale)\nlibrary(plotly)\nlibrary(htmlwidgets)\nlibrary(magrittr)\nlibrary(DESeq2)\n\n\nsessionInfo()\n\nR version 4.4.0 (2024-04-24)\nPlatform: aarch64-apple-darwin20\nRunning under: macOS Sonoma 14.6.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.12.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats4    stats     graphics  grDevices utils     datasets  methods  \n[8] base     \n\nother attached packages:\n [1] DESeq2_1.44.0               SummarizedExperiment_1.34.0\n [3] Biobase_2.64.0              MatrixGenerics_1.16.0      \n [5] matrixStats_1.4.1           GenomicRanges_1.56.1       \n [7] GenomeInfoDb_1.40.1         IRanges_2.38.1             \n [9] S4Vectors_0.42.1            BiocGenerics_0.50.0        \n[11] magrittr_2.0.3              htmlwidgets_1.6.4          \n[13] plotly_4.10.4               ggnewscale_0.5.0           \n[15] writexl_1.5.0               readxl_1.4.3               \n[17] gridExtra_2.3               emmeans_1.10.4             \n[19] afex_1.4-1                  lme4_1.1-35.5              \n[21] Matrix_1.7-0                scales_1.3.0               \n[23] ggtext_0.1.2                ggpubr_0.6.0               \n[25] lubridate_1.9.3             forcats_1.0.0              \n[27] stringr_1.5.1               dplyr_1.1.4                \n[29] purrr_1.0.2                 readr_2.1.5                \n[31] tidyr_1.3.1                 tibble_3.2.1               \n[33] ggplot2_3.5.1               tidyverse_2.0.0            \n\nloaded via a namespace (and not attached):\n [1] sandwich_3.1-1          rlang_1.1.4             multcomp_1.4-26        \n [4] compiler_4.4.0          vctrs_0.6.5             reshape2_1.4.4         \n [7] crayon_1.5.3            pkgconfig_2.0.3         fastmap_1.2.0          \n[10] backports_1.5.0         XVector_0.44.0          utf8_1.2.4             \n[13] rmarkdown_2.28          tzdb_0.4.0              UCSC.utils_1.0.0       \n[16] nloptr_2.1.1            xfun_0.47               zlibbioc_1.50.0        \n[19] jsonlite_1.8.8          DelayedArray_0.30.1     BiocParallel_1.38.0    \n[22] broom_1.0.6             parallel_4.4.0          R6_2.5.1               \n[25] stringi_1.8.4           car_3.1-2               boot_1.3-31            \n[28] cellranger_1.1.0        numDeriv_2016.8-1.1     estimability_1.5.1     \n[31] Rcpp_1.0.13             knitr_1.48              zoo_1.8-12             \n[34] splines_4.4.0           timechange_0.3.0        tidyselect_1.2.1       \n[37] rstudioapi_0.16.0       abind_1.4-5             yaml_2.3.10            \n[40] codetools_0.2-20        lattice_0.22-6          lmerTest_3.1-3         \n[43] plyr_1.8.9              withr_3.0.1             coda_0.19-4.1          \n[46] evaluate_0.24.0         survival_3.7-0          xml2_1.3.6             \n[49] pillar_1.9.0            carData_3.0-5           generics_0.1.3         \n[52] hms_1.1.3               munsell_0.5.1           minqa_1.2.8            \n[55] xtable_1.8-4            glue_1.7.0              lazyeval_0.2.2         \n[58] tools_4.4.0             data.table_1.16.0       locfit_1.5-9.10        \n[61] ggsignif_0.6.4          mvtnorm_1.3-1           grid_4.4.0             \n[64] colorspace_2.1-1        nlme_3.1-166            GenomeInfoDbData_1.2.12\n[67] cli_3.6.3               fansi_1.0.6             S4Arrays_1.4.1         \n[70] viridisLite_0.4.2       gtable_0.3.5            rstatix_0.7.2          \n[73] digest_0.6.37           SparseArray_1.4.8       TH.data_1.1-2          \n[76] htmltools_0.5.8.1       lifecycle_1.0.4         httr_1.4.7             \n[79] gridtext_0.1.5          MASS_7.3-61"
  }
]