[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "HNOBac Manuscript",
    "section": "",
    "text": "Introduction\nThis repository includes the code used for data analysis for the manuscript “Nasal microbionts differentially colonize and elicit cytokines in human nasal epithelial organoids”. A preprint of this manuscript is available at bioRxiv.\nAll dataframes generated in the analysis from the raw data and metadata (see data input section for each code notebook) are available here as both .csv and .rds files.\n\nFigure 1: Human nasal epithelial organoids tolerate nasal microbiont colonization and restrict bacteria to the mucus layer.\n\nFigure 1B: The code for data analysis for the CFU data at 34 °C is available here.\nFigure 1G: The code for data analysis for the LDH data at 34 °C is available here.\nAdditional images from independent experiments for this figure are available here.\n\nSupplemental Figure 1: Nasal microbionts colonize HNOs at human internal body temperature, 37 °C.\n\nFigure S1A: The code for data analysis for the RNASeq is available here.\nFigure S1B: The code for data analysis for Cell Counts & TEER is available here.\nFigure S1C: The code for data analysis for the CFU data at 37 °C, as well as analysis at 34 vs 37 °C, is available here.\nFigure S1D: The code for data analysis for the LDH data at 37 °C, as well as analysis at 34 vs 37 °C, is available here.\n\nFigure 2: HNOs exhibit many characteristics of human nasal respiratory epithelium that are lacking in Calu-3 and RPMI 2650 cells. Additional images from independent experiments for this figure are available here.\nFigure 3: HNOs, Calu-3 cells, and RPMI 2650 cells at ALI exhibit similar levels of bacterial colonization and epithelial cell damage at 6 hours.\n\nFigure 3A: The code for data analysis for the CFU data is available here.\nFigure 3B: The code for data analysis for the LDH data is available here.\n\nFigure 4: The human nasal respiratory epithelium of HNOs produce general and species-specific cytokine responses to bacterial colonization. The code for data analysis for this figure is available here.\nFigure 5: The human nasal epithelium of HNOs produces key cytokines in amounts orders of magnitude above the limit detection. The code for data analysis for this figure is available here.\nSupplemental Figure 2: In response to live S. aureus monocolonization, HNO production of IL-1α activity dominates over IL-1RN activity resulting in IL-1 receptor activation apically and basally. The code for data analysis for this figure is available here.\nAdditional Microscopy: Additional microscopy images are available here. Representative images from two independent experiments in each of two HNO lines of uncolonized HNOs and HNOs monocolonized with each of the three bacterial species for 24 hours. Hoechst staining in blue and MUC5AC antibody staining in green."
  },
  {
    "objectID": "Methods_RNASeq.html#data-input-and-selection",
    "href": "Methods_RNASeq.html#data-input-and-selection",
    "title": "RNASeq",
    "section": "Data Input and Selection",
    "text": "Data Input and Selection\n\nFile Paths\n\n# Folder paths\ninput_path &lt;- \"data/input_data/RNASeq/\"\nmetadata_path &lt;- \"data/metadata/RNASeq\"\n\n# Create subfolders for output files\ndataframes_folder &lt;- \"data/dataframes\"\nif (!file.exists(\"data/dataframes\")) {\n  dir.create(\"data/dataframes\", recursive = TRUE)\n}\noutputs_folder &lt;- \"data/outputs/RNASeq\"\nif (!file.exists(\"data/outputs/RNASeq\")) {\n  dir.create(\"data/outputs/RNASeq\", recursive = TRUE)\n}\n\n# Load data and metadata\nmetadata &lt;- read_excel(file.path(metadata_path, \"hnoseq3437-metadata.xlsx\")) \ncounts &lt;- read_csv(file.path(input_path, \"hnoseq3437-hisat2.featureCounts-genes2-2batches.csv\"))\n\n\n\nData clean-up\n\n# Clean up unneeded columns and transform all columns into factors\nmetadata &lt;- metadata %&gt;%\n  select(-contains(c('_func','original_name'))) %&gt;%\n  mutate_all(factor)\n\n# Select only the rows with \"protein_coding\" as the GeneBiotype and transform in a matrix with GeneID as the rownames. Sort by GeneID\ncounts &lt;- counts %&gt;%\n  filter(GeneBiotype == \"protein_coding\") %&gt;% \n  column_to_rownames(var = \"GeneID\") %&gt;%\n  select(-contains('Gene')) %&gt;% \n  .[ order(names(.)) ]\n\n\n# Subset metadata to include only the samples relevant to this analysis \nsubset.metadata &lt;- metadata %&gt;% \n  subset(line != 'HVO262') %&gt;% # remove HVO262 samples\n  subset(temp != 'CT') %&gt;%  # remove CONTROL samples\n  subset(temp != '34') %&gt;%  # remove 34C samples\n  droplevels() %&gt;% \n  #mutate(temp = factor(temp, labels = c(\"37 °C\", \"37 °C → 34 °C\")))  %&gt;% \n  mutate(temp = factor(temp, labels = c(\"&lt;b&gt;&lt;span style='color:red3;'&gt;37 °C&lt;/span&gt;&lt;/b&gt;\", \n                                        \"&lt;b&gt;&lt;span style='color:#5b5b5b;'&gt;37 °C → 34 °C&lt;/span&gt;&lt;/b&gt;\")))  %&gt;%\n  mutate(line = factor(line, levels = c(\"HNO918\", \"HNO204\", \"HNO919\")))  %&gt;% \n  set_rownames(.$sampleid)\n\n# Keep counts column only for the selected samples \nsubset.counts &lt;- counts %&gt;% \n  select(contains(rownames(subset.metadata))) \n\n# Make the correesponding design matrix \ncoldata &lt;- data.frame(subset.metadata$line) %&gt;%\n  set_rownames(rownames(subset.metadata)) %&gt;%\n  setNames('condition') \n\n\n\nSaving files\n\n# Save data frames as CSV files in the dataframes folder\nwrite.csv(subset.counts, file.path(dataframes_folder, \"RNASeq_counts.csv\"), row.names = TRUE)\n\n# Save data frames as R objects in the dataframes folder\nsaveRDS(subset.counts, file.path(dataframes_folder, \"RNASeq_counts.rds\"))\n\n# Use this to read the final objects\nsubset.counts &lt;- readRDS(\"data/dataframes/RNASeq_counts.rds\")"
  },
  {
    "objectID": "Methods_RNASeq.html#deseq",
    "href": "Methods_RNASeq.html#deseq",
    "title": "RNASeq",
    "section": "DESeq",
    "text": "DESeq\n\n# Run DESeq\ndds01.cnts &lt;- DESeqDataSetFromMatrix(subset.counts, colData = coldata, design = ~ condition)\ndds02.dseq &lt;- DESeq(dds01.cnts)\ndds03.resu &lt;- results(dds02.dseq)\ndds04.vstf &lt;- vst(dds02.dseq,  blind = FALSE)\n\n\n# Get PCA dataframe and percentVar\npcadata &lt;- plotPCA(dds04.vstf, returnData = TRUE) \npcadata &lt;- left_join(pcadata, subset.metadata, by = c(\"name\" = \"sampleid\")) \n\n\nSaving files\n\n# Save data frames as CSV files in the output folder\nwrite_csv(pcadata, file.path(outputs_folder, \"PCA_values.csv\"))\n\n# Save data frames as R objects in the output folder\nsaveRDS(pcadata, file.path(outputs_folder, \"PCA_values.rds\"))\n\n# Cleaning-up all objects from the environment\nrm(list = ls())\n\n# Use this to read the final objects\npcadata &lt;- readRDS(\"data/outputs/RNASeq/PCA_values.rds\")"
  },
  {
    "objectID": "Methods_RNASeq.html#pca-plot",
    "href": "Methods_RNASeq.html#pca-plot",
    "title": "RNASeq",
    "section": "PCA Plot",
    "text": "PCA Plot\n\nFile Paths\n\n# Folder paths\noutputs_folder &lt;- \"data/outputs/RNASeq\"\n\n# Load data \npcadata &lt;- readRDS(\"data/outputs/RNASeq/PCA_values.rds\")\n\n\n\nPlot\n\npercentVar = round(100 * attr(pcadata, \"percentVar\"))\n\n\nPCAplot = ggplot(pcadata, aes(x = PC1, y = PC2, group = condition)) +\n  geom_point(aes(fill = temp, color = temp, shape = line), alpha = 0.75, size = 3, show.legend = c(shape = FALSE)) + \n  scale_fill_manual(values = c('red3', '#5b5b5b')) +\n  scale_color_manual(values = c('red3', '#5b5b5b')) +\n  scale_shape_manual(values = c(21, 22, 24)) +\n  labs(x = paste0(\"PC1: \", percentVar[1], \"% variance\"),\n       y = paste0(\"PC2: \", percentVar[2], \"% variance\"),\n       fill = \"Temperature\", color = \"Temperature\") +\n  #coord_fixed() +\n  theme_bw() +\n  theme(panel.grid = element_blank(),\n        text = element_text(size = 20),\n        legend.text = element_markdown(),\n        axis.text.x = element_text(color = \"black\"),\n        axis.text.y = element_text(color = \"black\")) +\n  guides(fill = guide_legend(override.aes = list(shape = 21))) \n\nPCAplot\n\n\n\n\n\n\nSaving files\n\nggsave(PCAplot, filename = paste0(outputs_folder, \"/plotPCA.png\"), width = 6, height = 6)\nsaveRDS(PCAplot, file.path(outputs_folder, paste0(\"plotPCA.rds\")))"
  },
  {
    "objectID": "Methods_MOC.html#file-paths",
    "href": "Methods_MOC.html#file-paths",
    "title": "Epithelial Cell Counts & TEER",
    "section": "File Paths",
    "text": "File Paths\n\n# Folder paths\nMOC_input_path &lt;- \"data/input_data/MOC_TEER\"\nCFUs_input_path &lt;- \"data/dataframes\"\n\n# Create subfolders for output files\ndataframes_folder &lt;- \"data/dataframes\"\nif (!file.exists(\"data/dataframes\")) {\n  dir.create(\"data/dataframes\", recursive = TRUE)\n}\noutputs_folder &lt;- \"data/outputs/MOC_TEER\"\nif (!file.exists(\"data/outputs/MOC_TEER\")) {\n  dir.create(\"data/outputs/MOC_TEER\", recursive = TRUE)\n}\n\n# Load data \nHNOCells &lt;- read.csv(file.path(MOC_input_path, \"MOC_HNOBac_2024.csv\")) \nCellLines &lt;- read_excel(file.path(MOC_input_path, \"HNObac_Calu3RPMI_MOC_TEER.xlsx\"))\n\nHNOTEER &lt;- read_excel(file.path(MOC_input_path, \"HNObac_TEER.xlsx\"))\n\nCFUs &lt;- read_rds(file.path(CFUs_input_path, \"CFU_values.rds\"))\nCFUs_6h &lt;- read_rds(file.path(CFUs_input_path, \"CFU_values_6h.rds\"))"
  },
  {
    "objectID": "Methods_MOC.html#cells-per-hno-well",
    "href": "Methods_MOC.html#cells-per-hno-well",
    "title": "Epithelial Cell Counts & TEER",
    "section": "Cells per HNO well",
    "text": "Cells per HNO well\n\nHNOCells$Date &lt;- as.factor(HNOCells$Date)\nHNOCells$Line &lt;- as.factor(HNOCells$Line)\nHNOCells &lt;- HNOCells  %&gt;%\n  mutate(Line = factor(Line, levels = c(\"HNO918\", \"HNO204\", \"HNO919\"))) \n\n\n#summaries by line\nHNOCells_summary &lt;- HNOCells %&gt;%\n  group_by(Line) %&gt;%\n  summarize(median_cells = median(Cells_HNO),\n            Q1 = quantile(Cells_HNO, 0.25),\n            Q3 = quantile(Cells_HNO, 0.75),\n            n = n(),\n            SE = sd(Cells_HNO)/sqrt(n),\n            CI = SE*1.96,\n            mean_cells = mean(Cells_HNO))\n\n#summary of all lines together\nHNOall_summary &lt;- HNOCells %&gt;%\n  summarize(median_cells = median(Cells_HNO),\n            Q1 = quantile(Cells_HNO, 0.25),\n            Q3 = quantile(Cells_HNO, 0.75),\n            n = n(),\n            SE = sd(Cells_HNO)/sqrt(n),\n            CI = SE*1.96,\n            mean_cells = mean(Cells_HNO))\n\n\nPlot\n\nboxplot_HNOCells &lt;- ggplot() +\n  geom_boxplot(data = HNOCells, aes(x = Line, y = Cells_HNO), outliers = F) +\n  \n  geom_jitter(data = HNOCells, aes(x = Line, y = Cells_HNO, shape = Line), \n             fill = \"#5b5b5b\", color = \"#5b5b5b\", size = 3, width = 0.15, alpha = 0.75) +\n  \n  scale_shape_manual(values = c(21, 22, 24)) +\n  scale_y_log10(limits = c(100000, 10000000),\n                labels = trans_format(\"log10\", math_format(10^.x))) +\n  labs(x = \"HNO Line\",\n       y = \"HNO Cells/Well\") +\n  theme_bw() +\n  theme(panel.grid = element_blank(),\n        text = element_text(size = 20), \n        axis.text.x = element_text(color = \"black\"),\n        axis.text.y = element_text(color = \"black\"))\nboxplot_HNOCells\n\n\n\n\n\n\nSaving files\n\nggsave(boxplot_HNOCells, filename = paste0(outputs_folder, \"/boxplot_Cells_HNO.png\"), width = 12, height = 10)\nsaveRDS(boxplot_HNOCells, file.path(outputs_folder, paste0(\"boxplot_Cells_HNO.rds\")))\n\n\n# Save data frames as CSV files in the metadata folder\nwrite_csv(HNOCells, file.path(dataframes_folder, \"Cells_HNO_values.csv\"))\n\n# Save data frames as R objects in the metadata folder\nsaveRDS(HNOCells, file.path(dataframes_folder, \"Cells_HNO_values.rds\"))\n\n# Use this to read the final objects\nHNOCells &lt;- readRDS(\"data/dataframes/Cells_HNO_values.rds\")"
  },
  {
    "objectID": "Methods_MOC.html#cells-per-cell-line-for-calu-3-and-rpmi2650",
    "href": "Methods_MOC.html#cells-per-cell-line-for-calu-3-and-rpmi2650",
    "title": "Epithelial Cell Counts & TEER",
    "section": "Cells per Cell Line for Calu-3 and RPMI2650",
    "text": "Cells per Cell Line for Calu-3 and RPMI2650\n\n#factor date and name of the cell line\nCellLines$Date &lt;- as.factor(CellLines$Date)\nCellLines$Model &lt;- as.factor(CellLines$Model)\n\n\n#summary of each cell line\nCellLines_summary &lt;- CellLines %&gt;%\n  group_by(Model) %&gt;%\n  summarize(median_cells = median(Cells),\n            Q1 = quantile(Cells, 0.25),\n            Q3 = quantile(Cells, 0.75),\n            n = n(),\n            SE = sd(Cells)/sqrt(n),\n            CI = SE*1.96, \n            mean_cells = mean(Cells))\n\n\nPlot\n\nboxplot_CellLines &lt;- ggplot() +\n  geom_boxplot(data = CellLines, aes(x = Model, y = Cells)) +\n  \n  geom_jitter(data = CellLines, aes(x = Model, y = Cells, shape = Model), \n             fill = \"#5b5b5b\", color = \"#5b5b5b\", size = 3, width = 0.15, alpha = 0.75) +\n  \n  scale_shape_manual(values = c(21, 22, 24)) +\n  scale_y_log10(limits = c(100000, 10000000),\n                labels = trans_format(\"log10\", math_format(10^.x))) +\n  labs(x = \"Cell Line\",\n       y = \"Cells/Well\") +\n  theme_bw() +\n  theme(panel.grid = element_blank(),\n        text = element_text(size = 20), \n        axis.text.x = element_text(color = \"black\"),\n        axis.text.y = element_text(color = \"black\"))\n\nboxplot_CellLines\n\n\n\n\n\n\nSaving files\n\nggsave(boxplot_CellLines, filename = paste0(outputs_folder, \"/boxplot_CellLines_HNO.png\"), width = 12, height = 10)\nsaveRDS(boxplot_CellLines, file.path(outputs_folder, paste0(\"boxplot_CellLines_HNO.rds\")))\n\n\n# Save data frames as CSV files in the metadata folder\nwrite_csv(CellLines, file.path(dataframes_folder, \"Cells_CellLines_values.csv\"))\n\n# Save data frames as R objects in the metadata folder\nsaveRDS(CellLines, file.path(dataframes_folder, \"Cells_CellLines_values.rds\"))\n\n# Use this to read the final objects\nCellLines &lt;- readRDS(\"data/dataframes/Cells_CellLines_values.rds\")"
  },
  {
    "objectID": "Methods_MOC.html#multiplicity-of-colonization-hnos",
    "href": "Methods_MOC.html#multiplicity-of-colonization-hnos",
    "title": "Epithelial Cell Counts & TEER",
    "section": "Multiplicity of Colonization (HNOs)",
    "text": "Multiplicity of Colonization (HNOs)\n\nInoc_CFUs &lt;- CFUs %&gt;%\n  filter(Time == \"0\") %&gt;%\n  select(Date, Line, bacteria, Temp, NewCFU) %&gt;%\n  distinct(Date, Line, bacteria, NewCFU, .keep_all = TRUE)\n\nInoc_CFUs_6h &lt;- CFUs_6h %&gt;%\n  filter(Time == \"0\") %&gt;%\n  filter(Model == \"HNO\") %&gt;%\n  select(Date, Line, bacteria, Temp, NewCFU)\n\nInoc &lt;- rbind(Inoc_CFUs, Inoc_CFUs_6h)\n\n\nCFU_Inoculum &lt;- Inoc %&gt;%\n  group_by(Line, bacteria) %&gt;%\n  summarize(median_CFUs = median(NewCFU))\n\nMOC_Calcs &lt;- left_join(CFU_Inoculum, HNOCells_summary %&gt;% select(Line, median_cells), by = \"Line\")\n\nMOC_Calcs &lt;- MOC_Calcs %&gt;%\n  mutate(MOC = (median_CFUs/median_cells)) %&gt;%\n  group_by(bacteria) %&gt;%\n  mutate(avg_MOC = (mean(MOC)))\n\n\nSaving files\n\n# Save data frames as CSV files in the outputs folder\nwrite_csv(MOC_Calcs, file.path(outputs_folder, \"MOC_HNOs.csv\"))"
  },
  {
    "objectID": "Methods_MOC.html#teer",
    "href": "Methods_MOC.html#teer",
    "title": "Epithelial Cell Counts & TEER",
    "section": "TEER",
    "text": "TEER\n\n#factor line and date\nHNOTEER$Date &lt;- as.factor(HNOTEER$Date)\nHNOTEER$Line &lt;- as.factor(HNOTEER$Line)\n#create levels for line to order the HNO lines\nHNOTEER &lt;- HNOTEER  %&gt;%\n  mutate(Line = factor(Line, levels = c(\"HNO918\", \"HNO204\", \"HNO919\"))) \n\n\n#average the technical replicates together\nTEERavg &lt;- HNOTEER %&gt;%\n  group_by(Date,Line,LineCharacter,Assay,WithCellHNO) %&gt;%\n  summarise(avgTEER = mean(TEER))\n\n#calculate the median and mean for TEER of HNOs\nHNOteer_summary &lt;-  TEERavg %&gt;%\n  group_by(Line) %&gt;%\n  summarize(median_TEER = median(avgTEER),\n            Q1 = quantile(avgTEER, 0.25),\n            Q3 = quantile(avgTEER, 0.75),\n            n = n(),\n            SE = sd(avgTEER)/sqrt(n),\n            CI = SE*1.96,\n            mean_TEER = mean(avgTEER))\n\n\n#calculate the summary of TEER values\nCellTEER_summary &lt;- CellLines %&gt;%\n  group_by(Model) %&gt;%\n  summarize(median_TEER = median(TEER),\n            Q1 = quantile(TEER, 0.25),\n            Q3 = quantile(TEER, 0.75),\n            n = n(),\n            SE = sd(TEER)/sqrt(n),\n            CI = SE*1.96, \n            mean_TEER = mean(TEER))\n\n\nSaving files\n\n# Save data frames as CSV files in the metadata folder\nwrite_csv(HNOTEER, file.path(dataframes_folder, \"TEER_values.csv\"))\n\n# Save data frames as R objects in the metadata folder\nsaveRDS(HNOTEER, file.path(dataframes_folder, \"TEER_values.rds\"))\n\n# Use this to read the final objects\nHNOTEER &lt;- readRDS(\"data/dataframes/TEER_values.rds\")"
  },
  {
    "objectID": "Methods_CFUs.html#data-input-and-selection",
    "href": "Methods_CFUs.html#data-input-and-selection",
    "title": "Bacterial CFUs on HNOs 48h",
    "section": "Data Input and Selection",
    "text": "Data Input and Selection\n\nFile Paths\n\n# Folder paths\ninput_path &lt;- \"data/input_data/CFUs/\"\nmetadata_path &lt;- \"data/metadata/CFUs\"\n\n# Create subfolders for output files\ndataframes_folder &lt;- \"data/dataframes\"\nif (!file.exists(\"data/dataframes\")) {\n  dir.create(\"data/dataframes\", recursive = TRUE)\n}\n\n# Load data and metadata\ninput_data &lt;- read_csv(file.path(input_path, \"HNOBac_CFUs_0130_2024.csv\")) %&gt;% mutate_if(is.character, factor)\ninput_data$Time &lt;- as.factor(input_data$Time)\nBac_order &lt;- read_csv(file.path(metadata_path, \"Order_Bacteria_CFUs.csv\"))\n\n\n\nData clean-up\n\n# Setting zero values to the limit of detection\nCFU_data &lt;- input_data %&gt;%\n  mutate(\n    LOD = CFUs == 0,\n    NewCFU = ifelse(LOD, 3.75, CFUs)\n  )\n\n# Factor Ordering and Styling\nCFU_data &lt;- CFU_data %&gt;%\n  mutate(Combined = interaction(bacteria, Time)) %&gt;% \n  mutate(Temp_label = factor(Temp, labels = c(\"&lt;b&gt;&lt;br&gt;&lt;span style='color:#5b5b5b;'&gt;34 °C&lt;/span&gt;&lt;/b&gt;\",\n                                              \"&lt;b&gt;&lt;br&gt;&lt;span style='color:red3;'&gt;37 °C&lt;/span&gt;&lt;/b&gt;\")))  \nCFU_data &lt;- merge(CFU_data, Bac_order, by = \"Combined\") \nCFU_data$bacteria_label &lt;- factor(CFU_data$bacteria_label, levels = Bac_order$bacteria_label)\nCFU_data$Line &lt;- fct_recode(CFU_data$Line, \"HNO918\" = \"A\", \"HNO204\" = \"B\", \"HNO919\" = \"C\") \n\n# Calculate log2 fold change between final time points vs. time 0\nCFU_FC &lt;- CFU_data %&gt;%\n  mutate(Collection_Label = ifelse(Time == 0, \"initial\", \"final\")) %&gt;%\n  group_by(Date, Line, bacteria) %&gt;%\n  reframe(\n    Combined = Combined[Collection_Label == \"final\"],\n    Date = Date[Collection_Label == \"final\"],\n    Line = Line[Collection_Label == \"final\"],\n    Temp = Temp[Collection_Label == \"final\"],\n    Time = Time[Collection_Label == \"final\"],\n    bacteria = bacteria[Collection_Label == \"final\"],\n    bacteria_label = bacteria_label[Collection_Label == \"final\"],\n    Temp_label = Temp_label[Collection_Label == \"final\"],\n    log2FC = log2(NewCFU[Collection_Label == \"final\"]/NewCFU[Collection_Label == \"initial\"])) %&gt;%\n    droplevels() %&gt;%\n  mutate(Temp = factor(Temp))\n\n\n\nSaving files\n\n# Save data frame as CSV files in the output folder\nwrite_csv(CFU_data, file.path(dataframes_folder, \"CFU_values.csv\"))\nwrite_csv(CFU_FC, file.path(dataframes_folder, \"CFU_FC.csv\"))\n\n# Save data frame as R objects in the output folder\nsaveRDS(CFU_data, file.path(dataframes_folder, \"CFU_values.rds\"))\nsaveRDS(CFU_FC, file.path(dataframes_folder, \"CFU_FC.rds\"))\n\n# Cleaning-up all objects from the environment\nrm(list = ls())\n\n# Use this to read the final objects\nCFU_data &lt;- readRDS(\"data/dataframes/CFU_values.rds\")\nCFU_FC &lt;- readRDS(\"data/dataframes/CFU_FC.rds\")"
  },
  {
    "objectID": "Methods_CFUs.html#stats-and-plots",
    "href": "Methods_CFUs.html#stats-and-plots",
    "title": "Bacterial CFUs on HNOs 48h",
    "section": "Stats and Plots",
    "text": "Stats and Plots\n\nFile Paths\n\n# Folder paths\ndataframes_path &lt;- \"data/dataframes\"\nmetadata_path &lt;- \"data/metadata/CFUs\"\n\n# Create subfolders for output files\nfigures_folder &lt;- \"data/outputs/CFUs/figures\"\nif (!file.exists(\"data/outputs/CFUs/figures\")) {\n  dir.create(\"data/outputs/CFUs/figures\", recursive = TRUE)\n}\nstats_folder &lt;- \"data/outputs/CFUs/stats\"\nif (!file.exists(\"data/outputs/CFUs/stats\")) {\n  dir.create(\"data/outputs/CFUs/stats\", recursive = TRUE)\n}\n\n# Load data and metadata\nCFU_data &lt;- readRDS(\"data/dataframes/CFU_values.rds\")\nCFU_FC &lt;- readRDS(\"data/dataframes/CFU_FC.rds\")\nBac_order &lt;- read_csv(file.path(metadata_path, \"Order_Bacteria_CFUs.csv\"))\n\n\n\nAnalysis for each Temp\n\n# Function to analyze each temp condition\nanalysis_function &lt;- function(data, each_temp, cutoff_pvalue, cutoff_FC, color_error) {\n  \n  # Subset the data to the selected temp\n  data_subset &lt;- data %&gt;%\n    filter(Temp == each_temp) \n  \n  data_stats &lt;- data_subset \n  \n  # Mixed-effects model with random effects\n  model &lt;- lmer(log(NewCFU) ~ bacteria * Time \n                + (1|Line) + (1|Line:Date), \n                data = data_stats)\n  #Anova\n  anova &lt;- anova(model)\n  anova_df &lt;- as.data.frame(anova) %&gt;%\n    mutate(sign = case_when(\n      `Pr(&gt;F)` &lt; cutoff_pvalue ~ \"*\",\n      TRUE ~ \"\")) %&gt;%\n    mutate_if(is.numeric, ~ format(., digits = 2, scientific = TRUE))\n  \n  # Calculate Individual contrasts\n  emmeans_model &lt;- emmeans(model, ~ bacteria * Time)\n  emmeans_time &lt;- pairs(emmeans_model, simple = \"Time\", adjust = \"none\")    \n  \n  # Extract random effects and convert to dataframe (if not singular)\n  random_effects_df &lt;- as.data.frame(VarCorr(model)) %&gt;%\n    mutate(proportion = round(100 * (vcov / sum(vcov)), 2))\n  \n  # Adds predictions based on fixed effects, averaged over random effects. It gives a population estimate\n  data_stats &lt;- cbind(data_stats, predval = predict(model,re.form = NA, se.fit = TRUE))\n  data_summary_df &lt;- data_stats %&gt;%\n    group_by(Combined, bacteria_label) %&gt;%\n    summarize(mean.real = mean(NewCFU),\n              mean.predval = mean(predval.fit), \n              mean.predval.se = mean(predval.se.fit)) %&gt;%\n    mutate(exp.mean.predval = exp(mean.predval),\n           max = exp(mean.predval + 2*mean.predval.se),\n           min = exp(mean.predval - 2*mean.predval.se))\n  \n  # Extract time contrasts from emmeans_model, convert to dataframe and adjust pvalues. Remove the 0-48h contrasts\n  contrasts_time_df &lt;- as.data.frame(summary(emmeans_time)) %&gt;%\n    mutate(Temp = each_temp) %&gt;%\n    filter(contrast != \"Time0 - Time48\") %&gt;%\n    mutate(p.adj.holm = p.adjust(p.value, method = \"holm\")) %&gt;%\n    mutate(sign = case_when(\n      p.adj.holm &lt; cutoff_pvalue ~ \"*\",\n      TRUE ~ \"\"))\n  \n  # Edits to the contrast dataframe to include pvalue brackets in plot\n  contrasts_time_df &lt;- contrasts_time_df %&gt;%\n    separate(contrast, into = c(\"Time1\", \"Time2\"), sep = \" - \") %&gt;%\n    mutate(Time1 = sub(\"Time\", \"\", Time1),\n           Time2 = sub(\"Time\", \"\", Time2)) %&gt;%\n    mutate(condition1 = paste(bacteria, Time1, sep = \".\"),\n           condition2 = paste(bacteria, Time2, sep = \".\"))\n  \n  contrasts_time_df$group1 &lt;- Bac_order$bacteria_label[match(contrasts_time_df$condition1, Bac_order$Combined)]\n  contrasts_time_df$group2 &lt;- Bac_order$bacteria_label[match(contrasts_time_df$condition2, Bac_order$Combined)]\n  \n  # Calculate fold-change values for each contrast\n  contrasts_time_df &lt;- contrasts_time_df %&gt;%\n    ungroup() %&gt;%\n    left_join(select(data_summary_df, Combined, exp.mean.predval), by = join_by(condition1 == Combined)) %&gt;%\n    left_join(select(data_summary_df, Combined, exp.mean.predval), by = join_by(condition2 == Combined), suffix = c(\".1\", \".2\")) %&gt;%\n    mutate(FC = exp.mean.predval.1 / exp.mean.predval.2,\n           FC = if_else(FC &lt; 1, -1 / FC, FC),\n           highlighted = case_when(\n             FC &lt;= -cutoff_FC ~ \"+\",\n             FC &gt;= cutoff_FC ~ \"-\",\n             TRUE ~ \"\")) \n  \n  # Select p values to plot and define their location\n  contrast_sign &lt;- contrasts_time_df %&gt;%\n    filter(sign != \"\" & highlighted != \"\") %&gt;%\n    mutate(p.adj.holm = format(p.adj.holm, digits = 2, scientific = TRUE))\n  \n  location &lt;- log10(max(data_subset$NewCFU, na.rm = TRUE)) * 1.1\n  \n  # Standard Boxplot\n  plot_1 &lt;- ggplot() +\n    geom_boxplot(data = data_subset, aes(x = bacteria_label, y = NewCFU, fill = bacteria_label)) + \n    \n    geom_jitter(data = data_subset, aes(x = bacteria_label, y = NewCFU, shape = Line), \n                fill = \"grey50\", color = \"grey30\", size = 2, width = 0.05, stroke = 0.75) +\n    \n    scale_fill_manual(values = c(\"#800080\",\"#800080\",\"#800080\",\n                                 \"#1E90FF\",\"#1E90FF\",\"#1E90FF\", \n                                 \"#927ed1\",\"#927ed1\",\"#927ed1\")) +\n    \n    scale_shape_manual(values = c(21, 22, 24)) +\n    \n    scale_y_log10(breaks = trans_breaks(\"log10\", function(x) 10^x),\n                  labels = trans_format(\"log10\", math_format(10^.x))) +\n    labs(x = \"Hours post-inoculation\",\n         y = paste0(\"CFUs/HNO at \", each_temp, \" °C\")) +\n    theme_bw() +\n    theme(panel.grid = element_blank(),\n          legend.position = \"none\",\n          text = element_text(size = 20), \n          axis.text.x = element_markdown(), \n          axis.text.y = element_text(color = \"black\"))\n  \n  # Plot with predicted means and standard errors of the estimates\n  plot_2 &lt;- ggplot() +\n    geom_point(data = data_subset, \n                aes(x = bacteria_label, y = NewCFU, fill = bacteria_label, color = bacteria_label, shape = Line, group = Line), \n                position = position_jitterdodge(dodge.width = 0.7, jitter.width = 0.2),\n                size = 3, alpha = 0.75, stroke = 0.75) +\n\n    geom_point(data = data_summary_df, aes(x = bacteria_label, y = exp.mean.predval), shape = 3, size = 3, color = color_error) +\n    geom_errorbar(data = data_summary_df, aes(x = bacteria_label,\n                                              y = exp.mean.predval,\n                                              ymax = max,\n                                              ymin = min),\n                  width = 0.5, color = color_error) +\n    \n    scale_fill_manual(values = c(\"#800080\",\"#800080\",\"#800080\",\"#1E90FF\",\"#1E90FF\",\"#1E90FF\",\"#927ed1\",\"#927ed1\",\"#927ed1\")) +\n    scale_color_manual(values = c(\"#800080\",\"#800080\",\"#800080\",\"#1E90FF\",\"#1E90FF\",\"#1E90FF\",\"#927ed1\",\"#927ed1\",\"#927ed1\")) +\n    scale_shape_manual(values = c(21, 22, 24)) +\n    \n    scale_y_log10(breaks = trans_breaks(\"log10\", function(x) 10^x),\n                  labels = trans_format(\"log10\", math_format(10^.x)),\n                  expand = c(0.1,0)) +\n    \n    labs(x = \"Hours post-inoculation\",\n         y = paste0(\"CFUs/HNO at \", each_temp, \" °C\")) +\n    theme_bw() +\n    theme(panel.grid = element_blank(), \n          legend.position = \"none\",\n          text = element_text(size = 20), \n          axis.text.x = element_markdown(), \n          axis.text.y = element_text(color = \"black\"))\n  \n  # Conditionally add p-value annotations layer\n  if (nrow(contrast_sign) &gt; 0) {\n    plot_2 &lt;- plot_2 +\n      stat_pvalue_manual(contrast_sign, label = \"p.adj.holm\", y.position = location,\n                         tip.length = 0.02, bracket.shorten = 0.2, vjust = -0.2, bracket.size = 0.3, size = 2.5)\n  } else {\n    plot_2 &lt;- plot_2\n  }\n  \n  # Arrange plot and tables for summary pdf\n  table &lt;- contrasts_time_df %&gt;%\n    select(condition1, condition2, p.adj.holm, sign, exp.mean.predval.1, exp.mean.predval.2, FC, highlighted) %&gt;%\n    mutate(p.adj.holm = format(p.adj.holm, digits = 2, scientific = TRUE))\n  \n  Tmin &lt;- ttheme_minimal()\n  panel &lt;- ggarrange(plot_1 + theme(plot.margin = unit(c(0.25,0.25,0.25,0.25), \"in\")), \n                     plot_2 + theme(plot.margin = unit(c(0.25,0.25,0.25,0.25), \"in\")),\n                     tableGrob(anova_df, theme = Tmin), \n                     tableGrob(random_effects_df, theme = Tmin, rows = NULL), \n                     tableGrob(table, theme = Tmin, rows = NULL), \n                     ncol = 1, heights = c(0.7, 0.7, 0.2, 0.2, 0.2),\n                     labels = c(\"  Standard Boxplot \", \"Predicted Mean ± 2*SE\", \"    Anova    \", \"Random Effects\", \"   Contrasts  \"))\n  panel &lt;- annotate_figure(panel, top = text_grob(\n    paste0(\"Analysis for \", each_temp, \"C. P-value: \", cutoff_pvalue, \" and FC: \", cutoff_FC),\n                                                         face = \"bold\", size = 14, color = \"red\"))\n  \n  # Save files\n  ggsave(panel, filename = paste0(figures_folder, \"/summaryCFU_\", each_temp, \".pdf\"), width = 10, height = 15)\n  ggsave(plot_2, filename = paste0(figures_folder, \"/plotCFU_\", each_temp, \".png\"), width = 7, height = 6)\n  saveRDS(plot_2, file.path(figures_folder, paste0(\"plotCFU_\", each_temp, \".rds\")))\n  write_csv(anova_df, file.path(stats_folder, paste0(\"anova_\", each_temp, \".csv\")))\n  write_csv(random_effects_df, file.path(stats_folder, paste0(\"stats_random_effects_\", each_temp, \".csv\")))\n  write_csv(contrasts_time_df, file.path(stats_folder, paste0(\"stats_contrasts_\", each_temp, \".csv\")))\n  write_csv(data_summary_df, file.path(stats_folder, paste0(\"stats_summary_\", each_temp, \".csv\")))\n  \n  return(list(\n    anova = anova_df,\n    random_effects = random_effects_df,\n    contrasts_time = contrasts_time_df,\n    #data_summary = data_summary_df,\n    #data_stats = data_stats,\n    plot_1 = plot_1,\n    plot_2 = plot_2\n  ))\n}\n\n\n34C (Main Data)\n\nanalysis_function(CFU_data, each_temp = \"34\", cutoff_pvalue = 0.05, cutoff_FC = 1, color_error = \"black\")\n\n$anova\n               Sum Sq Mean Sq NumDF   DenDF F value  Pr(&gt;F) sign\nbacteria      1.1e+02 5.4e+01     2 1.4e+02 6.0e+00 3.2e-03    *\nTime          1.1e+03 5.3e+02     2 1.2e+02 5.9e+01 1.4e-18    *\nbacteria:Time 6.1e+02 1.5e+02     4 1.2e+02 1.7e+01 4.8e-11    *\n\n$random_effects\n        grp        var1 var2     vcov    sdcor proportion\n1 Line:Date (Intercept) &lt;NA&gt; 2.437316 1.561191      21.14\n2      Line (Intercept) &lt;NA&gt; 0.000000 0.000000       0.00\n3  Residual        &lt;NA&gt; &lt;NA&gt; 9.091124 3.015149      78.86\n\n$contrasts_time\n  Time1 Time2 bacteria  estimate       SE       df   t.ratio      p.value Temp\n1     0    24      Dpi  6.949409 1.005050 121.5808  6.914493 2.341064e-10   34\n2    24    48      Dpi  2.807217 1.005050 121.5808  2.793113 6.066217e-03   34\n3     0    24      Sau  6.213689 1.034188 121.5808  6.008280 2.012053e-08   34\n4    24    48      Sau -5.797778 1.034188 121.5808 -5.606118 1.316820e-07   34\n5     0    24      Spn  3.331496 1.066016 121.5808  3.125183 2.222572e-03   34\n6    24    48      Spn  3.651203 1.066016 121.5808  3.425092 8.386723e-04   34\n    p.adj.holm sign condition1 condition2\n1 1.404639e-09    *      Dpi.0     Dpi.24\n2 6.066217e-03    *     Dpi.24     Dpi.48\n3 1.006027e-07    *      Sau.0     Sau.24\n4 5.267280e-07    *     Sau.24     Sau.48\n5 4.445144e-03    *      Spn.0     Spn.24\n6 2.516017e-03    *     Spn.24     Spn.48\n                                         group1\n1  &lt;b&gt;&lt;span style='color:#1E90FF;'&gt;0&lt;/span&gt;&lt;/b&gt;\n2 &lt;b&gt;&lt;span style='color:#1E90FF;'&gt;24&lt;/span&gt;&lt;/b&gt;\n3  &lt;b&gt;&lt;span style='color:#800080;'&gt;0&lt;/span&gt;&lt;/b&gt;\n4 &lt;b&gt;&lt;span style='color:#800080;'&gt;24&lt;/span&gt;&lt;/b&gt;\n5  &lt;b&gt;&lt;span style='color:#927ED1;'&gt;0&lt;/span&gt;&lt;/b&gt;\n6 &lt;b&gt;&lt;span style='color:#927ED1;'&gt;24&lt;/span&gt;&lt;/b&gt;\n                                         group2 exp.mean.predval.1\n1 &lt;b&gt;&lt;span style='color:#1E90FF;'&gt;24&lt;/span&gt;&lt;/b&gt;        51772618.35\n2 &lt;b&gt;&lt;span style='color:#1E90FF;'&gt;48&lt;/span&gt;&lt;/b&gt;           49660.37\n3 &lt;b&gt;&lt;span style='color:#800080;'&gt;24&lt;/span&gt;&lt;/b&gt;        12577274.74\n4 &lt;b&gt;&lt;span style='color:#800080;'&gt;48&lt;/span&gt;&lt;/b&gt;           25177.68\n5 &lt;b&gt;&lt;span style='color:#927ED1;'&gt;24&lt;/span&gt;&lt;/b&gt;        36429406.93\n6 &lt;b&gt;&lt;span style='color:#927ED1;'&gt;48&lt;/span&gt;&lt;/b&gt;         1301972.37\n  exp.mean.predval.2         FC highlighted\n1          49660.374 1042.53379           -\n2           2998.134   16.56376           -\n3          25177.682  499.54061           -\n4        8297717.186 -329.56637           +\n5        1301972.375   27.98017           -\n6          33799.051   38.52097           -\n\n$plot_1\n\n\n\n\n\n\n$plot_2\n\n\n\n\n\n\n\n37C (Supplemental Data)\n\nanalysis_function(CFU_data, each_temp = \"37\", cutoff_pvalue = 0.05, cutoff_FC = 1, color_error = \"red3\")\n\n$anova\n               Sum Sq Mean Sq NumDF   DenDF F value  Pr(&gt;F) sign\nbacteria      2.1e+02 1.1e+02     2 9.3e+01 8.8e+00 3.2e-04    *\nTime          7.0e+02 3.5e+02     2 7.6e+01 2.9e+01 3.5e-10    *\nbacteria:Time 5.0e+02 1.3e+02     4 7.6e+01 1.1e+01 7.6e-07    *\n\n$random_effects\n        grp        var1 var2         vcov        sdcor proportion\n1 Line:Date (Intercept) &lt;NA&gt; 2.697102e+00 1.642286e+00      18.41\n2      Line (Intercept) &lt;NA&gt; 1.023565e-14 1.011714e-07       0.00\n3  Residual        &lt;NA&gt; &lt;NA&gt; 1.195395e+01 3.457449e+00      81.59\n\n$contrasts_time\n  Time1 Time2 bacteria  estimate       SE       df    t.ratio      p.value Temp\n1     0    24      Dpi  7.416020 1.411498 75.77751  5.2540080 1.324010e-06   37\n2    24    48      Dpi  5.003889 1.411498 75.77751  3.5450917 6.765527e-04   37\n3     0    24      Sau  3.543578 1.474261 75.77751  2.4036295 1.867823e-02   37\n4    24    48      Sau -3.851043 1.474261 75.77751 -2.6121849 1.084271e-02   37\n5     0    24      Spn  5.692743 1.474261 75.77751  3.8614207 2.356175e-04   37\n6    24    48      Spn -1.027038 1.474261 75.77751 -0.6966457 4.881561e-01   37\n    p.adj.holm sign condition1 condition2\n1 7.944058e-06    *      Dpi.0     Dpi.24\n2 2.706211e-03    *     Dpi.24     Dpi.48\n3 3.735645e-02    *      Sau.0     Sau.24\n4 3.252813e-02    *     Sau.24     Sau.48\n5 1.178087e-03    *      Spn.0     Spn.24\n6 4.881561e-01          Spn.24     Spn.48\n                                         group1\n1  &lt;b&gt;&lt;span style='color:#1E90FF;'&gt;0&lt;/span&gt;&lt;/b&gt;\n2 &lt;b&gt;&lt;span style='color:#1E90FF;'&gt;24&lt;/span&gt;&lt;/b&gt;\n3  &lt;b&gt;&lt;span style='color:#800080;'&gt;0&lt;/span&gt;&lt;/b&gt;\n4 &lt;b&gt;&lt;span style='color:#800080;'&gt;24&lt;/span&gt;&lt;/b&gt;\n5  &lt;b&gt;&lt;span style='color:#927ED1;'&gt;0&lt;/span&gt;&lt;/b&gt;\n6 &lt;b&gt;&lt;span style='color:#927ED1;'&gt;24&lt;/span&gt;&lt;/b&gt;\n                                         group2 exp.mean.predval.1\n1 &lt;b&gt;&lt;span style='color:#1E90FF;'&gt;24&lt;/span&gt;&lt;/b&gt;        62870846.42\n2 &lt;b&gt;&lt;span style='color:#1E90FF;'&gt;48&lt;/span&gt;&lt;/b&gt;           37819.24\n3 &lt;b&gt;&lt;span style='color:#800080;'&gt;24&lt;/span&gt;&lt;/b&gt;        10891104.41\n4 &lt;b&gt;&lt;span style='color:#800080;'&gt;48&lt;/span&gt;&lt;/b&gt;          314858.65\n5 &lt;b&gt;&lt;span style='color:#927ED1;'&gt;24&lt;/span&gt;&lt;/b&gt;        39243107.12\n6 &lt;b&gt;&lt;span style='color:#927ED1;'&gt;48&lt;/span&gt;&lt;/b&gt;          132262.45\n  exp.mean.predval.2          FC highlighted\n1          37819.236 1662.403947           -\n2            253.835  148.991409           -\n3         314858.653   34.590456           -\n4       14811610.669  -47.042095           +\n5         132262.453  296.706331           -\n6         369380.033   -2.792781           +\n\n$plot_1\n\n\n\n\n\n\n$plot_2\n\n\n\n\n\n\n\n\nAnalysis 34 vs. 37\n\n# Function to compare both temps \nanalysis_temps_function &lt;- function(data, cutoff_pvalue, cutoff_FC) {\n  \n  # Make Combined column\n  data_subset &lt;- data %&gt;%\n    mutate(Combined.Temp = interaction(Combined, Temp))\n  \n  # Mixed-effects model with random effects\n  model &lt;- lmer(log2FC ~ Combined * Temp\n                + (1|Line) + (1|Line:Date), \n                data = data_subset)\n  #Anova\n  anova &lt;- anova(model)\n  anova_df &lt;- as.data.frame(anova) %&gt;%\n    mutate(sign = case_when(\n      `Pr(&gt;F)` &lt; cutoff_pvalue ~ \"*\",\n      TRUE ~ \"\")) %&gt;%\n    mutate_if(is.numeric, ~ format(., digits = 2, scientific = TRUE))\n  \n  # Calculate Individual contrasts\n  emmeans_model &lt;- emmeans(model, ~ Combined * Temp)\n  emmeans_Temp &lt;- pairs(emmeans_model, simple = \"Temp\", adjust = \"none\")    \n  \n  # Extract random effects and convert to dataframe (if not singular)\n  random_effects_df &lt;- as.data.frame(VarCorr(model)) %&gt;%\n    mutate(proportion = round(100 * (vcov / sum(vcov)), 2))\n  \n  # Adds predictions based on fixed effects, averaged over random effects. It gives a population estimate\n  data_summary_df &lt;- cbind(data_subset, predval = predict(model,re.form = NA, se.fit = TRUE))\n  data_summary_df &lt;- data_summary_df %&gt;%\n    group_by(Combined.Temp, Temp_label, bacteria_label) %&gt;%\n    summarize(mean.real = mean(log2FC),\n              mean.predval = mean(predval.fit), \n              mean.predval.se = mean(predval.se.fit)) %&gt;%\n    mutate(exp.mean.predval = (mean.predval),\n           max = (mean.predval + 2*mean.predval.se),\n           min = (mean.predval - 2*mean.predval.se))\n  \n  # Extract time contrasts from emmeans_model, convert to dataframe and adjust pvalues\n  contrasts_temp_df &lt;- as.data.frame(summary(emmeans_Temp)) %&gt;%\n    mutate(p.adj.holm = p.adjust(p.value, method = \"holm\")) %&gt;%\n    mutate(sign = case_when(\n      p.adj.holm &lt; cutoff_pvalue ~ \"*\",\n      TRUE ~ \"\"))\n  \n  # Edits to the contrast dataframe to include pvalue brackets in plot\n  contrasts_temp_df &lt;- contrasts_temp_df %&gt;%\n    separate(contrast, into = c(\"Temp1\", \"Temp2\"), sep = \" - \") %&gt;%\n    mutate(Temp1 = sub(\"Temp\", \"\", Temp1),\n           Temp2 = sub(\"Temp\", \"\", Temp2)) %&gt;%\n    mutate(condition1 = paste(Combined, Temp1, sep = \".\"),\n           condition2 = paste(Combined, Temp2, sep = \".\"))\n  \n  # Calculate fold-change values for each contrast\n  contrasts_temp_df &lt;- contrasts_temp_df %&gt;%\n    ungroup() %&gt;%\n    left_join(select(data_summary_df, Combined.Temp, exp.mean.predval), by = join_by(condition1 == Combined.Temp)) %&gt;%\n    left_join(select(data_summary_df, Combined.Temp, exp.mean.predval), by = join_by(condition2 == Combined.Temp), suffix = c(\".1\", \".2\")) %&gt;%\n    mutate(FC = exp.mean.predval.1 / exp.mean.predval.2,\n           FC = if_else(FC &lt; 1, -1 / FC, FC),\n           highlighted = case_when(\n             FC &lt;= -cutoff_FC ~ \"+\",\n             FC &gt;= cutoff_FC ~ \"-\",\n             TRUE ~ \"\")) \n  \n  # Plot with predicted means and standard errors of the estimates\n  plot_2 &lt;- ggplot() +\n    geom_point(data = data_subset, \n               aes(x = interaction(bacteria_label, Temp_label, lex.order = T, sep = \"\"), \n                   y = log2FC, fill = bacteria_label, color = bacteria_label, shape = Line, group = Line), \n               position = position_jitterdodge(dodge.width = 0.7, jitter.width = 0.2),\n               size = 3, alpha = 0.75, stroke = 0.75) +\n    \n    scale_fill_manual(values = c(\"#800080\",\"#800080\",\"#1E90FF\",\"#1E90FF\",\"#927ed1\",\"#927ed1\")) +\n    scale_color_manual(values = c(\"#800080\",\"#800080\",\"#1E90FF\",\"#1E90FF\",\"#927ed1\",\"#927ed1\")) +\n    scale_shape_manual(values = c(21, 22, 24)) +\n    \n    new_scale_color() +\n    \n    geom_point(data = data_summary_df, aes(x = interaction(bacteria_label, Temp_label, lex.order = T, sep = \"\"), color = Temp_label, y = exp.mean.predval), shape = 3, size = 3) +\n    geom_errorbar(data = data_summary_df, aes(x = interaction(bacteria_label, Temp_label, lex.order = T, sep = \"\"), color = Temp_label,\n                                              y = exp.mean.predval,\n                                              ymax = max,\n                                              ymin = min),\n                  width = 0.5) +\n    \n    scale_color_manual(values = c(\"#5b5b5b\", \"red3\")) +\n    \n\n    \n    labs(x = \"Hours post-inoculation / Temp Condition\",\n         y = paste0(\"log2 (final CFUs/inoculum CFUs)\")) +\n    theme_bw() +\n    theme(panel.grid = element_blank(), \n          legend.position = \"none\",\n          text = element_text(size = 20), \n          axis.text.x = element_markdown(), \n          axis.text.y = element_text(color = \"black\"))\n  \n  # Save files\n  ggsave(plot_2, filename = paste0(figures_folder, \"/plotCFU_\", \"34vs37\", \".png\"), width = 8, height = 6)\n  saveRDS(plot_2, file.path(figures_folder, paste0(\"plotCFU_\", \"34vs37\", \".rds\")))\n  write_csv(anova_df, file.path(stats_folder, paste0(\"anova_\", \"34vs37\", \".csv\")))\n  write_csv(random_effects_df, file.path(stats_folder, paste0(\"stats_random_effects_\", \"34vs37\", \".csv\")))\n  write_csv(contrasts_temp_df, file.path(stats_folder, paste0(\"stats_contrasts_\", \"34vs37\", \".csv\")))\n  write_csv(data_summary_df, file.path(stats_folder, paste0(\"stats_summary_\", \"34vs37\", \".csv\")))\n  \n  return(list(\n    anova = anova_df,\n    random_effects = random_effects_df,\n    contrasts_temp = contrasts_temp_df,\n    data_summary = data_summary_df,\n    data_subset = data_subset,\n    plot_2 = plot_2\n  ))\n}\n\n\nanalysis_temps_function(CFU_FC, cutoff_pvalue = 0.05, cutoff_FC = 1)\n\n$anova\n               Sum Sq Mean Sq NumDF   DenDF F value  Pr(&gt;F) sign\nCombined      2.9e+03 5.8e+02     5 1.4e+02 2.5e+01 1.1e-17    *\nTemp          2.0e+00 2.0e+00     1 1.4e+02 8.6e-02 7.7e-01     \nCombined:Temp 3.6e+02 7.1e+01     5 1.4e+02 3.0e+00 1.3e-02    *\n\n$random_effects\n        grp        var1 var2     vcov    sdcor proportion\n1 Line:Date (Intercept) &lt;NA&gt; 18.47029 4.297707      43.76\n2      Line (Intercept) &lt;NA&gt;  0.00000 0.000000       0.00\n3  Residual        &lt;NA&gt; &lt;NA&gt; 23.74133 4.872508      56.24\n\n$contrasts_temp\n  Temp1 Temp2 Combined   estimate       SE       df    t.ratio    p.value\n1    34    37   Dpi.24  0.8564197 1.846359 137.1905  0.4638425 0.64349574\n2    34    37   Sau.24 -3.6317418 1.917861 137.2512 -1.8936420 0.06037720\n3    34    37   Spn.24  3.8756252 1.943445 136.9908  1.9942039 0.04811483\n4    34    37   Dpi.48  4.0255469 1.846359 137.1905  2.1802622 0.03094354\n5    34    37   Sau.48 -0.8231970 1.917861 137.2512 -0.4292267 0.66843128\n6    34    37   Spn.48 -2.8736494 1.943445 136.9908 -1.4786370 0.14153304\n  p.adj.holm sign condition1 condition2\n1  1.0000000       Dpi.24.34  Dpi.24.37\n2  0.2415088       Sau.24.34  Sau.24.37\n3  0.2405741       Spn.24.34  Spn.24.37\n4  0.1856612       Dpi.48.34  Dpi.48.37\n5  1.0000000       Sau.48.34  Sau.48.37\n6  0.4245991       Spn.48.34  Spn.48.37\n                                          Temp_label.1 exp.mean.predval.1\n1 &lt;b&gt;&lt;br&gt;&lt;span style='color:#5b5b5b;'&gt;34 °C&lt;/span&gt;&lt;/b&gt;         -9.4490159\n2 &lt;b&gt;&lt;br&gt;&lt;span style='color:#5b5b5b;'&gt;34 °C&lt;/span&gt;&lt;/b&gt;         -8.6830934\n3 &lt;b&gt;&lt;br&gt;&lt;span style='color:#5b5b5b;'&gt;34 °C&lt;/span&gt;&lt;/b&gt;         -5.2954233\n4 &lt;b&gt;&lt;br&gt;&lt;span style='color:#5b5b5b;'&gt;34 °C&lt;/span&gt;&lt;/b&gt;        -13.4989741\n5 &lt;b&gt;&lt;br&gt;&lt;span style='color:#5b5b5b;'&gt;34 °C&lt;/span&gt;&lt;/b&gt;         -0.3186682\n6 &lt;b&gt;&lt;br&gt;&lt;span style='color:#5b5b5b;'&gt;34 °C&lt;/span&gt;&lt;/b&gt;        -10.5629956\n                                       Temp_label.2 exp.mean.predval.2\n1 &lt;b&gt;&lt;br&gt;&lt;span style='color:red3;'&gt;37 °C&lt;/span&gt;&lt;/b&gt;        -10.3054357\n2 &lt;b&gt;&lt;br&gt;&lt;span style='color:red3;'&gt;37 °C&lt;/span&gt;&lt;/b&gt;         -5.0513516\n3 &lt;b&gt;&lt;br&gt;&lt;span style='color:red3;'&gt;37 °C&lt;/span&gt;&lt;/b&gt;         -9.1710485\n4 &lt;b&gt;&lt;br&gt;&lt;span style='color:red3;'&gt;37 °C&lt;/span&gt;&lt;/b&gt;        -17.5245210\n5 &lt;b&gt;&lt;br&gt;&lt;span style='color:red3;'&gt;37 °C&lt;/span&gt;&lt;/b&gt;          0.5045288\n6 &lt;b&gt;&lt;br&gt;&lt;span style='color:red3;'&gt;37 °C&lt;/span&gt;&lt;/b&gt;         -7.6893462\n         FC highlighted\n1 -1.090636           +\n2  1.718964           -\n3 -1.731882           +\n4 -1.298211           +\n5  1.583241           -\n6  1.373718           -\n\n$data_summary\n# A tibble: 12 × 9\n# Groups:   Combined.Temp, Temp_label [12]\n   Combined.Temp Temp_label                bacteria_label mean.real mean.predval\n   &lt;fct&gt;         &lt;fct&gt;                     &lt;fct&gt;              &lt;dbl&gt;        &lt;dbl&gt;\n 1 Dpi.24.34     &lt;b&gt;&lt;br&gt;&lt;span style='colo… &lt;b&gt;&lt;span styl…   -10.0         -9.45 \n 2 Sau.24.34     &lt;b&gt;&lt;br&gt;&lt;span style='colo… &lt;b&gt;&lt;span styl…    -8.96        -8.68 \n 3 Spn.24.34     &lt;b&gt;&lt;br&gt;&lt;span style='colo… &lt;b&gt;&lt;span styl…    -4.81        -5.30 \n 4 Dpi.48.34     &lt;b&gt;&lt;br&gt;&lt;span style='colo… &lt;b&gt;&lt;span styl…   -14.1        -13.5  \n 5 Sau.48.34     &lt;b&gt;&lt;br&gt;&lt;span style='colo… &lt;b&gt;&lt;span styl…    -0.600       -0.319\n 6 Spn.48.34     &lt;b&gt;&lt;br&gt;&lt;span style='colo… &lt;b&gt;&lt;span styl…   -10.1        -10.6  \n 7 Dpi.24.37     &lt;b&gt;&lt;br&gt;&lt;span style='colo… &lt;b&gt;&lt;span styl…   -10.7        -10.3  \n 8 Sau.24.37     &lt;b&gt;&lt;br&gt;&lt;span style='colo… &lt;b&gt;&lt;span styl…    -5.11        -5.05 \n 9 Spn.24.37     &lt;b&gt;&lt;br&gt;&lt;span style='colo… &lt;b&gt;&lt;span styl…    -8.21        -9.17 \n10 Dpi.48.37     &lt;b&gt;&lt;br&gt;&lt;span style='colo… &lt;b&gt;&lt;span styl…   -17.9        -17.5  \n11 Sau.48.37     &lt;b&gt;&lt;br&gt;&lt;span style='colo… &lt;b&gt;&lt;span styl…     0.444        0.505\n12 Spn.48.37     &lt;b&gt;&lt;br&gt;&lt;span style='colo… &lt;b&gt;&lt;span styl…    -6.73        -7.69 \n# ℹ 4 more variables: mean.predval.se &lt;dbl&gt;, exp.mean.predval &lt;dbl&gt;, max &lt;dbl&gt;,\n#   min &lt;dbl&gt;\n\n$data_subset\n# A tibble: 170 × 10\n   Date     Line  bacteria Combined Temp  Time  bacteria_label Temp_label log2FC\n   &lt;fct&gt;    &lt;fct&gt; &lt;fct&gt;    &lt;fct&gt;    &lt;fct&gt; &lt;fct&gt; &lt;fct&gt;          &lt;fct&gt;       &lt;dbl&gt;\n 1 1/17/20… HNO2… Dpi      Dpi.24   34    24    &lt;b&gt;&lt;span styl… &lt;b&gt;&lt;br&gt;&lt;s… -15.9 \n 2 1/17/20… HNO2… Dpi      Dpi.48   34    48    &lt;b&gt;&lt;span styl… &lt;b&gt;&lt;br&gt;&lt;s… -24.0 \n 3 1/17/20… HNO2… Sau      Sau.24   34    24    &lt;b&gt;&lt;span styl… &lt;b&gt;&lt;br&gt;&lt;s…  -5.92\n 4 1/17/20… HNO2… Sau      Sau.48   34    48    &lt;b&gt;&lt;span styl… &lt;b&gt;&lt;br&gt;&lt;s…  -2.56\n 5 1/17/20… HNO2… Spn      Spn.24   34    24    &lt;b&gt;&lt;span styl… &lt;b&gt;&lt;br&gt;&lt;s…  -2.97\n 6 1/17/20… HNO2… Spn      Spn.48   34    48    &lt;b&gt;&lt;span styl… &lt;b&gt;&lt;br&gt;&lt;s… -22.7 \n 7 1/24/20… HNO9… Dpi      Dpi.24   34    24    &lt;b&gt;&lt;span styl… &lt;b&gt;&lt;br&gt;&lt;s…  -4.98\n 8 1/24/20… HNO9… Dpi      Dpi.48   34    48    &lt;b&gt;&lt;span styl… &lt;b&gt;&lt;br&gt;&lt;s… -10.8 \n 9 1/24/20… HNO9… Spn      Spn.24   34    24    &lt;b&gt;&lt;span styl… &lt;b&gt;&lt;br&gt;&lt;s…  -2.86\n10 1/24/20… HNO9… Spn      Spn.48   34    48    &lt;b&gt;&lt;span styl… &lt;b&gt;&lt;br&gt;&lt;s…  -4.91\n# ℹ 160 more rows\n# ℹ 1 more variable: Combined.Temp &lt;fct&gt;\n\n$plot_2\n\n\n\n\n\n\n\nMerged Summary Files\n\npdf_output &lt;- file.path(figures_folder, \"HNOBac_SummaryCFUs.pdf\")\n\n# Check if the file exists, and delete if it does\nif (file.exists(pdf_output)) {\n  file.remove(pdf_output)\n}\n\n[1] TRUE\n\n# Now combine the PDFs into a new file\npdf_files &lt;- list.files(figures_folder, pattern = \"\\\\.pdf$\", full.names = TRUE)\nqpdf::pdf_combine(input = pdf_files, output = pdf_output)\n\n[1] \"data/outputs/CFUs/figures/HNOBac_SummaryCFUs.pdf\""
  },
  {
    "objectID": "Methods_CFUs_6h.html#data-input-and-selection",
    "href": "Methods_CFUs_6h.html#data-input-and-selection",
    "title": "Bacterial CFUs on epithelia at 6 h",
    "section": "Data Input and Selection",
    "text": "Data Input and Selection\n\nFile Paths\n\n# Folder paths\ninput_path &lt;- \"data/input_data/CFUs/\"\nmetadata_path &lt;- \"data/metadata/CFUs\"\n\n# Create subfolders for output files\ndataframes_folder &lt;- \"data/dataframes\"\nif (!file.exists(\"data/dataframes\")) {\n  dir.create(\"data/dataframes\", recursive = TRUE)\n}\n\n# Load data and metadata\ninput_data &lt;- read_csv(file.path(input_path, \"HNObac_6h.csv\")) %&gt;% mutate_if(is.character, factor)\ninput_data$Time &lt;- as.factor(input_data$Time)\nBac_order &lt;- read_csv(file.path(metadata_path, \"Order_Bacteria_CFUs_6h.csv\"))\n\n\n\nData clean-up\n\n# Setting zero values to the limit of detection\nCFU_data &lt;- input_data %&gt;%\n  mutate(\n    LOD = CFUs == 0,\n    NewCFU = ifelse(LOD, 3.75, CFUs)\n  )\n\n# Factor Ordering and Styling\nCFU_data &lt;- CFU_data %&gt;%\n  filter(Time != 24) \nCFU_data &lt;- merge(CFU_data, Bac_order, by = \"bacteria\") \nCFU_data$bacteria_label &lt;- factor(CFU_data$bacteria_label, levels = Bac_order$bacteria_label)\nCFU_data$Line &lt;- fct_recode(CFU_data$Line, \"HNO918\" = \"A\", \"HNO204\" = \"B\", \"HNO919\" = \"C\") \nCFU_data$Model &lt;- fct_recode(CFU_data$Model, \"HNO\" = \"HNO\", \"Calu-3\" = \"Calu-3\", \"RPMI\" = \"RPMI 2650\") %&gt;%\n  fct_relevel(\"HNO\", \"C\", \"R\")\n\n# Calculate log2 fold change between final time point vs. time 0\nCFU_FC &lt;- CFU_data %&gt;%\n  group_by(Date, Model, Line, bacteria, bacteria_label) %&gt;%\n  reframe(FC = log2(NewCFU[Time == 6]/NewCFU[Time == 0])) %&gt;%\n  mutate(Species.Model = interaction(bacteria, Model, lex.order = T, sep = \".\")) %&gt;%\n  mutate(Species.Model_label = interaction(bacteria_label, Model, lex.order = T, sep = \"&lt;br&gt;\"))\n\n\n\nSaving files\n\n# Save data frame as CSV files in the output folder\nwrite_csv(CFU_data, file.path(dataframes_folder, \"CFU_values_6h.csv\"))\nwrite_csv(CFU_FC, file.path(dataframes_folder, \"CFU_FC_6h.csv\"))\n\n# Save data frame as R objects in the output folder\nsaveRDS(CFU_data, file.path(dataframes_folder, \"CFU_values_6h.rds\"))\nsaveRDS(CFU_FC, file.path(dataframes_folder, \"CFU_FC_6h.rds\"))\n\n# Cleaning-up all objects from the environment\nrm(list = ls())\n\n# Use this to read the final objects\nCFU_data &lt;- readRDS(\"data/dataframes/CFU_values_6h.rds\")\nCFU_FC &lt;- readRDS(\"data/dataframes/CFU_FC_6h.rds\")"
  },
  {
    "objectID": "Methods_CFUs_6h.html#stats-and-plots",
    "href": "Methods_CFUs_6h.html#stats-and-plots",
    "title": "Bacterial CFUs on epithelia at 6 h",
    "section": "Stats and Plots",
    "text": "Stats and Plots\n\nFile Paths\n\n# Folder paths\ndataframes_path &lt;- \"data/dataframes\"\nmetadata_path &lt;- \"data/metadata/CFUs\"\n\n# Create subfolders for output files\nfigures_folder &lt;- \"data/outputs/CFUs/figures\"\nif (!file.exists(\"data/outputs/CFUs/figures\")) {\n  dir.create(\"data/outputs/CFUs/figures\", recursive = TRUE)\n}\nstats_folder &lt;- \"data/outputs/CFUs/stats\"\nif (!file.exists(\"data/outputs/CFUs/stats\")) {\n  dir.create(\"data/outputs/CFUs/stats\", recursive = TRUE)\n}\n\n# Load data and metadata\nCFU_FC &lt;- readRDS(\"data/dataframes/CFU_FC_6h.rds\")\n\n\n# Function to compare Epithelial Lines\nanalysis_celllines_function &lt;- function(data, cutoff_pvalue, cutoff_FC) {\n  \n  # Subset the data if needed\n  data_subset &lt;- data\n  \n  # Mixed-effects model with random effects\n  model &lt;- lmer(FC ~ bacteria * Model\n                + (1|Line) + (1|Line:Date), \n                data = data_subset)\n  #Anova\n  anova &lt;- anova(model)\n  anova_df &lt;- as.data.frame(anova) %&gt;%\n    mutate(sign = case_when(\n      `Pr(&gt;F)` &lt; cutoff_pvalue ~ \"*\",\n      TRUE ~ \"\")) %&gt;%\n    mutate_if(is.numeric, ~ format(., digits = 2, scientific = TRUE))\n  \n  # Calculate Individual contrasts\n  emmeans_model &lt;- emmeans(model, ~ bacteria * Model)\n  emmeans_Model &lt;- pairs(emmeans_model, simple = \"Model\", adjust = \"none\")   \n  \n  # Extract random effects and convert to dataframe (if not singular)\n  random_effects_df &lt;- as.data.frame(VarCorr(model)) %&gt;%\n    mutate(proportion = round(100 * (vcov / sum(vcov)), 2)) \n  \n  # Adds predictions based on fixed effects, averaged over random effects. It gives a population estimate\n  data_subset &lt;- cbind(data_subset, predval = predict(model,re.form = NA, se.fit = TRUE))\n  data_summary_df &lt;- data_subset %&gt;%\n    group_by(Species.Model_label, Species.Model, Model, bacteria) %&gt;%\n    summarize(mean.real = mean(FC),\n              mean.predval = mean(predval.fit), \n              mean.predval.se = mean(predval.se.fit)) %&gt;%\n    mutate(max = mean.predval + 2*mean.predval.se,\n           min = mean.predval - 2*mean.predval.se)\n  \n  # Convert contrasts to dataframe and adjust pvalues.\n  contrasts_df &lt;- as.data.frame(summary(emmeans_Model)) %&gt;%\n    mutate(p.adj.holm = p.adjust(p.value, method = \"holm\")) %&gt;%\n    mutate(sign = case_when(\n      p.adj.holm &lt; 0.05 ~ \"*\",\n      TRUE ~ \"\"))\n  \n  # Edits to the contrast dataframe to include pvalue brackets in plot\n  contrasts_df &lt;- contrasts_df %&gt;%\n    separate(contrast, into = c(\"Model1\", \"Model2\"), sep = \" - \") %&gt;%\n    mutate(Model1 = sub(\"Model\", \"\", Model1),\n           Model2 = sub(\"Model\", \"\", Model2)) %&gt;%\n    mutate(condition1 = paste(bacteria, Model1, sep = \".\"),\n           condition2 = paste(bacteria, Model2, sep = \".\"))\n  \n  # Calculate fold-change values for each contrast\n  contrasts_df &lt;- contrasts_df %&gt;%\n    ungroup() %&gt;%\n    left_join(select(data_summary_df, Species.Model, mean.predval), by = join_by(condition1 == Species.Model)) %&gt;%\n    left_join(select(data_summary_df, Species.Model, mean.predval), by = join_by(condition2 == Species.Model), suffix = c(\".1\", \".2\")) %&gt;%\n    mutate(FC = mean.predval.1 / mean.predval.2,\n           FC = if_else(FC &lt; 1, -1 / FC, FC),\n           highlighted = case_when(\n             FC &lt;= -cutoff_FC ~ \"+\",\n             FC &gt;= cutoff_FC ~ \"-\",\n             TRUE ~ \"\")) \n  \n  # Plot with predicted means and standard errors of the estimates\n  plot_2 &lt;- ggplot() +\n    geom_point(data = data_subset, \n               aes(x = Species.Model_label, y = FC, fill = bacteria_label, color = bacteria_label, shape = Line), \n               position = position_jitterdodge(dodge.width = 0.7, jitter.width = 0.2),\n               size = 3, alpha = 0.75, stroke = 0.75) +\n    \n    scale_fill_manual(values = c(\"#800080\",\"#1E90FF\",\"#927ed1\")) +\n    scale_color_manual(values = c(\"#800080\",\"#1E90FF\",\"#927ed1\")) +\n    scale_shape_manual(values = c(21, 22, 24, 23, 25)) +\n    \n    geom_point(data = data_summary_df, aes(x = Species.Model_label, \n                                           y = mean.predval), shape = 3, size = 3) +\n    geom_errorbar(data = data_summary_df, aes(x = Species.Model_label,\n                                              y = mean.predval,\n                                              ymax = max,\n                                              ymin = min),\n                  width = 0.4) +\n\n    scale_y_continuous(expand = c(0.1,0)) +\n    \n    labs(x = \"\",\n         y = \"log2 (6h CFUs/inoculum CFUs)\",\n         fill = \"Bacteria\", color = \"Bacteria\", shape = \"HNO/Cell Line\") +\n    \n    theme_bw() +\n    theme(panel.grid = element_blank(), \n          legend.text = element_markdown(),\n          text = element_text(size = 20), \n          axis.text.x = element_markdown(), \n          axis.text.y = element_text(color = \"black\"))\n  \n  # Save files\n  ggsave(plot_2, filename = paste0(figures_folder, \"/plotCFU_\", \"HNOvsCells\", \".png\"), width = 7, height = 6)\n  saveRDS(plot_2, file.path(figures_folder, paste0(\"plotCFU_\", \"HNOvsCells\", \".rds\")))\n  write_csv(anova_df, file.path(stats_folder, paste0(\"anova_\", \"HNOvsCells\", \".csv\")))\n  write_csv(random_effects_df, file.path(stats_folder, paste0(\"stats_random_effects\", \"HNOvsCells\", \".csv\")))\n  write_csv(contrasts_df, file.path(stats_folder, paste0(\"stats_contrasts\", \"HNOvsCells\", \".csv\")))\n  write_csv(data_summary_df, file.path(stats_folder, paste0(\"stats_summary\", \"HNOvsCells\", \".csv\")))\n  \n  return(list(\n    anova = anova_df,\n    random_effects = random_effects_df,\n    contrasts = contrasts_df,\n    data_summary = data_summary_df,\n    plot_2 = plot_2\n  ))\n}\n\n\nanalysis_celllines_function(CFU_FC, cutoff_pvalue = 0.05, cutoff_FC = 1)\n\n$anova\n                Sum Sq Mean Sq NumDF   DenDF F value  Pr(&gt;F) sign\nbacteria       5.1e+01 2.6e+01     2 1.8e+01 1.6e+01 1.1e-04    *\nModel          2.1e+01 1.1e+01     2 9.0e+00 6.5e+00 1.8e-02    *\nbacteria:Model 3.5e+01 8.9e+00     4 1.8e+01 5.5e+00 4.6e-03    *\n\n$random_effects\n        grp        var1 var2         vcov        sdcor proportion\n1 Line:Date (Intercept) &lt;NA&gt; 8.239120e-01 9.076960e-01       33.7\n2      Line (Intercept) &lt;NA&gt; 1.958177e-15 4.425129e-08        0.0\n3  Residual        &lt;NA&gt; &lt;NA&gt; 1.620894e+00 1.273143e+00       66.3\n\n$contrasts\n    Model1   Model2 bacteria   estimate       SE       df    t.ratio    p.value\n1      HNO (Calu-3)      Dpi -1.7689085 1.187922 1.224298 -1.4890777 0.34289499\n2      HNO     RPMI      Dpi -0.6034053 1.270784 1.745515 -0.4748290 0.68759918\n3 (Calu-3)     RPMI      Dpi  1.1655033 1.194210 1.059678  0.9759620 0.50031665\n4      HNO (Calu-3)      Sau -1.0677213 1.187922 1.224298 -0.8988142 0.51055683\n5      HNO     RPMI      Sau -1.6321132 1.270784 1.745515 -1.2843352 0.34326190\n6 (Calu-3)     RPMI      Sau -0.5643918 1.194210 1.059678 -0.4726070 0.71536152\n7      HNO (Calu-3)      Spn -3.4261805 1.187922 1.224298 -2.8841791 0.17417683\n8      HNO     RPMI      Spn -6.2490460 1.270784 1.745515 -4.9174714 0.05077755\n9 (Calu-3)     RPMI      Spn -2.8228655 1.194210 1.059678 -2.3637939 0.24338444\n  p.adj.holm sign   condition1   condition2\n1  1.0000000           Dpi.HNO Dpi.(Calu-3)\n2  1.0000000           Dpi.HNO     Dpi.RPMI\n3  1.0000000      Dpi.(Calu-3)     Dpi.RPMI\n4  1.0000000           Sau.HNO Sau.(Calu-3)\n5  1.0000000           Sau.HNO     Sau.RPMI\n6  1.0000000      Sau.(Calu-3)     Sau.RPMI\n7  1.0000000           Spn.HNO Spn.(Calu-3)\n8  0.4569979           Spn.HNO     Spn.RPMI\n9  1.0000000      Spn.(Calu-3)     Spn.RPMI\n                                         Species.Model_label.1 Model.1\n1 &lt;b&gt;&lt;i&gt;&lt;span style='color:#1E90FF;'&gt;Dpi&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;&lt;br&gt;HNO     HNO\n2 &lt;b&gt;&lt;i&gt;&lt;span style='color:#1E90FF;'&gt;Dpi&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;&lt;br&gt;HNO     HNO\n3                                                         &lt;NA&gt;    &lt;NA&gt;\n4 &lt;b&gt;&lt;i&gt;&lt;span style='color:#800080;'&gt;Sau&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;&lt;br&gt;HNO     HNO\n5 &lt;b&gt;&lt;i&gt;&lt;span style='color:#800080;'&gt;Sau&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;&lt;br&gt;HNO     HNO\n6                                                         &lt;NA&gt;    &lt;NA&gt;\n7 &lt;b&gt;&lt;i&gt;&lt;span style='color:#927ED1;'&gt;Spn&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;&lt;br&gt;HNO     HNO\n8 &lt;b&gt;&lt;i&gt;&lt;span style='color:#927ED1;'&gt;Spn&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;&lt;br&gt;HNO     HNO\n9                                                         &lt;NA&gt;    &lt;NA&gt;\n  mean.predval.1                                         Species.Model_label.2\n1     -1.6156653                                                          &lt;NA&gt;\n2     -1.6156653 &lt;b&gt;&lt;i&gt;&lt;span style='color:#1E90FF;'&gt;Dpi&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;&lt;br&gt;RPMI\n3             NA &lt;b&gt;&lt;i&gt;&lt;span style='color:#1E90FF;'&gt;Dpi&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;&lt;br&gt;RPMI\n4      0.8918372                                                          &lt;NA&gt;\n5      0.8918372 &lt;b&gt;&lt;i&gt;&lt;span style='color:#800080;'&gt;Sau&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;&lt;br&gt;RPMI\n6             NA &lt;b&gt;&lt;i&gt;&lt;span style='color:#800080;'&gt;Sau&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;&lt;br&gt;RPMI\n7     -3.9852415                                                          &lt;NA&gt;\n8     -3.9852415 &lt;b&gt;&lt;i&gt;&lt;span style='color:#927ED1;'&gt;Spn&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;&lt;br&gt;RPMI\n9             NA &lt;b&gt;&lt;i&gt;&lt;span style='color:#927ED1;'&gt;Spn&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;&lt;br&gt;RPMI\n  Model.2 mean.predval.2        FC highlighted\n1    &lt;NA&gt;             NA        NA            \n2    RPMI      -1.012260  1.596097           -\n3    RPMI      -1.012260        NA            \n4    &lt;NA&gt;             NA        NA            \n5    RPMI       2.523950 -2.830057           +\n6    RPMI       2.523950        NA            \n7    &lt;NA&gt;             NA        NA            \n8    RPMI       2.263804  0.568047            \n9    RPMI       2.263804        NA            \n\n$data_summary\n# A tibble: 9 × 9\n# Groups:   Species.Model_label, Species.Model, Model [9]\n  Species.Model_label        Species.Model Model bacteria mean.real mean.predval\n  &lt;fct&gt;                      &lt;fct&gt;         &lt;fct&gt; &lt;fct&gt;        &lt;dbl&gt;        &lt;dbl&gt;\n1 &lt;b&gt;&lt;i&gt;&lt;span style='color:… Sau.HNO       HNO   Sau          0.892        0.892\n2 &lt;b&gt;&lt;i&gt;&lt;span style='color:… Sau.Calu-3    Calu… Sau          1.96         1.96 \n3 &lt;b&gt;&lt;i&gt;&lt;span style='color:… Sau.RPMI      RPMI  Sau          2.52         2.52 \n4 &lt;b&gt;&lt;i&gt;&lt;span style='color:… Dpi.HNO       HNO   Dpi         -1.62        -1.62 \n5 &lt;b&gt;&lt;i&gt;&lt;span style='color:… Dpi.Calu-3    Calu… Dpi          0.153        0.153\n6 &lt;b&gt;&lt;i&gt;&lt;span style='color:… Dpi.RPMI      RPMI  Dpi         -1.01        -1.01 \n7 &lt;b&gt;&lt;i&gt;&lt;span style='color:… Spn.HNO       HNO   Spn         -3.99        -3.99 \n8 &lt;b&gt;&lt;i&gt;&lt;span style='color:… Spn.Calu-3    Calu… Spn         -0.559       -0.559\n9 &lt;b&gt;&lt;i&gt;&lt;span style='color:… Spn.RPMI      RPMI  Spn          2.26         2.26 \n# ℹ 3 more variables: mean.predval.se &lt;dbl&gt;, max &lt;dbl&gt;, min &lt;dbl&gt;\n\n$plot_2"
  },
  {
    "objectID": "Methods_LDH.html#data-input-and-selection",
    "href": "Methods_LDH.html#data-input-and-selection",
    "title": "LDH from HNOs at 48h",
    "section": "Data Input and Selection",
    "text": "Data Input and Selection\n\nFile Paths\n\n# Folder paths\ninput_path &lt;- \"data/input_data/LDH/\"\nmetadata_path &lt;- \"data/metadata/LDH\"\n\n# Create subfolders for output files\ndataframes_folder &lt;- \"data/dataframes\"\nif (!file.exists(\"data/dataframes\")) {\n  dir.create(\"data/dataframes\", recursive = TRUE)\n}\n\n# Load data and metadata\ninput_data &lt;- read_excel(file.path(input_path, \"LAK24_0118_LDHData.xlsx\")) %&gt;% mutate_if(is.character, factor)\nBac_order &lt;- read_csv(file.path(metadata_path, \"Order_Bacteria_LDH.csv\"))\n\n\n\nData clean-up\n\n# Filter only samples matched to CFU wells\nLDH_data &lt;- input_data %&gt;% \n  filter(CFUmatched == \"T\")\n\n# Factor Ordering and Styling\nLDH_data &lt;- merge(LDH_data, Bac_order, by = \"Species\") \nLDH_data$bacteria_label &lt;- factor(LDH_data$bacteria_label, levels = Bac_order$bacteria_label)\nLDH_data$Line &lt;- fct_recode(LDH_data$Line, \"HNO918\" = \"A\", \"HNO204\" = \"B\", \"HNO919\" = \"C\") \n\n# Average technical replicates for each individual experiment\nLDH_avg &lt;- LDH_data %&gt;%\n  group_by(Date, Line, Species, bacteria_label, Temp, Well_Endpoint, Collection_Time) %&gt;% \n  summarise(avg_Value = mean(Value)) %&gt;%\n  # Add labels to distinguish final collection times from time 0\n  mutate(Collection_Label = if_else(Collection_Time == 24 | Collection_Time == 48, \"final\", \"initial\"))\n\n# Calculate fold change between final time point vs. time 0\nLDH_FC &lt;- LDH_avg %&gt;%\n  group_by(Date, Line, Species, bacteria_label, Temp, Well_Endpoint) %&gt;%\n  reframe(FC = avg_Value[Collection_Label == \"final\"]/avg_Value[Collection_Label == \"initial\"]) \n\n\n\nSaving files\n\n# Save data frames as CSV files in the output folder\nwrite_csv(LDH_data, file.path(dataframes_folder, \"LDH_values.csv\"))\nwrite_csv(LDH_FC, file.path(dataframes_folder, \"LDH_FC.csv\"))\n\n# Save data frames as R objects in the output folder\nsaveRDS(LDH_data, file.path(dataframes_folder, \"LDH_values.rds\"))\nsaveRDS(LDH_FC, file.path(dataframes_folder, \"LDH_FC.rds\"))\n\n# Cleaning-up all objects from the environment\nrm(list = ls())\n\n# Use this to read the final objects\nLDH_data &lt;- readRDS(\"data/dataframes/LDH_values.rds\")\nLDH_FC &lt;- readRDS(\"data/dataframes/LDH_FC.rds\")"
  },
  {
    "objectID": "Methods_LDH.html#stats-and-plots",
    "href": "Methods_LDH.html#stats-and-plots",
    "title": "LDH from HNOs at 48h",
    "section": "Stats and Plots",
    "text": "Stats and Plots\n\nFile Paths\n\n# Folder paths\ndataframes_path &lt;- \"data/dataframes\"\nmetadata_path &lt;- \"data/metadata/LDH\"\n\n# Create subfolders for output files\nfigures_folder &lt;- \"data/outputs/LDH/figures\"\nif (!file.exists(\"data/outputs/LDH/figures\")) {\n  dir.create(\"data/outputs/LDH/figures\", recursive = TRUE)\n}\nstats_folder &lt;- \"data/outputs/LDH/stats\"\nif (!file.exists(\"data/outputs/LDH/stats\")) {\n  dir.create(\"data/outputs/LDH/stats\", recursive = TRUE)\n}\n\n# Load data and metadata\nLDH_FC &lt;- readRDS(\"data/dataframes/LDH_FC.rds\")\nBac_order &lt;- read_csv(file.path(metadata_path, \"Order_Bacteria_LDH.csv\"))\n\n\n\nAnalysis for each Temp\n\n# Function to analyze each temp condition\nanalysis_function &lt;- function(data, each_temp, each_endpoint, cutoff_pvalue, cutoff_FC, color_error) {\n  \n  # Subset the data to the selected temp\n  data_subset &lt;- data %&gt;%\n    filter(Temp == each_temp) %&gt;%\n    filter(Well_Endpoint == each_endpoint)\n  \n  # Mixed-effects model with random effects\n  model &lt;- lmer(FC ~ Species \n                + (1|Line) + (1|Line:Date), \n                data = data_subset)\n  #Anova\n  anova &lt;- anova(model)\n  anova_df &lt;- as.data.frame(anova) %&gt;%\n    mutate(sign = case_when(\n      `Pr(&gt;F)` &lt; cutoff_pvalue ~ \"*\",\n      TRUE ~ \"\")) %&gt;%\n    mutate_if(is.numeric, ~ format(., digits = 2, scientific = TRUE))\n  \n  # Calculate Individual contrasts\n  emmeans_model &lt;- emmeans(model, ~ Species)\n  emmeans_contrasts &lt;- pairs(emmeans_model, adjust = \"none\")    \n  \n  # Extract random effects and convert to dataframe (if not singular)\n  random_effects_df &lt;- as.data.frame(VarCorr(model)) %&gt;%\n    mutate(proportion = round(100 * (vcov / sum(vcov)), 2)) \n  \n  # Adds predictions based on fixed effects, averaged over random effects. It gives a population estimate\n  data_subset &lt;- cbind(data_subset, predval = predict(model,re.form = NA, se.fit = TRUE))\n  data_summary_df &lt;- data_subset %&gt;%\n    group_by(Species, bacteria_label) %&gt;%\n    summarize(mean.real = mean(FC),\n              mean.predval = mean(predval.fit), \n              mean.predval.se = mean(predval.se.fit)) %&gt;%\n    mutate(max = mean.predval + 2*mean.predval.se,\n           min = mean.predval - 2*mean.predval.se)\n  \n  # Convert contrasts to dataframe and adjust pvalues. Filter contrast to Uncolonized only\n  contrasts_df &lt;- as.data.frame(summary(emmeans_contrasts)) %&gt;%\n    filter(str_detect(contrast, \"Uncolonized\")) %&gt;%\n    mutate(p.adj.holm = p.adjust(p.value, method = \"holm\")) %&gt;%\n    mutate(sign = case_when(\n      p.adj.holm &lt; 0.05 ~ \"*\",\n      TRUE ~ \"\"))\n  \n  # Edits to the contrast dataframe to include pvalue brackets in plot\n  contrasts_df &lt;- contrasts_df %&gt;%\n    separate(contrast, into = c(\"condition1\", \"condition2\"), sep = \" - \", remove = F) \n  \n  contrasts_df$group1 &lt;- Bac_order$bacteria_label[match(contrasts_df$condition1, Bac_order$Species)]\n  contrasts_df$group2 &lt;- Bac_order$bacteria_label[match(contrasts_df$condition2, Bac_order$Species)]\n  \n  # Calculate fold-change values for each contrast\n  contrasts_df &lt;- contrasts_df %&gt;%\n    ungroup() %&gt;%\n    left_join(select(data_summary_df, Species, mean.predval), by = join_by(condition1 == Species)) %&gt;%\n    left_join(select(data_summary_df, Species, mean.predval), by = join_by(condition2 == Species), suffix = c(\".1\", \".2\")) %&gt;%\n    mutate(FC = mean.predval.1 / mean.predval.2,\n           FC = if_else(FC &lt; 1, -1 / FC, FC),\n           highlighted = case_when(\n             FC &lt;= -cutoff_FC ~ \"-\",\n             FC &gt;= cutoff_FC ~ \"+\",\n             TRUE ~ \"\")) \n  \n  # Select p values to plot and define their location\n  contrast_sign &lt;- contrasts_df %&gt;%\n    filter(sign != \"\" & highlighted != \"\") %&gt;%\n    mutate(p.adj.holm = format(p.adj.holm, digits = 2, scientific = TRUE))\n  \n  location &lt;- max(data_subset$FC, na.rm = TRUE) * 1.1\n  \n  # Standard Boxplot\n  plot_1 &lt;- ggplot() +\n    geom_boxplot(data = data_subset, aes(x = bacteria_label, y = FC, fill = bacteria_label)) + \n    \n    geom_jitter(data = data_subset, aes(x = bacteria_label, y = FC, shape = Line), \n                fill = \"grey50\", color = \"grey30\", size = 2, width = 0.05, stroke = 0.75) +\n    \n    scale_fill_manual(values = c(\"grey80\",\"#800080\",\"#1E90FF\",\"#927ed1\")) +\n    scale_shape_manual(values = c(21, 22, 24)) +\n    \n    labs(x = \"\",\n         y = \"Fold change in LDH from -1 hour\") +\n    \n    theme_bw() +\n    theme(panel.grid = element_blank(),\n          legend.position = \"none\",\n          text = element_text(size = 20), \n          axis.text.x = element_markdown(), \n          axis.text.y = element_text(color = \"black\"))\n  \n  # Plot with predicted means and standard errors of the estimates\n  plot_2 &lt;- ggplot() +\n    geom_point(data = data_subset, \n                aes(x = bacteria_label, y = FC, fill = bacteria_label, color = bacteria_label, shape = Line), \n                position = position_jitterdodge(dodge.width = 0.7, jitter.width = 0.2),\n                size = 3, alpha = 0.75, stroke = 0.75) +\n    \n    geom_point(data = data_summary_df, aes(x = bacteria_label, y = mean.predval), shape = 3, size = 3, color = color_error) +\n    geom_errorbar(data = data_summary_df, aes(x = bacteria_label,\n                                              y = mean.predval,\n                                              ymax = max,\n                                              ymin = min),\n                  width = 0.4, color = color_error) +\n    \n    scale_fill_manual(values = c(\"#5b5b5b\",\"#800080\",\"#1E90FF\",\"#927ed1\")) +\n    scale_color_manual(values = c(\"#5b5b5b\",\"#800080\",\"#1E90FF\",\"#927ed1\")) +\n    scale_shape_manual(values = c(21, 22, 24)) +\n    \n    scale_y_continuous(expand = c(0.1,0)) +\n    \n    labs(x = \"\",\n         y = \"Fold change in LDH from -1 hour\",\n         fill = \"Bacteria\", color = \"Bacteria\", shape = \"HNO Line\") +\n    \n    theme_bw() +\n    theme(panel.grid = element_blank(), \n          legend.text = element_markdown(),\n          text = element_text(size = 20), \n          axis.text.x = element_markdown(), \n          axis.text.y = element_text(color = \"black\"))\n  \n  # Conditionally add p-value annotations layer\n  if (nrow(contrast_sign) &gt; 0) {\n    plot_2 &lt;- plot_2 +\n      stat_pvalue_manual(contrast_sign, label = \"p.adj.holm\", y.position = location,\n                         tip.length = 0.02, bracket.shorten = 0.2, vjust = -0.2, bracket.size = 0.3, size = 2.5)\n  } else {\n    plot_2 &lt;- plot_2\n  }\n  \n  # Arrange plot and tables for summary pdf\n  table &lt;- contrasts_df %&gt;%\n    select(condition1, condition2, p.adj.holm, sign, mean.predval.1, mean.predval.2, FC, highlighted) %&gt;%\n    mutate(p.adj.holm = format(p.adj.holm, digits = 2, scientific = TRUE))\n  \n  Tmin &lt;- ttheme_minimal()\n  panel &lt;- ggarrange(plot_1 + theme(plot.margin = unit(c(0.25,0.25,0.25,0.25), \"in\")), \n                     plot_2 + theme(plot.margin = unit(c(0.25,0.25,0.25,0.25), \"in\")),\n                     tableGrob(anova_df, theme = Tmin), \n                     tableGrob(random_effects_df, theme = Tmin, rows = NULL), \n                     tableGrob(table, theme = Tmin, rows = NULL), \n                     ncol = 1, heights = c(0.6, 0.6, 0.1, 0.2, 0.2),\n                     labels = c(\"  Standard Boxplot \", \"Predicted Mean ± 2*SE\", \"    Anova    \", \"Random Effects\", \"   Contrasts  \"))\n  panel &lt;- annotate_figure(panel, top = text_grob(\n    paste0(\"Analysis for \", each_temp, \"C timepoint \", each_endpoint, \" h. P-value: \", cutoff_pvalue, \" and FC: \", cutoff_FC),\n                                                         face = \"bold\", size = 14, color = \"red\"))\n  \n  # Save files\n  ggsave(panel, filename = paste0(figures_folder, \"/summaryLDH_\", each_temp, \"C_\", each_endpoint, \"h.pdf\"), width = 9, height = 14)\n  ggsave(plot_2, filename = paste0(figures_folder, \"/plotLDH_\", each_temp, \"C_\", each_endpoint, \"h.png\"), width = 7, height = 6)\n  saveRDS(plot_2, file.path(figures_folder, paste0(\"plotLDH_\", each_temp, \"C_\", each_endpoint, \"h.rds\")))\n  write_csv(anova_df, file.path(stats_folder, paste0(\"anova_\", each_temp, \"C_\", each_endpoint, \"h.csv\")))\n  write_csv(random_effects_df, file.path(stats_folder, paste0(\"stats_random_effects_\", each_temp, \"C_\", each_endpoint, \"h.csv\")))\n  write_csv(contrasts_df, file.path(stats_folder, paste0(\"stats_contrasts_\", each_temp, \"C_\", each_endpoint, \"h.csv\")))\n  write_csv(data_summary_df, file.path(stats_folder, paste0(\"stats_summary_\", each_temp, \"C_\", each_endpoint, \"h.csv\")))\n  \n  return(list(\n    anova = anova_df,\n    random_effects = random_effects_df,\n    contrasts = contrasts_df,\n    data_summary = data_summary_df,\n    plot_1 = plot_1,\n    plot_2 = plot_2\n  ))\n}\n\n\n34C (Main Data)\n\nanalysis_function(LDH_FC, each_temp = \"34\", each_endpoint = \"48\", cutoff_pvalue = 0.05, cutoff_FC = 1, color_error = \"black\")\n\n$anova\n         Sum Sq Mean Sq NumDF   DenDF F value  Pr(&gt;F) sign\nSpecies 1.9e+02 6.3e+01     3 6.6e+01   4e+00 1.1e-02    *\n\n$random_effects\n        grp        var1 var2       vcov     sdcor proportion\n1 Line:Date (Intercept) &lt;NA&gt;  0.0000000 0.0000000       0.00\n2      Line (Intercept) &lt;NA&gt;  0.3787548 0.6154306       2.36\n3  Residual        &lt;NA&gt; &lt;NA&gt; 15.6531696 3.9564087      97.64\n\n$contrasts\n           contrast condition1  condition2   estimate       SE       df\n1 Dpi - Uncolonized        Dpi Uncolonized  0.5376209 1.261251 51.62153\n2 Sau - Uncolonized        Sau Uncolonized  4.0243686 1.312822 53.38139\n3 Spn - Uncolonized        Spn Uncolonized -0.2551308 1.289533 52.44458\n     t.ratio     p.value p.adj.holm sign\n1  0.4262599 0.671690735 1.00000000     \n2  3.0654325 0.003406184 0.01021855    *\n3 -0.1978474 0.843929327 1.00000000     \n                                                 group1\n1 &lt;i&gt;&lt;b&gt;&lt;span style='color:#1E90FF;'&gt;Dpi&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;\n2 &lt;i&gt;&lt;b&gt;&lt;span style='color:#800080;'&gt;Sau&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;\n3 &lt;i&gt;&lt;b&gt;&lt;span style='color:#927ED1;'&gt;Spn&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;\n                                            group2 mean.predval.1\n1 &lt;b&gt;&lt;span style='color:#5b5b5b;'&gt;Uncol&lt;/span&gt;&lt;/b&gt;       2.147787\n2 &lt;b&gt;&lt;span style='color:#5b5b5b;'&gt;Uncol&lt;/span&gt;&lt;/b&gt;       5.634535\n3 &lt;b&gt;&lt;span style='color:#5b5b5b;'&gt;Uncol&lt;/span&gt;&lt;/b&gt;       1.355036\n  mean.predval.2        FC highlighted\n1       1.610167  1.333891           +\n2       1.610167  3.499349           +\n3       1.610167 -1.188283           -\n\n$data_summary\n# A tibble: 4 × 7\n# Groups:   Species [4]\n  Species    bacteria_label mean.real mean.predval mean.predval.se   max     min\n  &lt;fct&gt;      &lt;fct&gt;              &lt;dbl&gt;        &lt;dbl&gt;           &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;\n1 Dpi        &lt;i&gt;&lt;b&gt;&lt;span s…      2.11         2.15           1.03   4.20  0.0973\n2 Sau        &lt;i&gt;&lt;b&gt;&lt;span s…      5.62         5.63           1.08   7.80  3.47  \n3 Spn        &lt;i&gt;&lt;b&gt;&lt;span s…      1.33         1.36           1.06   3.47 -0.758 \n4 Uncoloniz… &lt;b&gt;&lt;span styl…      1.59         1.61           0.884  3.38 -0.158 \n\n$plot_1\n\n\n\n\n\n\n$plot_2\n\n\n\n\n\n\n\n37C (Supplemental Data)\n\nanalysis_function(LDH_FC, each_temp = \"37\", each_endpoint = \"48\", cutoff_pvalue = 0.05, cutoff_FC = 1, color_error = \"red3\")\n\n$anova\n         Sum Sq Mean Sq NumDF   DenDF F value  Pr(&gt;F) sign\nSpecies 3.4e+01 1.1e+01     3 3.2e+01 4.2e+00 1.3e-02    *\n\n$random_effects\n        grp        var1 var2      vcov     sdcor proportion\n1 Line:Date (Intercept) &lt;NA&gt; 0.1592123 0.3990142       5.63\n2      Line (Intercept) &lt;NA&gt; 0.0000000 0.0000000       0.00\n3  Residual        &lt;NA&gt; &lt;NA&gt; 2.6703268 1.6341135      94.37\n\n$contrasts\n           contrast condition1  condition2   estimate        SE       df\n1 Dpi - Uncolonized        Dpi Uncolonized  0.6737338 0.6154067 36.63814\n2 Sau - Uncolonized        Sau Uncolonized  1.6196034 0.6319761 37.41009\n3 Spn - Uncolonized        Spn Uncolonized -0.7311755 0.6330511 37.41164\n    t.ratio    p.value p.adj.holm sign\n1  1.094778 0.28075888 0.51082708     \n2  2.562761 0.01453752 0.04361255    *\n3 -1.155002 0.25541354 0.51082708     \n                                                 group1\n1 &lt;i&gt;&lt;b&gt;&lt;span style='color:#1E90FF;'&gt;Dpi&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;\n2 &lt;i&gt;&lt;b&gt;&lt;span style='color:#800080;'&gt;Sau&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;\n3 &lt;i&gt;&lt;b&gt;&lt;span style='color:#927ED1;'&gt;Spn&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;\n                                            group2 mean.predval.1\n1 &lt;b&gt;&lt;span style='color:#5b5b5b;'&gt;Uncol&lt;/span&gt;&lt;/b&gt;       2.681271\n2 &lt;b&gt;&lt;span style='color:#5b5b5b;'&gt;Uncol&lt;/span&gt;&lt;/b&gt;       3.627141\n3 &lt;b&gt;&lt;span style='color:#5b5b5b;'&gt;Uncol&lt;/span&gt;&lt;/b&gt;       1.276362\n  mean.predval.2        FC highlighted\n1       2.007537  1.335602           +\n2       2.007537  1.806761           +\n3       2.007537 -1.572859           -\n\n$data_summary\n# A tibble: 4 × 7\n# Groups:   Species [4]\n  Species     bacteria_label  mean.real mean.predval mean.predval.se   max   min\n  &lt;fct&gt;       &lt;fct&gt;               &lt;dbl&gt;        &lt;dbl&gt;           &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 Dpi         &lt;i&gt;&lt;b&gt;&lt;span st…      2.68         2.68           0.485  3.65 1.71 \n2 Sau         &lt;i&gt;&lt;b&gt;&lt;span st…      3.60         3.63           0.507  4.64 2.61 \n3 Spn         &lt;i&gt;&lt;b&gt;&lt;span st…      1.28         1.28           0.506  2.29 0.263\n4 Uncolonized &lt;b&gt;&lt;span style…      2.01         2.01           0.386  2.78 1.24 \n\n$plot_1\n\n\n\n\n\n\n$plot_2\n\n\n\n\n\n\n\n\nAnalysis 34 vs. 37\n\n# Function to compare both temps \nanalysis_temps_function &lt;- function(data, each_endpoint, cutoff_pvalue, cutoff_FC) {\n  \n  # Subset the data to the selected temp\n  data_subset &lt;- data %&gt;%\n    filter(Well_Endpoint == each_endpoint) %&gt;%\n    mutate(Species.Temp = interaction(Species, Temp))\n  \n  # Mixed-effects model with random effects\n  model &lt;- lmer(FC ~ Species * Temp\n                + (1|Line) + (1|Line:Date), \n                data = data_subset)\n  #Anova\n  anova &lt;- anova(model)\n  anova_df &lt;- as.data.frame(anova) %&gt;%\n    mutate(sign = case_when(\n      `Pr(&gt;F)` &lt; cutoff_pvalue ~ \"*\",\n      TRUE ~ \"\")) %&gt;%\n    mutate_if(is.numeric, ~ format(., digits = 2, scientific = TRUE))\n  \n  # Calculate Individual contrasts\n  emmeans_model &lt;- emmeans(model, ~ Species * Temp)\n  emmeans_Temp &lt;- pairs(emmeans_model, simple = \"Temp\", adjust = \"none\")   \n  \n  # Extract random effects and convert to dataframe (if not singular)\n  random_effects_df &lt;- as.data.frame(VarCorr(model)) %&gt;%\n    mutate(proportion = round(100 * (vcov / sum(vcov)), 2)) \n  \n  # Adds predictions based on fixed effects, averaged over random effects. It gives a population estimate\n  data_subset &lt;- cbind(data_subset, predval = predict(model,re.form = NA, se.fit = TRUE))\n  data_summary_df &lt;- data_subset %&gt;%\n    group_by(Species.Temp, Temp, bacteria_label) %&gt;%\n    summarize(mean.real = mean(FC),\n              mean.predval = mean(predval.fit), \n              mean.predval.se = mean(predval.se.fit)) %&gt;%\n    mutate(max = mean.predval + 2*mean.predval.se,\n           min = mean.predval - 2*mean.predval.se)\n  \n  # Convert contrasts to dataframe and adjust pvalues.\n  contrasts_df &lt;- as.data.frame(summary(emmeans_Temp)) %&gt;%\n    mutate(p.adj.holm = p.adjust(p.value, method = \"holm\")) %&gt;%\n    mutate(sign = case_when(\n      p.adj.holm &lt; 0.05 ~ \"*\",\n      TRUE ~ \"\"))\n  \n  # Edits to the contrast dataframe to include pvalue brackets in plot\n  contrasts_df &lt;- contrasts_df %&gt;%\n    separate(contrast, into = c(\"Temp1\", \"Temp2\"), sep = \" - \") %&gt;%\n    mutate(Temp1 = sub(\"Temp\", \"\", Temp1),\n           Temp2 = sub(\"Temp\", \"\", Temp2)) %&gt;%\n    mutate(condition1 = paste(Species, Temp1, sep = \".\"),\n           condition2 = paste(Species, Temp2, sep = \".\"))\n  \n  # Calculate fold-change values for each contrast\n  contrasts_df &lt;- contrasts_df %&gt;%\n    ungroup() %&gt;%\n    left_join(select(data_summary_df, Species.Temp, mean.predval), by = join_by(condition1 == Species.Temp)) %&gt;%\n    left_join(select(data_summary_df, Species.Temp, mean.predval), by = join_by(condition2 == Species.Temp), suffix = c(\".1\", \".2\")) %&gt;%\n    mutate(FC = mean.predval.1 / mean.predval.2,\n           FC = if_else(FC &lt; 1, -1 / FC, FC),\n           highlighted = case_when(\n             FC &lt;= -cutoff_FC ~ \"+\",\n             FC &gt;= cutoff_FC ~ \"-\",\n             TRUE ~ \"\")) \n  \n  # Plot with predicted means and standard errors of the estimates\n  plot_2 &lt;- ggplot() +\n    geom_point(data = data_subset, \n               aes(x = interaction(bacteria_label, Temp, lex.order = T, sep = \"\"), y = FC, fill = bacteria_label, color = bacteria_label, shape = Line), \n               position = position_jitterdodge(dodge.width = 0.7, jitter.width = 0.2),\n               size = 3, alpha = 0.75, stroke = 0.75) +\n    \n    scale_fill_manual(values = c(\"#5b5b5b\",\"#800080\",\"#1E90FF\",\"#927ed1\")) +\n    scale_color_manual(values = c(\"#5b5b5b\",\"#800080\",\"#1E90FF\",\"#927ed1\")) +\n    scale_shape_manual(values = c(21, 22, 24)) +\n    \n    new_scale_color() +\n    \n    geom_point(data = data_summary_df, aes(x = interaction(bacteria_label, Temp, lex.order = T, sep = \"\"), \n                                           color = Temp, y = mean.predval), shape = 3, size = 3) +\n    geom_errorbar(data = data_summary_df, aes(x = interaction(bacteria_label, Temp, lex.order = T, sep = \"\"), color = Temp,\n                                              y = mean.predval,\n                                              ymax = max,\n                                              ymin = min),\n                  width = 0.4) +\n    \n    scale_color_manual(values = c(\"#5b5b5b\", \"red3\")) +\n\n    scale_y_continuous(expand = c(0.1,0)) +\n    \n    labs(x = \"\",\n         y = \"Fold change in LDH from -1 hour\",\n         fill = \"Bacteria\", color = \"Temp\", shape = \"HNO Line\") +\n    \n    theme_bw() +\n    theme(panel.grid = element_blank(), \n          legend.text = element_markdown(),\n          text = element_text(size = 20), \n          axis.text.x = element_markdown(), \n          axis.text.y = element_text(color = \"black\"))\n  \n  # Save files\n  ggsave(plot_2, filename = paste0(figures_folder, \"/plotLDH_\", \"34vs37_\", each_endpoint, \"h.png\"), width = 7, height = 6)\n  saveRDS(plot_2, file.path(figures_folder, paste0(\"plotLDH_\", \"34vs37_\", each_endpoint, \"h.rds\")))\n  write_csv(anova_df, file.path(stats_folder, paste0(\"anova_\", \"34vs37_\", each_endpoint, \"h.csv\")))\n  write_csv(random_effects_df, file.path(stats_folder, paste0(\"stats_random_effects_\", \"34vs37_\", each_endpoint, \"h.csv\")))\n  write_csv(contrasts_df, file.path(stats_folder, paste0(\"stats_contrasts_\", \"34vs37_\", each_endpoint, \"h.csv\")))\n  write_csv(data_summary_df, file.path(stats_folder, paste0(\"stats_summary_\", \"34vs37_\", each_endpoint, \"h.csv\")))\n  \n  return(list(\n    anova = anova_df,\n    random_effects = random_effects_df,\n    contrasts = contrasts_df,\n    data_summary = data_summary_df,\n    plot_2 = plot_2\n  ))\n}\n\n\nanalysis_temps_function(LDH_FC, each_endpoint = \"48\", cutoff_pvalue = 0.05, cutoff_FC = 1)\n\n$anova\n              Sum Sq Mean Sq NumDF   DenDF F value  Pr(&gt;F) sign\nSpecies      1.7e+02 5.7e+01     3 1.2e+02 5.6e+00 1.3e-03    *\nTemp         3.1e+00 3.1e+00     1 1.2e+02 3.0e-01 5.8e-01     \nSpecies:Temp 2.9e+01 9.8e+00     3 1.1e+02 9.6e-01 4.1e-01     \n\n$random_effects\n        grp        var1 var2         vcov        sdcor proportion\n1 Line:Date (Intercept) &lt;NA&gt; 5.750247e-16 2.397967e-08       0.00\n2      Line (Intercept) &lt;NA&gt; 2.940019e-01 5.422194e-01       2.79\n3  Residual        &lt;NA&gt; &lt;NA&gt; 1.023014e+01 3.198458e+00      97.21\n\n$contrasts\n  Temp1 Temp2     Species   estimate        SE        df    t.ratio   p.value\n1    34    37         Dpi -0.5451124 1.2125461 103.51969 -0.4495602 0.6539675\n2    34    37         Sau  2.0672339 1.2748790 100.83523  1.6215138 0.1080304\n3    34    37         Spn  0.1546089 1.2661465 103.56402  0.1221098 0.9030487\n4    34    37 Uncolonized -0.3671386 0.9856734  99.62957 -0.3724749 0.7103305\n  p.adj.holm sign     condition1     condition2 Temp.1 mean.predval.1 Temp.2\n1  1.0000000              Dpi.34         Dpi.37     34       2.139584     37\n2  0.4321215              Sau.34         Sau.37     34       5.627158     37\n3  1.0000000              Spn.34         Spn.37     34       1.336087     37\n4  1.0000000      Uncolonized.34 Uncolonized.37     34       1.600945     37\n  mean.predval.2        FC highlighted\n1       2.684696 -1.254775           +\n2       3.559924  1.580696           -\n3       1.181478  1.130861           -\n4       1.968083 -1.229326           +\n\n$data_summary\n# A tibble: 8 × 8\n# Groups:   Species.Temp, Temp [8]\n  Species.Temp Temp  bacteria_label mean.real mean.predval mean.predval.se   max\n  &lt;fct&gt;        &lt;fct&gt; &lt;fct&gt;              &lt;dbl&gt;        &lt;dbl&gt;           &lt;dbl&gt; &lt;dbl&gt;\n1 Dpi.34       34    &lt;i&gt;&lt;b&gt;&lt;span s…      2.11         2.14           0.838  3.82\n2 Sau.34       34    &lt;i&gt;&lt;b&gt;&lt;span s…      5.62         5.63           0.884  7.39\n3 Spn.34       34    &lt;i&gt;&lt;b&gt;&lt;span s…      1.33         1.34           0.863  3.06\n4 Uncolonized… 34    &lt;b&gt;&lt;span styl…      1.59         1.60           0.725  3.05\n5 Dpi.37       37    &lt;i&gt;&lt;b&gt;&lt;span s…      2.68         2.68           0.975  4.63\n6 Sau.37       37    &lt;i&gt;&lt;b&gt;&lt;span s…      3.60         3.56           1.01   5.59\n7 Spn.37       37    &lt;i&gt;&lt;b&gt;&lt;span s…      1.28         1.18           1.02   3.21\n8 Uncolonized… 37    &lt;b&gt;&lt;span styl…      2.01         1.97           0.799  3.57\n# ℹ 1 more variable: min &lt;dbl&gt;\n\n$plot_2\n\n\n\n\n\n\n\nMerged Summary Files\n\npdf_output &lt;- file.path(figures_folder, \"HNOBac_SummaryLDH.pdf\")\n\n# Check if the file exists, and delete if it does\nif (file.exists(pdf_output)) {\n  file.remove(pdf_output)\n}\n\n[1] TRUE\n\n# Now combine the PDFs into a new file\npdf_files &lt;- list.files(figures_folder, pattern = \"\\\\.pdf$\", full.names = TRUE)\nqpdf::pdf_combine(input = pdf_files, output = pdf_output)\n\n[1] \"data/outputs/LDH/figures/HNOBac_SummaryLDH.pdf\""
  },
  {
    "objectID": "Methods_LDH_6h.html#data-input-and-selection",
    "href": "Methods_LDH_6h.html#data-input-and-selection",
    "title": "LDH from epithelia at 6 h",
    "section": "Data Input and Selection",
    "text": "Data Input and Selection\n\nFile Paths\n\n# Folder paths\ninput_path &lt;- \"data/input_data/LDH/\"\nmetadata_path &lt;- \"data/metadata/LDH\"\n\n# Create subfolders for output files\ndataframes_folder &lt;- \"data/dataframes\"\nif (!file.exists(\"data/dataframes\")) {\n  dir.create(\"data/dataframes\", recursive = TRUE)\n}\n\n# Load data and metadata\ninput_data &lt;- read_excel(file.path(input_path, \"HNObac_6h_LDH.xlsx\")) %&gt;% mutate_if(is.character, factor)\nBac_order &lt;- read_csv(file.path(metadata_path, \"Order_Bacteria_LDH.csv\"))\n\n\n\nData clean-up\n\n# Filter only samples matched to CFU wells\nLDH_data &lt;- input_data %&gt;% \n  filter(CFUmatched == \"T\")\n\n# Factor Ordering and Styling\nLDH_data &lt;- merge(LDH_data, Bac_order, by = \"Species\") \nLDH_data$bacteria_label &lt;- factor(LDH_data$bacteria_label, levels = Bac_order$bacteria_label)\nLDH_data$Line &lt;- fct_recode(LDH_data$Line, \"HNO918\" = \"A\", \"HNO204\" = \"B\", \"HNO919\" = \"C\") \nLDH_data$Model &lt;- fct_recode(LDH_data$Model, \"HNO\" = \"HNO\", \"Calu-3\" = \"Calu-3\", \"RPMI\" = \"RPMI 2650\") %&gt;%\n  fct_relevel(\"HNO\", \"C\", \"R\")\n\n# Average technical replicates for each individual experiment\nLDH_avg &lt;- LDH_data %&gt;%\n  group_by(Date, Model, Line, Species, bacteria_label, Temp, Well_Endpoint, Collection_Time) %&gt;% \n  summarise(avg_Value = mean(Value)) %&gt;%\n  # Add labels to distinguish final collection times from time 0\n  mutate(Collection_Label = if_else(Collection_Time == 6 | Collection_Time == 6, \"final\", \"initial\"))\n\n# Calculate fold change between final time point vs. time 0\nLDH_FC &lt;- LDH_avg %&gt;%\n  group_by(Date, Model, Line, Species, bacteria_label, Temp, Well_Endpoint) %&gt;%\n  reframe(FC = avg_Value[Collection_Label == \"final\"]/avg_Value[Collection_Label == \"initial\"]) %&gt;%\n  mutate(Species.Model = interaction(Species, Model, lex.order = T, sep = \".\")) %&gt;%\n  mutate(Species.Model_label = interaction(bacteria_label, Model, lex.order = T, sep = \"&lt;br&gt;\"))\n\n\n\nSaving files\n\n# Save data frames as CSV files in the output folder\nwrite_csv(LDH_data, file.path(dataframes_folder, \"LDH_values_6h.csv\"))\nwrite_csv(LDH_FC, file.path(dataframes_folder, \"LDH_FC_6h.csv\"))\n\n# Save data frames as R objects in the output folder\nsaveRDS(LDH_data, file.path(dataframes_folder, \"LDH_values_6h.rds\"))\nsaveRDS(LDH_FC, file.path(dataframes_folder, \"LDH_FC_6h.rds\"))\n\n# Cleaning-up all objects from the environment\nrm(list = ls())\n\n# Use this to read the final objects\nLDH_data &lt;- readRDS(\"data/dataframes/LDH_values_6h.rds\")\nLDH_FC &lt;- readRDS(\"data/dataframes/LDH_FC_6h.rds\")"
  },
  {
    "objectID": "Methods_LDH_6h.html#stats-and-plots",
    "href": "Methods_LDH_6h.html#stats-and-plots",
    "title": "LDH from epithelia at 6 h",
    "section": "Stats and Plots",
    "text": "Stats and Plots\n\nFile Paths\n\n# Folder paths\ndataframes_path &lt;- \"data/dataframes\"\nmetadata_path &lt;- \"data/metadata/LDH\"\n\n# Create subfolders for output files\nfigures_folder &lt;- \"data/outputs/LDH/figures\"\nif (!file.exists(\"data/outputs/LDH/figures\")) {\n  dir.create(\"data/outputs/LDH/figures\", recursive = TRUE)\n}\nstats_folder &lt;- \"data/outputs/LDH/stats\"\nif (!file.exists(\"data/outputs/LDH/stats\")) {\n  dir.create(\"data/outputs/LDH/stats\", recursive = TRUE)\n}\n\n# Load data and metadata\nLDH_FC &lt;- readRDS(\"data/dataframes/LDH_FC_6h.rds\")\n\n\n\nAnalysis Epithelial Lines\n\n# Function to compare Epithelial Lines\nanalysis_celllines_function &lt;- function(data, cutoff_pvalue, cutoff_FC) {\n  \n  # Subset the data if needed\n  data_subset &lt;- data\n  \n  # Mixed-effects model with random effects\n  model &lt;- lmer(FC ~ Species * Model\n                + (1|Line) + (1|Line:Date), \n                data = data_subset)\n  #Anova\n  anova &lt;- anova(model)\n  anova_df &lt;- as.data.frame(anova) %&gt;%\n    mutate(sign = case_when(\n      `Pr(&gt;F)` &lt; cutoff_pvalue ~ \"*\",\n      TRUE ~ \"\")) %&gt;%\n    mutate_if(is.numeric, ~ format(., digits = 2, scientific = TRUE))\n  \n  # Calculate Individual contrasts\n  emmeans_model &lt;- emmeans(model, ~ Species * Model)\n  emmeans_Model &lt;- pairs(emmeans_model, simple = \"Model\", adjust = \"none\")   \n  \n  # Extract random effects and convert to dataframe (if not singular)\n  random_effects_df &lt;- as.data.frame(VarCorr(model)) %&gt;%\n    mutate(proportion = round(100 * (vcov / sum(vcov)), 2)) \n  \n  # Adds predictions based on fixed effects, averaged over random effects. It gives a population estimate\n  data_subset &lt;- cbind(data_subset, predval = predict(model,re.form = NA, se.fit = TRUE))\n  data_summary_df &lt;- data_subset %&gt;%\n    group_by(Species.Model_label, Species.Model, Model, bacteria_label) %&gt;%\n    summarize(mean.real = mean(FC),\n              mean.predval = mean(predval.fit), \n              mean.predval.se = mean(predval.se.fit)) %&gt;%\n    mutate(max = mean.predval + 2*mean.predval.se,\n           min = mean.predval - 2*mean.predval.se)\n  \n  # Convert contrasts to dataframe and adjust pvalues.\n  contrasts_df &lt;- as.data.frame(summary(emmeans_Model)) %&gt;%\n    mutate(p.adj.holm = p.adjust(p.value, method = \"holm\")) %&gt;%\n    mutate(sign = case_when(\n      p.adj.holm &lt; 0.05 ~ \"*\",\n      TRUE ~ \"\"))\n  \n  # Edits to the contrast dataframe to include pvalue brackets in plot\n  contrasts_df &lt;- contrasts_df %&gt;%\n    separate(contrast, into = c(\"Model1\", \"Model2\"), sep = \" - \") %&gt;%\n    mutate(Model1 = sub(\"Model\", \"\", Model1),\n           Model2 = sub(\"Model\", \"\", Model2)) %&gt;%\n    mutate(condition1 = paste(Species, Model1, sep = \".\"),\n           condition2 = paste(Species, Model2, sep = \".\"))\n  \n  # Calculate fold-change values for each contrast\n  contrasts_df &lt;- contrasts_df %&gt;%\n    ungroup() %&gt;%\n    left_join(select(data_summary_df, Species.Model, mean.predval), by = join_by(condition1 == Species.Model)) %&gt;%\n    left_join(select(data_summary_df, Species.Model, mean.predval), by = join_by(condition2 == Species.Model), suffix = c(\".1\", \".2\")) %&gt;%\n    mutate(FC = mean.predval.1 / mean.predval.2,\n           FC = if_else(FC &lt; 1, -1 / FC, FC),\n           highlighted = case_when(\n             FC &lt;= -cutoff_FC ~ \"+\",\n             FC &gt;= cutoff_FC ~ \"-\",\n             TRUE ~ \"\")) \n  \n  # Plot with predicted means and standard errors of the estimates\n  plot_2 &lt;- ggplot() +\n    geom_point(data = data_subset, \n               aes(x = Species.Model_label, y = FC, fill = bacteria_label, color = bacteria_label, shape = Line), \n               position = position_jitterdodge(dodge.width = 0.7, jitter.width = 0.2),\n               size = 3, alpha = 0.75, stroke = 0.75) +\n    \n    scale_fill_manual(values = c(\"#5b5b5b\",\"#800080\",\"#1E90FF\",\"#927ed1\")) +\n    scale_color_manual(values = c(\"#5b5b5b\",\"#800080\",\"#1E90FF\",\"#927ed1\")) +\n    scale_shape_manual(values = c(21, 22, 24, 23, 25)) +\n    \n    geom_point(data = data_summary_df, aes(x = Species.Model_label, \n                                           y = mean.predval), shape = 3, size = 3) +\n    geom_errorbar(data = data_summary_df, aes(x = Species.Model_label,\n                                              y = mean.predval,\n                                              ymax = max,\n                                              ymin = min),\n                  width = 0.4) +\n\n    scale_y_continuous(expand = c(0.1,0)) +\n    \n    labs(x = \"\",\n         y = \"Fold change in LDH from -1 hour\",\n         fill = \"Bacteria\", color = \"Bacteria\", shape = \"HNO/Cell Line\") +\n    \n    theme_bw() +\n    theme(panel.grid = element_blank(), \n          legend.text = element_markdown(),\n          text = element_text(size = 20), \n          axis.text.x = element_markdown(), \n          axis.text.y = element_text(color = \"black\"))\n  \n  # Save files\n  ggsave(plot_2, filename = paste0(figures_folder, \"/plotLDH_\", \"HNOvsCells\", \".png\"), width = 7, height = 6)\n  saveRDS(plot_2, file.path(figures_folder, paste0(\"plotLDH_\", \"HNOvsCells\", \".rds\")))\n  write_csv(anova_df, file.path(stats_folder, paste0(\"anova_\", \"HNOvsCells\", \".csv\")))\n  write_csv(random_effects_df, file.path(stats_folder, paste0(\"stats_random_effects\", \"HNOvsCells\", \".csv\")))\n  write_csv(contrasts_df, file.path(stats_folder, paste0(\"stats_contrasts\", \"HNOvsCells\", \".csv\")))\n  write_csv(data_summary_df, file.path(stats_folder, paste0(\"stats_summary\", \"HNOvsCells\", \".csv\")))\n  \n  return(list(\n    anova = anova_df,\n    random_effects = random_effects_df,\n    contrasts = contrasts_df,\n    data_summary = data_summary_df,\n    plot_2 = plot_2\n  ))\n}\n\n\nanalysis_celllines_function(LDH_FC, cutoff_pvalue = 0.05, cutoff_FC = 1)\n\n$anova\n               Sum Sq Mean Sq NumDF   DenDF F value  Pr(&gt;F) sign\nSpecies       9.2e-02 3.1e-02     3 2.7e+01 5.2e+00 5.7e-03    *\nModel         4.5e-02 2.3e-02     2 9.0e+00 3.8e+00 6.2e-02     \nSpecies:Model 7.5e-02 1.2e-02     6 2.7e+01 2.1e+00 8.4e-02     \n\n$random_effects\n        grp        var1 var2         vcov        sdcor proportion\n1 Line:Date (Intercept) &lt;NA&gt; 8.247084e-03 9.081346e-02       58.4\n2      Line (Intercept) &lt;NA&gt; 1.411378e-11 3.756831e-06        0.0\n3  Residual        &lt;NA&gt; &lt;NA&gt; 5.874784e-03 7.664714e-02       41.6\n\n$contrasts\n     Model1   Model2     Species    estimate         SE        df    t.ratio\n1       HNO (Calu-3)         Dpi -0.25630257 0.09257284 0.8138099 -2.7686584\n2       HNO     RPMI         Dpi -0.23022073 0.09872463 1.1654776 -2.3319482\n3  (Calu-3)     RPMI         Dpi  0.02608184 0.09076209 0.7033925  0.2873650\n4       HNO (Calu-3)         Sau -0.18639879 0.09257284 0.8138099 -2.0135365\n5       HNO     RPMI         Sau -0.14811415 0.09872463 1.1654776 -1.5002755\n6  (Calu-3)     RPMI         Sau  0.03828464 0.09076209 0.7033925  0.4218131\n7       HNO (Calu-3)         Spn -0.11118587 0.09257284 0.8138099 -1.2010636\n8       HNO     RPMI         Spn -0.22458378 0.09872463 1.1654776 -2.2748505\n9  (Calu-3)     RPMI         Spn -0.11339791 0.09076209 0.7033925 -1.2493974\n10      HNO (Calu-3) Uncolonized -0.07782702 0.09257284 0.8138099 -0.8407111\n11      HNO     RPMI Uncolonized -0.04814995 0.09872463 1.1654776 -0.4877197\n12 (Calu-3)     RPMI Uncolonized  0.02967707 0.09076209 0.7033925  0.3269765\n     p.value p.adj.holm sign           condition1           condition2\n1  0.2643732          1                   Dpi.HNO         Dpi.(Calu-3)\n2  0.2285556          1                   Dpi.HNO             Dpi.RPMI\n3  0.8357759          1              Dpi.(Calu-3)             Dpi.RPMI\n4  0.3351479          1                   Sau.HNO         Sau.(Calu-3)\n5  0.3484847          1                   Sau.HNO             Sau.RPMI\n6  0.7668712          1              Sau.(Calu-3)             Sau.RPMI\n7  0.4746167          1                   Spn.HNO         Spn.(Calu-3)\n8  0.2343990          1                   Spn.HNO             Spn.RPMI\n9  0.4882296          1              Spn.(Calu-3)             Spn.RPMI\n10 0.5793265          1           Uncolonized.HNO Uncolonized.(Calu-3)\n11 0.7015759          1           Uncolonized.HNO     Uncolonized.RPMI\n12 0.8147842          1      Uncolonized.(Calu-3)     Uncolonized.RPMI\n                                          Species.Model_label.1 Model.1\n1  &lt;i&gt;&lt;b&gt;&lt;span style='color:#1E90FF;'&gt;Dpi&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;&lt;br&gt;HNO     HNO\n2  &lt;i&gt;&lt;b&gt;&lt;span style='color:#1E90FF;'&gt;Dpi&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;&lt;br&gt;HNO     HNO\n3                                                          &lt;NA&gt;    &lt;NA&gt;\n4  &lt;i&gt;&lt;b&gt;&lt;span style='color:#800080;'&gt;Sau&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;&lt;br&gt;HNO     HNO\n5  &lt;i&gt;&lt;b&gt;&lt;span style='color:#800080;'&gt;Sau&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;&lt;br&gt;HNO     HNO\n6                                                          &lt;NA&gt;    &lt;NA&gt;\n7  &lt;i&gt;&lt;b&gt;&lt;span style='color:#927ED1;'&gt;Spn&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;&lt;br&gt;HNO     HNO\n8  &lt;i&gt;&lt;b&gt;&lt;span style='color:#927ED1;'&gt;Spn&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;&lt;br&gt;HNO     HNO\n9                                                          &lt;NA&gt;    &lt;NA&gt;\n10      &lt;b&gt;&lt;span style='color:#5b5b5b;'&gt;Uncol&lt;/span&gt;&lt;/b&gt;&lt;br&gt;HNO     HNO\n11      &lt;b&gt;&lt;span style='color:#5b5b5b;'&gt;Uncol&lt;/span&gt;&lt;/b&gt;&lt;br&gt;HNO     HNO\n12                                                         &lt;NA&gt;    &lt;NA&gt;\n   mean.predval.1                                         Species.Model_label.2\n1       0.8357285                                                          &lt;NA&gt;\n2       0.8357285 &lt;i&gt;&lt;b&gt;&lt;span style='color:#1E90FF;'&gt;Dpi&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;&lt;br&gt;RPMI\n3              NA &lt;i&gt;&lt;b&gt;&lt;span style='color:#1E90FF;'&gt;Dpi&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;&lt;br&gt;RPMI\n4       0.8120503                                                          &lt;NA&gt;\n5       0.8120503 &lt;i&gt;&lt;b&gt;&lt;span style='color:#800080;'&gt;Sau&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;&lt;br&gt;RPMI\n6              NA &lt;i&gt;&lt;b&gt;&lt;span style='color:#800080;'&gt;Sau&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;&lt;br&gt;RPMI\n7       0.8467198                                                          &lt;NA&gt;\n8       0.8467198 &lt;i&gt;&lt;b&gt;&lt;span style='color:#927ED1;'&gt;Spn&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;&lt;br&gt;RPMI\n9              NA &lt;i&gt;&lt;b&gt;&lt;span style='color:#927ED1;'&gt;Spn&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;&lt;br&gt;RPMI\n10      0.8344994                                                          &lt;NA&gt;\n11      0.8344994      &lt;b&gt;&lt;span style='color:#5b5b5b;'&gt;Uncol&lt;/span&gt;&lt;/b&gt;&lt;br&gt;RPMI\n12             NA      &lt;b&gt;&lt;span style='color:#5b5b5b;'&gt;Uncol&lt;/span&gt;&lt;/b&gt;&lt;br&gt;RPMI\n   Model.2 mean.predval.2        FC highlighted\n1     &lt;NA&gt;             NA        NA            \n2     RPMI      1.0659492 -1.275473           +\n3     RPMI      1.0659492        NA            \n4     &lt;NA&gt;             NA        NA            \n5     RPMI      0.9601645 -1.182395           +\n6     RPMI      0.9601645        NA            \n7     &lt;NA&gt;             NA        NA            \n8     RPMI      1.0713036 -1.265240           +\n9     RPMI      1.0713036        NA            \n10    &lt;NA&gt;             NA        NA            \n11    RPMI      0.8826493 -1.057699           +\n12    RPMI      0.8826493        NA            \n\n$data_summary\n# A tibble: 12 × 9\n# Groups:   Species.Model_label, Species.Model, Model [12]\n   Species.Model_label Species.Model Model bacteria_label mean.real mean.predval\n   &lt;fct&gt;               &lt;fct&gt;         &lt;fct&gt; &lt;fct&gt;              &lt;dbl&gt;        &lt;dbl&gt;\n 1 &lt;b&gt;&lt;span style='co… Uncolonized.… HNO   &lt;b&gt;&lt;span styl…     0.834        0.834\n 2 &lt;b&gt;&lt;span style='co… Uncolonized.… Calu… &lt;b&gt;&lt;span styl…     0.912        0.912\n 3 &lt;b&gt;&lt;span style='co… Uncolonized.… RPMI  &lt;b&gt;&lt;span styl…     0.883        0.883\n 4 &lt;i&gt;&lt;b&gt;&lt;span style=… Sau.HNO       HNO   &lt;i&gt;&lt;b&gt;&lt;span s…     0.812        0.812\n 5 &lt;i&gt;&lt;b&gt;&lt;span style=… Sau.Calu-3    Calu… &lt;i&gt;&lt;b&gt;&lt;span s…     0.998        0.998\n 6 &lt;i&gt;&lt;b&gt;&lt;span style=… Sau.RPMI      RPMI  &lt;i&gt;&lt;b&gt;&lt;span s…     0.960        0.960\n 7 &lt;i&gt;&lt;b&gt;&lt;span style=… Dpi.HNO       HNO   &lt;i&gt;&lt;b&gt;&lt;span s…     0.836        0.836\n 8 &lt;i&gt;&lt;b&gt;&lt;span style=… Dpi.Calu-3    Calu… &lt;i&gt;&lt;b&gt;&lt;span s…     1.09         1.09 \n 9 &lt;i&gt;&lt;b&gt;&lt;span style=… Dpi.RPMI      RPMI  &lt;i&gt;&lt;b&gt;&lt;span s…     1.07         1.07 \n10 &lt;i&gt;&lt;b&gt;&lt;span style=… Spn.HNO       HNO   &lt;i&gt;&lt;b&gt;&lt;span s…     0.847        0.847\n11 &lt;i&gt;&lt;b&gt;&lt;span style=… Spn.Calu-3    Calu… &lt;i&gt;&lt;b&gt;&lt;span s…     0.958        0.958\n12 &lt;i&gt;&lt;b&gt;&lt;span style=… Spn.RPMI      RPMI  &lt;i&gt;&lt;b&gt;&lt;span s…     1.07         1.07 \n# ℹ 3 more variables: mean.predval.se &lt;dbl&gt;, max &lt;dbl&gt;, min &lt;dbl&gt;\n\n$plot_2"
  },
  {
    "objectID": "Methods_Cytokines.html#data-input-and-selection",
    "href": "Methods_Cytokines.html#data-input-and-selection",
    "title": "HNO Cytokines",
    "section": "Data Input and Selection",
    "text": "Data Input and Selection\n\nFile Paths\n\n# Folder paths\ninput_path &lt;- \"data/input_data/Cytokines/\"\nmetadata_path &lt;- \"data/metadata/Cytokines\"\n\n# Create subfolders for output files\nanalysis_folder &lt;- \"data/outputs/Cytokines/analysis_log2FC\"\nif (!file.exists(\"data/outputs/Cytokines/analysis_log2FC\")) {\n  dir.create(\"data/outputs/Cytokines/analysis_log2FC\", recursive = TRUE)\n}\ndataframes_folder &lt;- \"data/dataframes\"\nif (!file.exists(\"data/dataframes\")) {\n  dir.create(\"data/dataframes\", recursive = TRUE)\n}\n\n# Load metadata\ninput_data &lt;- read_excel(file.path(metadata_path, \"Sample_List.xlsx\"))\norder_Cyto &lt;- read_csv(file.path(metadata_path, \"Order_Cytokines.csv\")) %&gt;% mutate_if(is.character, factor)\n\n\n\nData input and clean-up\n\n# List all the input files, loop through each file and create a merged dataframe \nfile_list &lt;- list.files(input_path, pattern = \"Detail\\\\.xls$\", full.names = TRUE)\n\nfor (file_path in file_list) {\n  # Read the Excel file and skip the first 3 rows\n  file_data &lt;- read_excel(file_path, sheet = \"Summary\", skip = 3)\n  \n  # Left join with the existing sample_list\n  input_data &lt;- left_join(input_data, file_data, by = \"Analyte  Sample\")\n}\n\n# Rename \"Analyte  Sample\" to avoid issues with spaces in variable names\ninput_data &lt;- input_data %&gt;% \n  rename(\"SampleID\" = \"Analyte  Sample\")\n\n# Pivot the data from wide to long format crating the Cytokine variable\ninput_data_long &lt;- pivot_longer(input_data, \n                         cols = (which(names(input_data) == \"SampleID\") + 1):ncol(input_data),\n                         names_to = \"Cytokine\", values_to = \"value\")\n\n# Identify samples below and above the limit of detection and assign them a concentration value\ninput_data_long &lt;- input_data_long %&gt;%\n  mutate(concentration = if_else(value == \"N/A\", NA, as.numeric(gsub(\"&lt;|↓|&gt;|↑\", \"\", value))),\n         below_LD = if_else(value == \"N/A\" | grepl(\"&lt;|↓\", value), TRUE, FALSE),\n         above_LD = if_else(grepl(\"&gt;|↑\", value), TRUE, FALSE))\n\n# Add columns with a simpler Cytokine name (Cyto) and Category names\ninput_data_long &lt;- left_join(input_data_long, order_Cyto, by = \"Cytokine\")\n\n# Add column with sample type information (NB control vs. bacterial sample)\ninput_data_long &lt;- input_data_long %&gt;% \n  mutate(sample_type = if_else(viability == \"control\", \"control\", \"bacteria\"))\n\n# Get average values for conditions that have technical replicas (control or NB samples)\ninput_data_long &lt;- input_data_long %&gt;% \n  group_by(date, Cyto, Category, location, line, time, bacteria, viability) %&gt;% \n  mutate(concentration_NA = ifelse(below_LD | above_LD, NA, concentration)) %&gt;% \n  mutate(concentration_avg = mean(concentration_NA, na.rm = TRUE)) %&gt;% \n  mutate(concentration_final = ifelse(is.na(concentration_avg), concentration, concentration_avg)) %&gt;% \n  select(-concentration, concentration_NA, concentration_avg) %&gt;%\n  arrange(below_LD, above_LD) %&gt;%\n  distinct(date, Cyto, Category, location, line, time, bacteria, viability, .keep_all = TRUE) %&gt;% \n  ungroup()\n\n# Cleaning up extra columns\ninput_data_long &lt;- input_data_long %&gt;%\n  select(date, Cyto, Category, location, line, time, sample_type, bacteria, viability, concentration_final, below_LD, above_LD) \n\n# Factoring variables with the right levels\ninput_data_long &lt;- input_data_long %&gt;% mutate_if(is.character, factor)\n\ninput_data_long$bacteria &lt;- factor(input_data_long$bacteria, levels = c(\"NB\", \"Dpi\", \"Sau\", \"Spn\"))\ninput_data_long$viability &lt;- factor(input_data_long$viability, levels = c(\"control\", \"live\", \"IRR\"))\ninput_data_long$line &lt;- fct_recode(input_data_long$line, \"HNO204\" = \"B\", \"HNO919\" = \"C\") \ninput_data_long$location &lt;- fct_recode(input_data_long$location, \"Apical\" = \"Ap\", \"Basal\" = \"Baso\")\ninput_data_long$Cyto &lt;- factor(input_data_long$Cyto, levels = rev(order_Cyto$Cyto))\ninput_data_long$Category &lt;- factor(input_data_long$Category, levels = unique(order_Cyto$Category))\n\n# Making new data frame with the 48h time point only\ninput_data_long_t48 &lt;- input_data_long %&gt;% \n  filter(time != 0)\n\n# Calculating log2FC relative to the non-bacteria controls\ninput_data_log2FC &lt;- input_data_long_t48 %&gt;%\n  group_by(date, Cyto, Category, location, line, time) %&gt;%\n  reframe(\n    bacteria = bacteria[sample_type == \"bacteria\"],\n    viability = viability[sample_type == \"bacteria\"],\n    log2FC = log2(concentration_final[sample_type == \"bacteria\"] / concentration_final[sample_type == \"control\"]),\n    log2ctl = log2(concentration_final[sample_type == \"control\"]),\n    below_LD = below_LD[sample_type == \"bacteria\"],\n    above_LD = above_LD[sample_type == \"bacteria\"]\n  )\n\n# Factoring variables with the right levels\ninput_data_log2FC$bacteria &lt;- factor(input_data_log2FC$bacteria, levels = c(\"Dpi\", \"Sau\", \"Spn\"))\n\n# Cleaning-up objects from the environment\nrm(input_data, input_path, metadata_path, file_list, file_path, file_data, order_Cyto)\n\n\n\nSelection of Cyto-location groups\n\nProportion of samples above the detection limit\n\n# Calculate for each Cytokine and Location the proportion of samples above limit of detection\nLD_all &lt;- input_data_long %&gt;%\n  group_by(Cyto, location) %&gt;%\n  summarise(detected_all = 1 - mean(below_LD), .groups = 'drop') \n\n# Same, but without including the time 0h\nLD_48h &lt;- input_data_long %&gt;%\n  filter(time != 0) %&gt;%\n  group_by(Cyto, location) %&gt;%\n  summarise(detected_48 = 1 - mean(below_LD), .groups = 'drop') \n\n# Combine the individual data frames and add label column with combined Cyto and location\nLD &lt;- left_join(LD_all, LD_48h, by = join_by(Cyto, location)) %&gt;%\n  mutate(group_label = paste(Cyto, location, sep = \"_\")) %&gt;%\n  relocate(group_label, .after = location)\n\n# Plot function\nplot_select_function &lt;- function(data, x_var, title) {\n  ggplot(data = data, aes(x = reorder(group_label, {{x_var}}), y = {{x_var}}, fill = location)) +\n    geom_bar(stat = \"identity\", position = position_dodge()) + \n    scale_y_continuous(expand = c(0, 0)) +\n    scale_fill_manual(values = c(\"coral\", \"steelblue1\")) +\n    coord_flip() +\n    labs(title = title, x = \"\", y = \"\") +\n    theme_bw() +\n    theme(panel.grid = element_blank(),\n          text = element_text(size = 10))\n\n}\n\n# Create and arrange plots\np_all &lt;- plot_select_function(LD, detected_all, \"Proportion of samples above detection limit (all pg/mL values)\")\np_48h &lt;- plot_select_function(LD, detected_48, \"Proportion of samples above detection limit (pg/mL values at 48h)\")\n\nLD_Plots &lt;- ggarrange(p_all, p_48h, ncol = 1, common.legend = T)\nggexport(LD_Plots, filename = file.path(analysis_folder, \"LD_Plots.pdf\"), height = 30, width = 10)\n\n\nLD_Plots\n\n\n\n\n\n\nlog2FC range values\n\n# Calculate the range for each log2FC\nrange_log2FC &lt;- input_data_log2FC %&gt;%\n  group_by(Cyto, location) %&gt;%\n  mutate(min = ifelse(is.na(log2FC), 0, min(log2FC, na.rm = TRUE))) %&gt;%\n  mutate(max = max(log2FC, na.rm = TRUE)) %&gt;%\n  mutate(range = max - min) %&gt;%\n  summarise(range = mean(range, na.rm = TRUE), .groups = 'drop')\n\n# Combine the range_log2FC and LD data frames into a summary file used for analysis selection\nselect_summary &lt;- left_join(LD, range_log2FC, by = join_by(Cyto, location)) %&gt;%\n   mutate(group_label = paste(Cyto, location, sep = \"_\"))\n\n# Plot the range in a similar way to the limit of detection\np_range &lt;- plot_select_function(select_summary, range, \"log2FC range\")\nggsave(p_range, filename = file.path(analysis_folder, \"Range_Plot.png\"), height = 8, width = 10)\n\n\np_range\n\n\n\n\n\n\nFiltering/selection thresholds\n\n# Define cut-off values for group rejection and statistical analysis \nselect_summary &lt;- select_summary %&gt;%\n  mutate(group_rejected = as.factor(ifelse(range &lt; 2.5 & detected_48 &lt; 0.25, TRUE, FALSE))) %&gt;%\n  mutate(group_stats = as.factor(ifelse(range &gt; 3, TRUE, FALSE)))\n\n# Plot correlation between range and proportion of detected samples\np_correlation_FC &lt;- ggplot(select_summary, aes(x = range, y = detected_48, color = Cyto, shape = location)) +\n  geom_point(aes(size = group_rejected)) +\n  scale_size_manual(values = c(4, 2)) +\n  geom_point(data = subset(select_summary, group_stats == TRUE), size = 2, color = \"black\") +\n  theme_bw() +\n  theme(panel.grid = element_blank(),\n        text = element_text(size = 10)) +\n  labs(x = \"log2FC range\",\n       y = \"Proportion of samples above detection limit (pg/mL values at 48h)\")\n\nggsave(p_correlation_FC, filename = file.path(analysis_folder, \"LDvsRange_Plot.png\"), height = 8, width = 10)\n\n\nggplotly(p_correlation_FC)\n\n\n\n\nsaveWidget(ggplotly(p_correlation_FC), file.path(analysis_folder, \"LDvsRange_Interactive.html\"), selfcontained = TRUE)\n\n\n# Apply the grouping variables to the raw and log2FC data frames\ninput_data_long_t48 &lt;- left_join(input_data_long_t48, select_summary, by = join_by(Cyto, location))\ninput_data_log2FC &lt;- left_join(input_data_log2FC, select_summary, by = join_by(Cyto, location)) \n\n\n\n\nSaving files\n\n# Save data frames as CSV files in the dataframes folder\nwrite_csv(input_data_long_t48, file.path(dataframes_folder, \"Cyto_values_48h.csv\"))\nwrite_csv(input_data_log2FC, file.path(dataframes_folder, \"Cyto_log2FC_48h.csv\"))\n\n# Save data frames as R objects in the dataframes folder\nsaveRDS(input_data_long_t48, file.path(dataframes_folder, \"Cyto_values_48h.rds\"))\nsaveRDS(input_data_log2FC, file.path(dataframes_folder, \"Cyto_log2FC_48h.rds\"))\n\n# Cleaning-up all objects from the environment\nrm(list = ls())\n\n# Use this to read the final objects\nCyto_values_48h &lt;- readRDS(\"data/dataframes/Cyto_values_48h.rds\")\nCyto_log2FC_48h &lt;- readRDS(\"data/dataframes/Cyto_log2FC_48h.rds\")"
  },
  {
    "objectID": "Methods_Cytokines.html#heatmap",
    "href": "Methods_Cytokines.html#heatmap",
    "title": "HNO Cytokines",
    "section": "Heatmap",
    "text": "Heatmap\n\nlog2FC analysis\n\nFile Paths\n\n# Folder paths\ndataframes_path &lt;- \"data/dataframes\"\nmetadata_path &lt;- \"data/metadata/Cytokines\"\n\n# Load data and metadata\nCyto_log2FC_48h &lt;- readRDS(\"data/dataframes/Cyto_log2FC_48h.rds\")\nBacVia_order &lt;- read_csv(file.path(metadata_path, \"Order_BacteriaViability_FC.csv\"))\nSubsetFig2 &lt;- read_csv(file.path(metadata_path, \"Order_CytokinesFig2.csv\"))\n\n# Create subfolders for output files\nfigures_folder &lt;- \"data/outputs/Cytokines/figures_log2FC\"\nif (!file.exists(\"data/outputs/Cytokines/figures_log2FC\")) {\n  dir.create(\"data/outputs/Cytokines/figures_log2FC\", recursive = TRUE)\n}\n\n\n\nHeatmap plot\n\n# Averaging replicate log2FCs\nAvg_log2FC_Cytos &lt;- Cyto_log2FC_48h %&gt;%\n  group_by(Cyto, Category, location, viability, bacteria, group_rejected) %&gt;%\n  summarize(avg_log2FC = mean(log2FC, na.rm = TRUE), .groups = 'drop') %&gt;%\n  mutate(Bac.Via = paste(bacteria, viability, sep = \".\"))\n\n# Factor Ordering\nAvg_log2FC_Cytos &lt;- merge(Avg_log2FC_Cytos, BacVia_order, by = \"Bac.Via\")\nAvg_log2FC_Cytos$Bac.Via_label &lt;- factor(Avg_log2FC_Cytos$Bac.Via_label, levels = BacVia_order$Bac.Via_label)\n\n# Make new variable with a version of avg_log2FC with NAs if group_rejected is TRUE\nAvg_log2FC_Cytos &lt;- Avg_log2FC_Cytos %&gt;%\n  mutate(value = ifelse(group_rejected == TRUE, NA, avg_log2FC))\n\n\n# Code for heatmap\nplot_heatmap &lt;- function(data) {\n  ggplot(data, aes(x = Cyto, y = Bac.Via_label, fill = value)) +\n    geom_tile(color = \"black\") + \n    facet_grid(location ~ Category , space = \"free\", scales = \"free\") +\n    scale_fill_gradient2(low = \"#009ad1\", high = \"#AD1457\",\n                         mid = \"#fefbea\", na.value = \"grey\",\n                         name = expression(\"Log\" [2]*\"FC\")) +\n    labs(x = \"\", y = \"\") +\n    scale_y_discrete(expand = c(0,0), limits = rev) +\n    scale_x_discrete(expand = c(0,0), limits = rev) +\n    theme_bw() +\n    theme(panel.grid.major = element_blank(),\n          panel.grid.minor = element_blank(),\n          strip.background = element_rect(colour = \"black\", fill = NA),\n          strip.text.y = element_text(angle = -90, hjust = 0.5, size = 14, face = \"bold\"),\n          strip.text.x = element_text(size = 12),\n          axis.text.y = element_markdown(size = 14),\n          axis.text.x = element_text(size = 12, angle = 67, hjust = 1, colour = \"black\"),\n          legend.title = element_text(size = 14),\n          legend.text = element_text(size = 14),\n          panel.spacing = unit(4, 'pt')\n    )\n}\n\n\nheatmap &lt;- plot_heatmap(Avg_log2FC_Cytos)\nheatmap\n\n\n\n\n\n\nSaving files\n\n# Save figures as png\nggsave(plot = heatmap, filename = file.path(figures_folder, \"heatmap.png\"), width = unit(9, \"in\"), height = unit(3.5, \"in\"))\n\n# Save figurse as an R objects\nsaveRDS(heatmap, file.path(figures_folder, \"heatmap.rds\"))\n\n# Cleaning-up all objects from the environment\nrm(list = ls())"
  },
  {
    "objectID": "Methods_Cytokines.html#stats-and-individual-plots",
    "href": "Methods_Cytokines.html#stats-and-individual-plots",
    "title": "HNO Cytokines",
    "section": "Stats and Individual Plots",
    "text": "Stats and Individual Plots\n\npg/mL analysis\n\nFile Paths\n\n# Folder paths\ndataframes_path &lt;- \"data/dataframes\"\nmetadata_path &lt;- \"data/metadata/Cytokines\"\n\n# Load data and metadata\nCyto_values_48h &lt;- readRDS(file.path(dataframes_path, \"Cyto_values_48h.rds\"))\nBacVia_order &lt;- read_csv(file.path(metadata_path, \"Order_BacteriaViability.csv\"))\n\n# Create subfolders for output files\nanalysis_folder &lt;- \"data/outputs/Cytokines/analysis_pgml\"\nif (!file.exists(\"data/outputs/Cytokines/analysis_pgml\")) {\n  dir.create(\"data/outputs/Cytokines/analysis_pgml\", recursive = TRUE)\n}\nfigures_folder &lt;- \"data/outputs/Cytokines/figures_pgml\"\nif (!file.exists(\"data/outputs/Cytokines/figures_pgml\")) {\n  dir.create(\"data/outputs/Cytokines/figures_pgml\", recursive = TRUE)\n}\nstats_folder &lt;- \"data/outputs/Cytokines/stats_pgml\"\nif (!file.exists(\"data/outputs/Cytokines/stats_pgml\")) {\n  dir.create(\"data/outputs/Cytokines/stats_pgml\", recursive = TRUE)\n}\n\n\n# Creating combined variable for bacteria and viability including the NB control. Eliminate rejected grouping.\nStats_values &lt;- Cyto_values_48h %&gt;%\n  mutate(Bac.Via = paste(bacteria, viability, sep = \".\")) %&gt;%\n  filter(group_rejected == FALSE) %&gt;%\n  arrange(desc(range))\n\n# Factor Ordering\nStats_values &lt;- merge(Stats_values, BacVia_order, by = \"Bac.Via\", all.x = TRUE)\nStats_values$Bac.Via &lt;- factor(Stats_values$Bac.Via, levels = BacVia_order$Bac.Via)\nStats_values$Bac.Via_label &lt;- factor(Stats_values$Bac.Via_label, levels = BacVia_order$Bac.Via_label)\n\n\n\nStats function\n\n# Function to analyze each individual Cyto-location group using pg/mL data\nstats_function &lt;- function(values_data, each_group) {\n  \n  # Subset the data\n  data_subset &lt;- values_data %&gt;%\n    filter(group_label == each_group) \n  \n  # First run linear mixed-effects model with random effects\n  model &lt;- lmer(log(concentration_final) ~ Bac.Via \n                + (1|line) + (1|line:date), \n                data = data_subset)\n  \n  # Extract random effects data and convert to dataframe\n  singular = isSingular(model)\n  random_effects_df &lt;- as.data.frame(VarCorr(model)) %&gt;%\n    mutate(proportion = round(100 * (vcov / sum(vcov)), 2)) %&gt;%\n    mutate(singular = singular) %&gt;%\n    mutate(group_label = each_group) \n  \n  # If model is singular, rerun linear mixed-effects model with only date as random effect\n  if (singular) {\n    model &lt;- lmer(log(concentration_final) ~ Bac.Via \n                   + (1|date), \n                  data = data_subset)\n  }\n  \n  # Run ANOVA and extract pvalue\n  anova &lt;- anova(model)\n  Bac.Via_pvalue &lt;- anova$`Pr(&gt;F)`[1]\n  \n  # Generate all individual contrasts without pvalue adjustment\n  emmeans_model &lt;- emmeans(model, ~ Bac.Via)\n  emmeans_contrasts &lt;- pairs(emmeans_model, adjust = \"none\")   \n  \n  # Extract fixed effects coefficients and convert to dataframe\n  fixed_effects_df &lt;- as.data.frame(summary(model)$coefficients) %&gt;%\n    mutate(singular = singular) %&gt;%\n    mutate(group_label = each_group) \n  \n  # Extract individual contrasts from emmeans_model and convert to dataframe. \n  contrasts_df &lt;- as.data.frame(summary(emmeans_contrasts)) %&gt;%\n    mutate(anova_pvalue = Bac.Via_pvalue) %&gt;%\n    mutate(singular = singular) %&gt;%\n    mutate(group_label = each_group)\n  \n  # Adds predictions based on fixed effects, averaged over random effects. It gives a population estimate\n  data_subset &lt;- cbind(data_subset, predval = predict(model,re.form = NA, se.fit = TRUE))\n  \n  # Backtransform the predicted values and CIs\n  transf_preds_df &lt;- data_subset %&gt;% group_by(Bac.Via, group_label) %&gt;%\n    summarise(mean.predval.fit = mean(predval.fit),\n              mean.predval.se.fit = mean(predval.se.fit),\n              mean.concentration = mean(concentration_final),\n              .groups = 'drop') %&gt;%\n    mutate(pconcentration = exp(mean.predval.fit),\n           pconcentration_min = exp(mean.predval.fit - 2*mean.predval.se.fit),\n           pconcentration_max = exp(mean.predval.fit + 2*mean.predval.se.fit),\n           viability = sub(\".*\\\\.\", \"\", Bac.Via))\n  \n  return(list(fixed_effects = fixed_effects_df, \n              random_effects = random_effects_df, \n              contrasts = contrasts_df,\n              transf_preds = transf_preds_df))\n}\n\n\n#Example use for a specific Cytokine-location group\n#each_group = \"IL-1α_Apical\"  \n#stats_function(Stats_values, each_group)\n\n\n# Apply the function to each unique group label and combine results into a list\nstats_list &lt;- map(unique(Stats_values$group_label), function(group) {\n  cat(\"Processing group:\", group, \"\\n\")  # Add this line to print the group name\n  stats_function(Stats_values, group)\n})\n\nProcessing group: IL-13_Basal \nProcessing group: IL-1RN_Basal \n\n\nProcessing group: CCL2_Basal \n\n\nProcessing group: CXCL9_Apical \nProcessing group: IL-6_Basal \nProcessing group: CCL4_Basal \n\n\nProcessing group: CXCL11_Apical \nProcessing group: IL-18_Basal \n\n\nProcessing group: IL-1RN_Apical \nProcessing group: G-CSF_Basal \n\n\nProcessing group: IL-1β_Apical \n\n\nProcessing group: IL-1β_Basal \n\n\nProcessing group: G-CSF_Apical \n\n\nProcessing group: IL-18_Apical \n\n\nProcessing group: CCL2_Apical \nProcessing group: IFN-γ_Apical \n\n\nProcessing group: IL-36β_Apical \n\n\nProcessing group: L-VEGF_Apical \n\n\nProcessing group: CXCL10_Apical \nProcessing group: GM-CSF_Apical \n\n\nProcessing group: CXCL10_Basal \nProcessing group: IL-10_Apical \nProcessing group: TNF_Basal \n\n\nProcessing group: IL-6_Apical \n\n\nProcessing group: MMP-7_Apical \n\n\nProcessing group: TNF_Apical \nProcessing group: GM-CSF_Basal \n\n\nProcessing group: CCL5_Basal \n\n\nProcessing group: CCL20_Apical \nProcessing group: IL-1α_Basal \n\n\nProcessing group: IL-36β_Basal \n\n\nProcessing group: MMP-1_Apical \nProcessing group: CCL20_Basal \nProcessing group: CCL7_Apical \n\n\nProcessing group: MMP-1_Basal \n\n\nProcessing group: MMP-2_Apical \nProcessing group: IL-8_Basal \n\n\nProcessing group: MMP-9_Apical \n\n\nProcessing group: IL-5_Apical \n\n\nProcessing group: IL-8_Apical \nProcessing group: CCL7_Basal \n\n\nProcessing group: IL-1α_Apical \nProcessing group: MMP-10_Basal \nProcessing group: CCL4_Apical \n\n\nProcessing group: CCL5_Apical \n\n\nProcessing group: MMP-9_Basal \n\n\nProcessing group: Eotaxin_Apical \nProcessing group: MMP-7_Basal \n\n\nProcessing group: L-VEGF_Basal \n\n\nProcessing group: CCL19_Basal \nProcessing group: MMP-10_Apical \nProcessing group: IFN-γ_Basal \n\n\nProcessing group: MMP-2_Basal \n\n\nProcessing group: Eotaxin_Basal \nProcessing group: IL-10_Basal \nProcessing group: IL-5_Basal \n\n# Combine all fixed effects dataframes in the list into a single dataframe\nstats_fixed_effects &lt;- bind_rows(map(stats_list, pluck, \"fixed_effects\"))\n\n# Combine all random effects dataframes in the list into a single dataframe\nstats_random_effects &lt;- bind_rows(map(stats_list, pluck, \"random_effects\"))\n\n# Combine all contrasts dataframes in the list into a single dataframe\nstats_contrasts &lt;- bind_rows(map(stats_list, pluck, \"contrasts\"))\n\n# Combine all backtransformed predicted values dataframes in the list into a single dataframe\nstats_transf_preds &lt;- bind_rows(map(stats_list, pluck, \"transf_preds\"))\n\n\nP.value Correction\n\n# Filter rows with NB (controls)\ncontrast_NB &lt;- stats_contrasts %&gt;%\n  filter(str_count(contrast, \"NB.control\") == 1)\n\n# Filter rows with two live bacteria (live vs live)\ncontrast_live_vs_live &lt;- stats_contrasts %&gt;%\n  filter(str_count(contrast, \"live\") == 2)\n\n# Filter rows with one live and one IRR (same bacteria)\ncontrast_same_bacteria &lt;- stats_contrasts %&gt;%\n  filter(str_extract(contrast, \"[A-Za-z]+(?=.live)\") == str_extract(contrast, \"[A-Za-z]+(?=.IRR)\"))\n\n# Combine the filtered dataframes\nstats_contrasts_selection &lt;- bind_rows(contrast_NB, contrast_live_vs_live, contrast_same_bacteria) %&gt;%\n  arrange(group_label)\n\n# Selection of Cyto-Location groups to perform contrast analysis based on anova\nstats_contrasts_selection &lt;- stats_contrasts_selection %&gt;%\n  filter(anova_pvalue &lt; 0.05)\n\n\n# Adjust across all Cyto-Location groups using FDR\nstats_contrasts_selection &lt;- stats_contrasts_selection %&gt;%\n  mutate(adj.p.FDR = p.adjust(p.value, method = \"fdr\")) %&gt;%\n  mutate(sign.FDR = ifelse(adj.p.FDR &lt; 0.05, T, F)) \n\n\n\nP-value and Fold-Change significance added to Contrasts table\n\n# Separate contrast names into 2 groups matching the x axis labels for the individual plots\nstats_contrasts_selection &lt;- stats_contrasts_selection %&gt;%\n  separate(contrast, into = c(\"condition1\", \"condition2\"), sep = \" - \", remove = F) \n\n# Substitute bacteria and viability names with the label versions\nstats_contrasts_selection$group1 &lt;- BacVia_order$Bac.Via_label[match(stats_contrasts_selection$condition1, BacVia_order$Bac.Via)]\nstats_contrasts_selection$group2 &lt;- BacVia_order$Bac.Via_label[match(stats_contrasts_selection$condition2, BacVia_order$Bac.Via)]\n\n# Formatting of the p.value labels\nstats_contrasts_selection &lt;- stats_contrasts_selection %&gt;%\n  mutate(sign = case_when(\n    adj.p.FDR &lt; 0.05 ~ \"*\",\n    TRUE ~ \"\"  \n  ))\nstats_contrasts_selection$adj.p.FDR = format(stats_contrasts_selection$adj.p.FDR, digits = 2, scientific = TRUE) \n\n# Calculate fold-change values for each contrast\nstats_contrasts_selection &lt;- stats_contrasts_selection %&gt;%\n  ungroup() %&gt;%\n  left_join(select(stats_transf_preds, Bac.Via, group_label, pconcentration), by = join_by(group_label == group_label, condition1 == Bac.Via)) %&gt;%\n  left_join(select(stats_transf_preds, Bac.Via, group_label, pconcentration), by = join_by(group_label == group_label, condition2 == Bac.Via), suffix = c(\".1\", \".2\")) %&gt;%\n  mutate(FC = pconcentration.1 / pconcentration.2,\n         FC = if_else(FC &lt; 1, -1 / FC, FC),\n         highlighted = case_when(\n           FC &lt;= -4 ~ \"+\",\n           FC &gt;= 4 ~ \"-\",\n           TRUE ~ \"\")) \n\n\n\n\nPlot function\n\n# Function to plot each individual Cyto-location group using pg/mL data\nplot_function &lt;- function(true_data, stats_data, contrasts, random, each_group) {\n  \n  # Subset data\n  true_data &lt;- true_data %&gt;%\n    filter(group_label == each_group) \n  stats_data &lt;- stats_data %&gt;%\n    filter(group_label == each_group) \n  contrasts &lt;- contrasts %&gt;%\n    filter(group_label == each_group) \n  random &lt;- random %&gt;%\n    filter(group_label == each_group) \n  \n  # Factor Ordering\n  stats_data &lt;- merge(stats_data, BacVia_order, by = \"Bac.Via\") \n  stats_data$Bac.Via_label &lt;- factor(stats_data$Bac.Via_label, levels = BacVia_order$Bac.Via_label)\n\n  # Plot\n  plot &lt;- ggplot() +\n    \n    # True values in pg/mL\n    geom_jitter(data = true_data, \n                aes(x = Bac.Via_label, y = concentration_final, fill = Bac.Via_label, color = Bac.Via_label, shape = line),\n                width = 0.15, size = 3, alpha = 0.75, stroke = 0.75, show.legend = TRUE) +   \n    \n    scale_fill_manual(values = c(\"#5b5b5b\",\"#800080\",\"#1E90FF\",\"#927ed1\",\"#800080\",\"#1E90FF\",\"#927ed1\")) +\n    scale_color_manual(values = c(\"#5b5b5b\",\"#800080\",\"#1E90FF\",\"#927ed1\",\"#800080\",\"#1E90FF\",\"#927ed1\")) +\n    scale_shape_manual(values = c(22,24)) +\n    \n    # Predictions from the model transformed into pg/mL\n    geom_point(data = stats_data, aes(x = Bac.Via_label, y = pconcentration), shape = 3, size = 1) +\n    geom_errorbar(data = stats_data, aes(x = Bac.Via_label,\n                                         y = pconcentration,\n                                         ymin = pconcentration_min,\n                                         ymax = pconcentration_max),\n                  width = .15) +\n    \n    # Add sections for live vs. IRR\n    geom_vline(xintercept = 1.45, colour = \"grey70\", linetype = 'dotted') +\n    geom_vline(xintercept = 4.5, colour = \"grey70\", linetype = 'dotted') +\n    \n    # General style\n    scale_y_log10() +\n    scale_x_discrete(expand = c(0,0.5)) +\n    labs(title = each_group,\n         x = \"\",\n         y = \"pg/mL\",\n         fill = \"Bacteria\", color = \"Bacteria\", shape = \"HNO Line\") +  \n    theme_bw() +\n    theme(panel.grid = element_blank(), \n          legend.text = element_markdown(),\n          text = element_text(size = 12),\n          axis.text.y = element_text(color = \"black\"),\n          axis.text.x = element_markdown()) \n  \n  # Conditionally arrange plot and p-values table if contrasts is not NULL\n  Tmin &lt;- ttheme_minimal()\n  if (!is.null(contrasts) && nrow(contrasts) &gt; 0) {\n    contrasts &lt;- contrasts %&gt;%\n      ungroup() %&gt;%\n      select(contrast, p.value, adj.p.FDR, sign, pconcentration.1, pconcentration.2, FC, highlighted)\n    \n    panel &lt;- ggarrange(plot + theme(plot.margin = unit(c(0.25, 0.25, 0.25, 0.25), \"in\")), \n                       tableGrob(random, theme = Tmin, rows = NULL),\n                       tableGrob(contrasts, theme = Tmin, rows = NULL), \n                       ncol = 1, heights = c(0.5, 0.2, 0.4))\n  } else {\n    panel &lt;- ggarrange(plot + theme(plot.margin = unit(c(0.25, 0.25, 0.25, 0.25), \"in\")), \n                       tableGrob(random, theme = Tmin, rows = NULL),\n                       NULL, \n                       ncol = 1, heights = c(0.5, 0.2, 0.4))\n  }\n  return(list(each_group, plot, panel))\n} \n\n\n#Example use for a specific Cytokine-location group\n#each_group = \"IL-1α_Apical\" \n#plot_function(Stats_values, stats_transf_preds, stats_contrasts_selection, stats_random_effects, each_group)\n\n\nplots_list &lt;- map(unique(Stats_values$group_label), ~plot_function(true_data = Stats_values, stats_data = stats_transf_preds, contrasts = stats_contrasts_selection, random = stats_random_effects, .x))\n\n\n\nSaving files\n\n## Save outputs\nwrite_xlsx(stats_fixed_effects, file.path(stats_folder, \"stats_fixed_effects.xlsx\"))\nwrite_xlsx(stats_random_effects, file.path(stats_folder, \"stats_random_effects.xlsx\"))\nwrite_xlsx(stats_contrasts_selection, file.path(stats_folder, \"stats_contrasts.xlsx\"))\nwrite_xlsx(stats_transf_preds, file.path(stats_folder, \"stats_transf_preds.xlsx\"))\nsaveRDS(stats_contrasts_selection, file.path(stats_folder, \"stats_contrasts.rds\"))\n\n# Save all multiple plots/tables on individual pages of a single pdf\npdf(paste0(figures_folder, \"/Cyto_Boxplots.pdf\"), width = 10, height = 11)\nfor (i in seq_along(plots_list)) {\n  print(plots_list[[i]][3])\n}\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\n\n\n[[1]]\n\ndev.off()\n\nquartz_off_screen \n                2 \n\n# Save all plot figures as an R object\nsaveRDS(plots_list, file.path(figures_folder, \"plots_list.rds\"))\n\n# Cleaning-up all objects from the environment\n#rm(list = ls())"
  },
  {
    "objectID": "Methods_HekBlue.html#data-input-and-selection",
    "href": "Methods_HekBlue.html#data-input-and-selection",
    "title": "HEK-Blue IL-1R",
    "section": "Data Input and Selection",
    "text": "Data Input and Selection\n\nFile Paths\n\n# Folder paths\ninput_path &lt;- \"data/input_data/HekBlue/\"\nmetadata_path &lt;- \"data/metadata/HekBlue\"\n\n# Create subfolders for output files\ndataframes_folder &lt;- \"data/dataframes\"\nif (!file.exists(\"data/dataframes\")) {\n  dir.create(\"data/dataframes\", recursive = TRUE)\n}\noutputs_folder &lt;- \"data/outputs/HekBlue\"\nif (!file.exists(\"data/outputs/HekBlue\")) {\n  dir.create(\"data/outputs/HekBlue\", recursive = TRUE)\n}\n\n# Load data and metadata\nHek_Original &lt;- read_csv(file.path(input_path, \"HekData_IL1R.csv\"))\nBacVia_order &lt;- read_csv(file.path(metadata_path, \"Order_BacteriaViability.csv\"))\n\n\n# Split sample and standards dataframes\ndata_samples &lt;- Hek_Original %&gt;%\n  filter(type == \"sample\")\n\ndata_standards &lt;- Hek_Original %&gt;%\n  filter(type == \"standard\")\n\n# Rename columns\ncolnames(data_standards)[colnames(data_standards) == \"bacteria\"] &lt;- \"STD\"\ncolnames(data_standards)[colnames(data_standards) == \"treatment\"] &lt;- \"pg.ml\"\n\n# Remove extra columns from the standards dataframe\ndata_standards &lt;-\n  select(data_standards,\n         -well,\n         -sample,\n         -line,\n         -time,\n         -location,\n         -viability,\n         -`Analyte Sample`) %&gt;%\n  group_by(STD) \n\n# Select samples at 48h\ndata_samples &lt;- data_samples %&gt;%\n  filter(time == \"48\")\n\n# Variable formatting \ndata_standards$STD &lt;- as.factor(data_standards$STD)\ndata_standards$Abs &lt;- as.numeric(data_standards$Abs)\ndata_standards$pg.ml &lt;- as.numeric(data_standards$pg.ml)\ndata_samples$line &lt;- as.factor(data_samples$line)\ndata_samples$line &lt;- fct_recode(data_samples$line, \"HNO204\" = \"B\", \"HNO919\" = \"C\") \ndata_samples$location &lt;- fct_recode(data_samples$location, \"Apical\" = \"Ap\", \"Basal\" = \"Baso\")"
  },
  {
    "objectID": "Methods_HekBlue.html#standard-curve",
    "href": "Methods_HekBlue.html#standard-curve",
    "title": "HEK-Blue IL-1R",
    "section": "Standard Curve",
    "text": "Standard Curve\n\n# Select standard curve values and log transform so it fits a linear model\ndata_standards &lt;- data_standards %&gt;% \n  filter(STD %in% c(\"STD1\", \"STD2\", \"STD3\", \"STD4\", \"STD5\", \"STD6\")) %&gt;%\n  mutate(log_pg.ml = log10(pg.ml))\n\n\n# Fit a linear model (lm) with \"Abs\" as the dependent variable and \"log_pg.ml\" as the independent variable\nlmStandard &lt;- lm(Abs ~ log_pg.ml, data_standards) \n  \n# Extract coefficients from the linear model\ncoefficients &lt;- lmStandard$coefficients\n\n# Apply linear model coefficients to calculate pg.ml in samples. LOD_pg.ml has a max value of 500\ndata_samples &lt;- data_samples %&gt;%\n  mutate(log_pg.ml = ((Abs - coefficients[1]) / coefficients[2]),\n         pg.ml = 10^(log_pg.ml),\n         LOD_pg.ml = ifelse(pg.ml &gt; 500, 500, pg.ml))\n\n\n# Add column with sample type information (NB control vs. bacterial sample). Calculate averages\ndata_samples_avg &lt;- data_samples %&gt;% \n  mutate(via = ifelse(bacteria == \"NB\", \"control\", viability)) %&gt;%\n  group_by(date, location, line, time, bacteria, via) %&gt;% \n  mutate(concentration_avg = mean(pg.ml, na.rm = TRUE),\n         Bac.Via = interaction(bacteria, via)) %&gt;%\n  distinct(date, location, line, time, bacteria, via, .keep_all = TRUE) %&gt;% \n  ungroup()\n\n\n# Factoring variables with the right levels\ndata_samples_avg &lt;- data_samples_avg %&gt;% mutate_if(is.character, factor)\ndata_samples_avg &lt;- merge(data_samples_avg, BacVia_order, by = \"Bac.Via\")\ndata_samples_avg$Bac.Via &lt;- factor(data_samples_avg$Bac.Via, levels = BacVia_order$Bac.Via)\ndata_samples_avg$Bac.Via_label &lt;- factor(data_samples_avg$Bac.Via_label, levels = BacVia_order$Bac.Via_label)\n\n\nPlot\n\n# Extract coefficients and R-squared value\nlm_eq &lt;- paste(\"y =\", round(coef(lmStandard)[2], 2), \"x +\", round(coef(lmStandard)[1], 2))\nr_squared &lt;- round(summary(lmStandard)$r.squared, 3)\n\n# Create the ggplot object\npg.ml_plot &lt;- ggplot(data_standards, aes(x = log_pg.ml, y = Abs)) +\n  geom_point() +\n  geom_smooth(method = \"lm\", se = FALSE, color = \"black\", linetype = \"dotted\", linewidth = 0.8) +\n  geom_point(data = data_samples_avg, aes(x = log_pg.ml, y = Abs), color = \"pink\") +\n  labs(x = \"log pg/mL\", y = \"Abs\") +\n  ggtitle(\"Standard Curve with sample data\") +\n  geom_text(x = min(data_samples_avg$log_pg.ml), y = max(data_samples_avg$Abs), \n            label = paste(\"Equation: \", lm_eq, \"\\nR-squared: \", r_squared), \n            hjust = 0, vjust = 1, color = \"black\") +\n  theme_bw() +\n  theme(panel.grid = element_blank(),\n        text = element_text(size = 14))\n\npg.ml_plot"
  },
  {
    "objectID": "Methods_HekBlue.html#saving-files",
    "href": "Methods_HekBlue.html#saving-files",
    "title": "HEK-Blue IL-1R",
    "section": "Saving files",
    "text": "Saving files\n\n# Save data frames as CSV files in the dataframes folder\nwrite_csv(data_samples_avg, file.path(dataframes_folder, \"HekBlue_values.csv\"))\n\n# Save data frames as R objects in the dataframes folder\nsaveRDS(data_samples_avg, file.path(dataframes_folder, \"HekBlue_values.rds\"))\n\n# Use this to read the final objects\ndata_samples_avg &lt;- readRDS(\"data/dataframes/HekBlue_values.rds\")"
  },
  {
    "objectID": "Methods_HekBlue.html#results-plots",
    "href": "Methods_HekBlue.html#results-plots",
    "title": "HEK-Blue IL-1R",
    "section": "Results Plots",
    "text": "Results Plots\n\nFunction for each location\n\n# Function to analyze each location\nanalysis_function &lt;- function(data, each_location) {\n  \n  # Subset the data to the selected location\n  data_subset &lt;- data %&gt;%\n    filter(location == each_location) \n  \n  #Plot\n  plot &lt;- ggplot() +\n    geom_hline(yintercept = 500, linetype = \"dashed\", color = \"gray\", size = 1) +\n    \n    geom_jitter(data = data_subset, \n               aes(x = Bac.Via_label, y = LOD_pg.ml, fill = Bac.Via_label, color = Bac.Via_label, shape = line),\n               width = 0.4, size = 3, alpha = 0.75, show.legend = TRUE) +   \n    \n    scale_fill_manual(values = c(\"#5b5b5b\",\"#800080\",\"#1E90FF\",\"#927ed1\",\"#800080\",\"#1E90FF\",\"#927ed1\")) +\n    scale_color_manual(values = c(\"#5b5b5b\",\"#800080\",\"#1E90FF\",\"#927ed1\",\"#800080\",\"#1E90FF\",\"#927ed1\")) +\n    scale_shape_manual(values = c(22,24)) +\n    \n    # Add sections for live vs. IRR\n    geom_segment(aes(x = 1.45 , y = Inf, xend = 1.45, yend = -90), colour = \"grey70\", linetype = 'dotted') +\n    geom_segment(aes(x = 4.5 , y = Inf, xend = 4.45, yend = -90), colour = \"grey70\", linetype = 'dotted') +\n    annotate(\"text\", \n             x = seq(1, 7, length.out = 7), y = -80,\n             size = 5,\n             label = c(\"\", \"\", \"Live\", \"\", \"\", \"Dead\", \"\")) +\n    \n    coord_cartesian(ylim = c(0, NA), clip = \"off\") +\n    \n    # General style\n    labs(title = paste0(each_location),\n         x = \"\",\n         y = \"pg/mL active IL-1α & IL-1β\",\n         fill = \"Bacteria\", color = \"Bacteria\", shape = \"HNO Line\") +\n    theme_bw() +\n    theme(panel.grid = element_blank(), \n          legend.text = element_markdown(),\n          text = element_text(size = 20), \n          axis.text.y = element_text(color = \"black\"), \n          axis.text.x = element_markdown(angle = 0))\n  \n  # Save files\n  ggsave(plot, filename = paste0(outputs_folder, \"/plotHekBlue_\", each_location, \".png\"), width = 11, height = 10)\n  saveRDS(plot, file.path(outputs_folder, paste0(\"plotHekBlue_\", each_location, \".rds\")))\n  \n  return(plot = plot)\n}\n\n\n\nApply to each location\n\nApical\n\nanalysis_function(data_samples_avg, each_location = \"Apical\")\n\n\n\n\n\n\nBasal\n\nanalysis_function(data_samples_avg, each_location = \"Basal\")"
  },
  {
    "objectID": "RSession.html",
    "href": "RSession.html",
    "title": "R Session Info",
    "section": "",
    "text": "# List of all used packages\nlibrary(tidyverse)\nlibrary(ggpubr)\nlibrary(ggtext)\nlibrary(scales)\nlibrary(lme4)\nlibrary(afex)\nlibrary(emmeans)\nlibrary(gridExtra)\nlibrary(readxl)\nlibrary(writexl)\nlibrary(ggnewscale)\nlibrary(plotly)\nlibrary(htmlwidgets)\nlibrary(magrittr)\nlibrary(DESeq2)\n\n\nsessionInfo()\n\nR version 4.4.0 (2024-04-24)\nPlatform: aarch64-apple-darwin20\nRunning under: macOS Sonoma 14.6.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.12.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats4    stats     graphics  grDevices utils     datasets  methods  \n[8] base     \n\nother attached packages:\n [1] DESeq2_1.44.0               SummarizedExperiment_1.34.0\n [3] Biobase_2.64.0              MatrixGenerics_1.16.0      \n [5] matrixStats_1.4.1           GenomicRanges_1.56.1       \n [7] GenomeInfoDb_1.40.1         IRanges_2.38.1             \n [9] S4Vectors_0.42.1            BiocGenerics_0.50.0        \n[11] magrittr_2.0.3              htmlwidgets_1.6.4          \n[13] plotly_4.10.4               ggnewscale_0.5.0           \n[15] writexl_1.5.0               readxl_1.4.3               \n[17] gridExtra_2.3               emmeans_1.10.4             \n[19] afex_1.4-1                  lme4_1.1-35.5              \n[21] Matrix_1.7-0                scales_1.3.0               \n[23] ggtext_0.1.2                ggpubr_0.6.0               \n[25] lubridate_1.9.3             forcats_1.0.0              \n[27] stringr_1.5.1               dplyr_1.1.4                \n[29] purrr_1.0.2                 readr_2.1.5                \n[31] tidyr_1.3.1                 tibble_3.2.1               \n[33] ggplot2_3.5.1               tidyverse_2.0.0            \n\nloaded via a namespace (and not attached):\n [1] sandwich_3.1-1          rlang_1.1.4             multcomp_1.4-26        \n [4] compiler_4.4.0          vctrs_0.6.5             reshape2_1.4.4         \n [7] crayon_1.5.3            pkgconfig_2.0.3         fastmap_1.2.0          \n[10] backports_1.5.0         XVector_0.44.0          utf8_1.2.4             \n[13] rmarkdown_2.28          tzdb_0.4.0              UCSC.utils_1.0.0       \n[16] nloptr_2.1.1            xfun_0.47               zlibbioc_1.50.0        \n[19] jsonlite_1.8.8          DelayedArray_0.30.1     BiocParallel_1.38.0    \n[22] broom_1.0.6             parallel_4.4.0          R6_2.5.1               \n[25] stringi_1.8.4           car_3.1-2               boot_1.3-31            \n[28] cellranger_1.1.0        numDeriv_2016.8-1.1     estimability_1.5.1     \n[31] Rcpp_1.0.13             knitr_1.48              zoo_1.8-12             \n[34] splines_4.4.0           timechange_0.3.0        tidyselect_1.2.1       \n[37] rstudioapi_0.16.0       abind_1.4-5             yaml_2.3.10            \n[40] codetools_0.2-20        lattice_0.22-6          lmerTest_3.1-3         \n[43] plyr_1.8.9              withr_3.0.1             coda_0.19-4.1          \n[46] evaluate_0.24.0         survival_3.7-0          xml2_1.3.6             \n[49] pillar_1.9.0            carData_3.0-5           generics_0.1.3         \n[52] hms_1.1.3               munsell_0.5.1           minqa_1.2.8            \n[55] xtable_1.8-4            glue_1.7.0              lazyeval_0.2.2         \n[58] tools_4.4.0             data.table_1.16.0       locfit_1.5-9.10        \n[61] ggsignif_0.6.4          mvtnorm_1.3-1           grid_4.4.0             \n[64] colorspace_2.1-1        nlme_3.1-166            GenomeInfoDbData_1.2.12\n[67] cli_3.6.3               fansi_1.0.6             S4Arrays_1.4.1         \n[70] viridisLite_0.4.2       gtable_0.3.5            rstatix_0.7.2          \n[73] digest_0.6.37           SparseArray_1.4.8       TH.data_1.1-2          \n[76] htmltools_0.5.8.1       lifecycle_1.0.4         httr_1.4.7             \n[79] gridtext_0.1.5          MASS_7.3-61"
  }
]