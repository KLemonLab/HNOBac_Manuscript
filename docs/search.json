[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "HNOBac Manuscript",
    "section": "",
    "text": "Introduction\nThis repository includes Supplemental Methods for the manuscript “XXXXXXXXXXXXXX”.\n\n\n\n\n\n\nImportant\n\n\n\nAfter Publication\nAdd link to the corresponding manuscript."
  },
  {
    "objectID": "Methods_Cytokines.html#data-input-and-selection",
    "href": "Methods_Cytokines.html#data-input-and-selection",
    "title": "Cytokines",
    "section": "Data Input and Selection",
    "text": "Data Input and Selection\n\nFile Paths\n\n# Folder paths\ninput_path &lt;- \"data/input_data/Cytokines/\"\nmetadata_path &lt;- \"data/metadata/Cytokines\"\n\n# Create subfolders for output files\nanalysis_folder &lt;- \"data/outputs/Cytokines/analysis_log2FC\"\nif (!file.exists(\"data/outputs/Cytokines/analysis_log2FC\")) {\n  dir.create(\"data/outputs/Cytokines/analysis_log2FC\", recursive = TRUE)\n}\ndataframes_folder &lt;- \"data/dataframes\"\nif (!file.exists(\"data/dataframes\")) {\n  dir.create(\"data/dataframes\", recursive = TRUE)\n}\n\n# Load metadata\ninput_data &lt;- read_excel(file.path(metadata_path, \"Sample_List.xlsx\"))\norder_Cyto &lt;- read_csv(file.path(metadata_path, \"Order_Cytokines.csv\")) %&gt;% mutate_if(is.character, factor)\n\n\n\nData input and clean-up\n\n# List all the input files, loop through each file and create a merged dataframe \nfile_list &lt;- list.files(input_path, pattern = \"Detail\\\\.xls$\", full.names = TRUE)\n\nfor (file_path in file_list) {\n  # Read the Excel file and skip the first 3 rows\n  file_data &lt;- read_excel(file_path, sheet = \"Summary\", skip = 3)\n  \n  # Left join with the existing sample_list\n  input_data &lt;- left_join(input_data, file_data, by = \"Analyte  Sample\")\n}\n\n# Rename \"Analyte  Sample\" to avoid issues with spaces in variable names\ninput_data &lt;- input_data %&gt;% \n  rename(\"SampleID\" = \"Analyte  Sample\")\n\n# Pivot the data from wide to long format crating the Cytokine variable\ninput_data_long &lt;- pivot_longer(input_data, \n                         cols = (which(names(input_data) == \"SampleID\") + 1):ncol(input_data),\n                         names_to = \"Cytokine\", values_to = \"value\")\n\n# Identify samples below and above the limit of detection and assign them a concentration value\ninput_data_long &lt;- input_data_long %&gt;%\n  mutate(concentration = if_else(value == \"N/A\", NA, as.numeric(gsub(\"&lt;|↓|&gt;|↑\", \"\", value))),\n         below_LD = if_else(value == \"N/A\" | grepl(\"&lt;|↓\", value), TRUE, FALSE),\n         above_LD = if_else(grepl(\"&gt;|↑\", value), TRUE, FALSE))\n\n# Add columns with a simpler Cytokine name (Cyto) and Category names\ninput_data_long &lt;- left_join(input_data_long, order_Cyto, by = \"Cytokine\")\n\n# Add column with sample type information (NB control vs. bacterial sample)\ninput_data_long &lt;- input_data_long %&gt;% \n  mutate(sample_type = if_else(viability == \"control\", \"control\", \"bacteria\"))\n\n# Get average values for conditions that have technical replicas (control or NB samples)\ninput_data_long &lt;- input_data_long %&gt;% \n  group_by(date, Cyto, Category, location, line, time, bacteria, viability) %&gt;% \n  mutate(concentration_NA = ifelse(below_LD | above_LD, NA, concentration)) %&gt;% \n  mutate(concentration_avg = mean(concentration_NA, na.rm = TRUE)) %&gt;% \n  mutate(concentration_final = ifelse(is.na(concentration_avg), concentration, concentration_avg)) %&gt;% \n  select(-concentration, concentration_NA, concentration_avg) %&gt;%\n  arrange(below_LD, above_LD) %&gt;%\n  distinct(date, Cyto, Category, location, line, time, bacteria, viability, .keep_all = TRUE) %&gt;% \n  ungroup()\n\n# Cleaning up extra columns\ninput_data_long &lt;- input_data_long %&gt;%\n  select(date, Cyto, Category, location, line, time, sample_type, bacteria, viability, concentration_final, below_LD, above_LD) \n\n# Factoring variables with the right levels\ninput_data_long &lt;- input_data_long %&gt;% mutate_if(is.character, factor)\n\ninput_data_long$bacteria &lt;- factor(input_data_long$bacteria, levels = c(\"NB\", \"Dpi\", \"Sau\", \"Spn\"))\ninput_data_long$viability &lt;- factor(input_data_long$viability, levels = c(\"control\", \"live\", \"IRR\"))\ninput_data_long$line &lt;- fct_recode(input_data_long$line, \"HNO204\" = \"B\", \"HNO919\" = \"C\") \ninput_data_long$location &lt;- fct_recode(input_data_long$location, \"Apical\" = \"Ap\", \"Basal\" = \"Baso\")\ninput_data_long$Cyto &lt;- factor(input_data_long$Cyto, levels = rev(order_Cyto$Cyto))\ninput_data_long$Category &lt;- factor(input_data_long$Category, levels = unique(order_Cyto$Category))\n\n# Making new data frame with the 48h time point only\ninput_data_long_t48 &lt;- input_data_long %&gt;% \n  filter(time != 0)\n\n# Calculating log2FC relative to the non-bacteria controls\ninput_data_log2FC &lt;- input_data_long_t48 %&gt;%\n  group_by(date, Cyto, Category, location, line, time) %&gt;%\n  reframe(\n    bacteria = bacteria[sample_type == \"bacteria\"],\n    viability = viability[sample_type == \"bacteria\"],\n    log2FC = log2(concentration_final[sample_type == \"bacteria\"] / concentration_final[sample_type == \"control\"]),\n    log2ctl = log2(concentration_final[sample_type == \"control\"]),\n    below_LD = below_LD[sample_type == \"bacteria\"],\n    above_LD = above_LD[sample_type == \"bacteria\"]\n  )\n\n# Factoring variables with the right levels\ninput_data_log2FC$bacteria &lt;- factor(input_data_log2FC$bacteria, levels = c(\"Dpi\", \"Sau\", \"Spn\"))\n\n# Cleaning-up objects from the environment\nrm(input_data, input_path, metadata_path, file_list, file_path, file_data, order_Cyto)\n\n\n\nSelection of Cyto-location groups\n\nProportion of samples above the detection limit\n\n# Calculate for each Cytokine and Location the proportion of samples above limit of detection\nLD_all &lt;- input_data_long %&gt;%\n  group_by(Cyto, location) %&gt;%\n  summarise(detected_all = 1 - mean(below_LD), .groups = 'drop') \n\n# Same, but without including the time 0h\nLD_48h &lt;- input_data_long %&gt;%\n  filter(time != 0) %&gt;%\n  group_by(Cyto, location) %&gt;%\n  summarise(detected_48 = 1 - mean(below_LD), .groups = 'drop') \n\n# Combine the individual data frames and add label column with combined Cyto and location\nLD &lt;- left_join(LD_all, LD_48h, by = join_by(Cyto, location)) %&gt;%\n  mutate(group_label = paste(Cyto, location, sep = \"_\")) %&gt;%\n  relocate(group_label, .after = location)\n\n# Plot function\nplot_select_function &lt;- function(data, x_var, title) {\n  ggplot(data = data, aes(x = reorder(group_label, {{x_var}}), y = {{x_var}}, fill = location)) +\n    geom_bar(stat = \"identity\", position = position_dodge()) + \n    scale_y_continuous(expand = c(0, 0)) +\n    scale_fill_manual(values = c(\"coral\", \"steelblue1\")) +\n    coord_flip() +\n    labs(title = title, x = \"\", y = \"\") +\n    theme_bw() +\n    theme(panel.grid = element_blank(),\n          text = element_text(size = 10))\n\n}\n\n# Create and arrange plots\np_all &lt;- plot_select_function(LD, detected_all, \"Proportion of samples above detection limit (all pg/mL values)\")\np_48h &lt;- plot_select_function(LD, detected_48, \"Proportion of samples above detection limit (pg/mL values at 48h)\")\n\nLD_Plots &lt;- ggarrange(p_all, p_48h, ncol = 1, common.legend = T)\nggexport(LD_Plots, filename = file.path(analysis_folder, \"LD_Plots.pdf\"), height = 30, width = 10)\n\n\nLD_Plots\n\n\n\nlog2FC range values\n\n# Calculate the range for each log2FC\nrange_log2FC &lt;- input_data_log2FC %&gt;%\n  group_by(Cyto, location) %&gt;%\n  mutate(min = ifelse(is.na(log2FC), 0, min(log2FC, na.rm = TRUE))) %&gt;%\n  mutate(max = max(log2FC, na.rm = TRUE)) %&gt;%\n  mutate(range = max - min) %&gt;%\n  summarise(range = mean(range, na.rm = TRUE), .groups = 'drop')\n\n# Combine the range_log2FC and LD data frames into a summary file used for analysis selection\nselect_summary &lt;- left_join(LD, range_log2FC, by = join_by(Cyto, location)) %&gt;%\n   mutate(group_label = paste(Cyto, location, sep = \"_\"))\n\n# Plot the range in a similar way to the limit of detection\np_range &lt;- plot_select_function(select_summary, range, \"log2FC range\")\nggsave(p_range, filename = file.path(analysis_folder, \"Range_Plot.png\"), height = 8, width = 10)\n\n\np_range\n\n\n\nFiltering/selection thresholds\n\n# Define cut-off values for group rejection and statistical analysis \nselect_summary &lt;- select_summary %&gt;%\n  mutate(group_rejected = as.factor(ifelse(range &lt; 2.5 & detected_48 &lt; 0.25, TRUE, FALSE))) %&gt;%\n  mutate(group_stats = as.factor(ifelse(range &gt; 3, TRUE, FALSE)))\n\n# Plot correlation between range and proportion of detected samples\np_correlation_FC &lt;- ggplot(select_summary, aes(x = range, y = detected_48, color = Cyto, shape = location)) +\n  geom_point(aes(size = group_rejected)) +\n  scale_size_manual(values = c(4, 2)) +\n  geom_point(data = subset(select_summary, group_stats == TRUE), size = 2, color = \"black\") +\n  theme_bw() +\n  theme(panel.grid = element_blank(),\n        text = element_text(size = 10)) +\n  labs(x = \"log2FC range\",\n       y = \"Proportion of samples above detection limit (pg/mL values at 48h)\")\n\nggsave(p_correlation_FC, filename = file.path(analysis_folder, \"LDvsRange_Plot.png\"), height = 8, width = 10)\n\n\nggplotly(p_correlation_FC)\nsaveWidget(ggplotly(p_correlation_FC), file.path(analysis_folder, \"LDvsRange_Interactive.html\"), selfcontained = TRUE)\n\n\n# Apply the grouping variables to the raw and log2FC data frames\ninput_data_long_t48 &lt;- left_join(input_data_long_t48, select_summary, by = join_by(Cyto, location))\ninput_data_log2FC &lt;- left_join(input_data_log2FC, select_summary, by = join_by(Cyto, location)) \n\n\n\n\nSaving files\n\n# Save data frames as CSV files in the dataframes folder\nwrite_csv(input_data_long_t48, file.path(dataframes_folder, \"Cyto_values_48h.csv\"))\nwrite_csv(input_data_log2FC, file.path(dataframes_folder, \"Cyto_log2FC_48h.csv\"))\n\n# Save data frames as R objects in the dataframes folder\nsaveRDS(input_data_long_t48, file.path(dataframes_folder, \"Cyto_values_48h.rds\"))\nsaveRDS(input_data_log2FC, file.path(dataframes_folder, \"Cyto_log2FC_48h.rds\"))\n\n# Cleaning-up all objects from the environment\nrm(list = ls())\n\n# Use this to read the final objects\nCyto_values_48h &lt;- readRDS(\"data/dataframes/Cyto_values_48h.rds\")\nCyto_log2FC_48h &lt;- readRDS(\"data/dataframes/Cyto_log2FC_48h.rds\")"
  },
  {
    "objectID": "Methods_Cytokines.html#heatmap",
    "href": "Methods_Cytokines.html#heatmap",
    "title": "Cytokines",
    "section": "Heatmap",
    "text": "Heatmap\n\nlog2FC analysis\n\nFile Paths\n\n# Folder paths\ndataframes_path &lt;- \"data/dataframes\"\nmetadata_path &lt;- \"data/metadata/Cytokines\"\n\n# Load data and metadata\nCyto_log2FC_48h &lt;- readRDS(\"data/dataframes/Cyto_log2FC_48h.rds\")\nBacVia_order &lt;- read_csv(file.path(metadata_path, \"Order_BacteriaViability_FC.csv\"))\n\n# Create subfolders for output files\nfigures_folder &lt;- \"data/outputs/Cytokines/figures_log2FC\"\nif (!file.exists(\"data/outputs/Cytokines/figures_log2FC\")) {\n  dir.create(\"data/outputs/Cytokines/figures_log2FC\", recursive = TRUE)\n}\n\n\n\nHeatmap plot\n\n# Averaging replicate log2FCs\nAvg_log2FC_Cytos &lt;- Cyto_log2FC_48h %&gt;%\n  group_by(Cyto, Category, location, viability, bacteria, group_rejected) %&gt;%\n  summarize(avg_log2FC = mean(log2FC, na.rm = TRUE), .groups = 'drop') %&gt;%\n  mutate(Bac.Via = paste(bacteria, viability, sep = \".\"))\n\n# Factor Ordering\nAvg_log2FC_Cytos &lt;- merge(Avg_log2FC_Cytos, BacVia_order, by = \"Bac.Via\")\nAvg_log2FC_Cytos$Bac.Via_label &lt;- factor(Avg_log2FC_Cytos$Bac.Via_label, levels = BacVia_order$Bac.Via_label)\n\n# Make new variable with a version of avg_log2FC with NAs if group_rejected is TRUE\nAvg_log2FC_Cytos &lt;- Avg_log2FC_Cytos %&gt;%\n  mutate(value = ifelse(group_rejected == TRUE, NA, avg_log2FC))\n\n\n# Code for heatmap\nplot_heatmap &lt;- ggplot(Avg_log2FC_Cytos, aes(x = Cyto, y = Bac.Via_label, fill = value)) +\n  geom_tile(color = \"black\") + \n  facet_grid(location ~ Category , space = \"free\", scales = \"free\") +\n  scale_fill_gradient2(low = \"#009ad1\", high = \"#AD1457\",\n                       mid = \"#fefbea\", na.value = \"grey\",\n                       name = expression(\"Log\" [2]*\"FC\")) +\n  labs(x = \"\", y = \"\") +\n  scale_y_discrete(expand = c(0,0), limits = rev) +\n  scale_x_discrete(expand = c(0,0), limits = rev) +\n  theme_bw() +\n  theme(panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        strip.background = element_rect(colour = \"black\", fill = NA),\n        strip.text.y = element_text(angle = -90, hjust = 0.5, size = 11),\n        axis.text.y = element_markdown(size = 11),\n        axis.text.x = element_text(size = 11, angle = 67,  hjust = 1),\n        panel.spacing = unit(4, 'pt')\n  )\n\n\nplot_heatmap \n\n\n\nSaving files\n\n# Save figure as png\nggsave(plot = plot_heatmap, filename = file.path(figures_folder, \"heatmap.png\"), width = unit(9, \"in\"), height = unit(3.5, \"in\"))\n\n# Save figure as an R object\nsaveRDS(plot_heatmap, file.path(figures_folder, \"heatmap.rds\"))\n\n# Cleaning-up all objects from the environment\nrm(list = ls())\n\n\n\n\npg/mL analysis\n\nFile Paths\n\n# Folder paths\ndataframes_path &lt;- \"data/dataframes\"\nmetadata_path &lt;- \"data/metadata/Cytokines\"\n\n# Load data and metadata\nCyto_values_48h &lt;- readRDS(file.path(dataframes_path, \"Cyto_values_48h.rds\"))\nBacVia_order &lt;- read_csv(file.path(metadata_path, \"Order_BacteriaViability.csv\"))\n\n# Create subfolders for output files\nfigures_folder &lt;- \"data/outputs/Cytokines/figures_pgml\"\nif (!file.exists(\"data/outputs/Cytokines/figures_pgml\")) {\n  dir.create(\"data/outputs/Cytokines/figures_pgml\", recursive = TRUE)\n}\n\n\n\nHeatmap plot\n\n# Averaging replicate log2FCs\nAvg_values_Cytos &lt;- Cyto_values_48h %&gt;%\n  group_by(Cyto, Category, location, viability, bacteria, group_rejected) %&gt;%\n  summarize(avg_value = mean(concentration_final, na.rm = TRUE), .groups = 'drop') %&gt;%\n  mutate(log_value = log10(avg_value)) %&gt;% \n  mutate(Bac.Via = paste(bacteria, viability, sep = \".\"))\n\n# Factor Ordering\nAvg_values_Cytos &lt;- merge(Avg_values_Cytos, BacVia_order, by = \"Bac.Via\")\nAvg_values_Cytos$Bac.Via_label &lt;- factor(Avg_values_Cytos$Bac.Via_label, levels = BacVia_order$Bac.Via_label)\n\n# Make new variable with a version of avg_log2FC with NAs if group_rejected is TRUE\nAvg_values_Cytos &lt;- Avg_values_Cytos %&gt;%\n  mutate(value = ifelse(group_rejected == TRUE, NA, log_value))\n\n\n# Code for heatmap\nplot_heatmap &lt;- ggplot(Avg_values_Cytos, aes(x = Cyto, y = Bac.Via_label, fill = value)) +\n  geom_tile(color = \"black\") + \n  facet_grid(location ~ Category , space = \"free\", scales = \"free\") +\n  scale_fill_gradient2(low = \"#009ad1\", high = \"#AD1457\",\n                       mid = \"#fefbea\", na.value = \"grey\",\n                       name = \"Log10 pg/mL\") +\n  labs(x = \"\", y = \"\") +\n  scale_y_discrete(expand = c(0,0), limits = rev) +\n  scale_x_discrete(expand = c(0,0), limits = rev) +\n  theme_bw() +\n  theme(panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        strip.background = element_rect(colour = \"black\", fill = NA),\n        strip.text.y = element_text(angle = -90, hjust = 0.5, size = 11),\n        axis.text.y = element_markdown(size = 11),\n        axis.text.x = element_text(size = 11, angle = 67,  hjust = 1),\n        panel.spacing = unit(4, 'pt')\n  )\n\n\nplot_heatmap \n\n\n\nSaving files\n\n# Save figure as png\nggsave(plot = plot_heatmap, filename = file.path(figures_folder, \"heatmap.png\"), width = unit(9, \"in\"), height = unit(3.5, \"in\"))\n\n# Save figure as an R object\nsaveRDS(plot_heatmap, file.path(figures_folder, \"heatmap.rds\"))\n\n# Cleaning-up all objects from the environment\nrm(list = ls())"
  },
  {
    "objectID": "Methods_Cytokines.html#stats-and-individual-plots",
    "href": "Methods_Cytokines.html#stats-and-individual-plots",
    "title": "Cytokines",
    "section": "Stats and Individual Plots",
    "text": "Stats and Individual Plots\n\nlog2FC analysis\n\nFile Paths\n\n# Folder paths\ndataframes_path &lt;- \"data/dataframes\"\nmetadata_path &lt;- \"data/metadata/Cytokines\"\nanalysis_folder &lt;- \"data/outputs/Cytokines/analysis_log2FC\"\nfigures_folder &lt;- \"data/outputs/Cytokines/figures_log2FC\"\n\n# Load data and metadata\nCyto_log2FC_48h &lt;- readRDS(file.path(dataframes_path, \"Cyto_log2FC_48h.rds\"))\nCyto_values_48h &lt;- readRDS(file.path(dataframes_path, \"Cyto_values_48h.rds\"))\nBac_order &lt;- read.csv(file.path(metadata_path, \"Order_Bacteria.csv\"))\nVia_order &lt;- read.csv(file.path(metadata_path, \"Order_Viability.csv\"))\n\n# Create subfolders for output files\nstats_folder &lt;- \"data/outputs/Cytokines/stats_log2FC\"\nif (!file.exists(\"data/outputs/Cytokines/stats_log2FC\")) {\n  dir.create(\"data/outputs/Cytokines/stats_log2FC\", recursive = TRUE)\n}\n\n\n# Subset the data for the selected analysis groups\nStats_log2FC &lt;- Cyto_log2FC_48h %&gt;%\n    filter(group_stats == TRUE) %&gt;%\n    arrange(desc(range))\n\nStats_values &lt;- Cyto_values_48h %&gt;%\n    filter(group_stats == TRUE) %&gt;%\n    arrange(desc(range))\n\n\n\nStats function\n\n# Function to analyze each individual Cyto-location group using log2FC data\nstats_function &lt;- function(log2FC_data, each_group) {\n  \n  # Subset the data\n  log2FCdata_subset &lt;- log2FC_data %&gt;%\n    filter(group_label == each_group) \n  \n  # First run linear mixed-effects model with random effects\n  model &lt;- lmer(log2FC ~ bacteria * viability \n                + (1|line) + (1|line:date), \n                data = log2FCdata_subset)\n  \n  # If model is singular, rerun linear model without random effects\n  singular = isSingular(model)\n  if (singular) {\n    model &lt;- lm(log2FC ~ bacteria * viability, \n                  data = log2FCdata_subset)\n  }\n  \n  # Individual contrasts\n  emmeans_model &lt;- emmeans(model, ~ bacteria * viability)\n  emmeans_bacteria &lt;- pairs(emmeans_model, simple = \"bacteria\", adjust = \"none\")   \n  emmeans_viability &lt;- pairs(emmeans_model, simple = \"viability\", adjust = \"none\")    \n  \n  # Extract fixed effects coefficients and convert to dataframe\n  fixed_effects_df &lt;- as.data.frame(summary(model)$coefficients) %&gt;%\n    mutate(singular = singular) %&gt;%\n    mutate(group_label = each_group) \n  \n  # Extract random effects data and convert to dataframe (if not singular)\n  if (singular) {\n    random_effects_df &lt;- data.frame()\n  } else {\n    random_effects_df &lt;- as.data.frame(VarCorr(model)) %&gt;%\n      mutate(proportion = round(100 * (vcov / sum(vcov)), 2)) %&gt;%\n      mutate(singular = singular) %&gt;%\n      mutate(group_label = each_group) \n  }\n  \n  # Extract bacteria contrasts from emmeans_model and convert to dataframe. Filter live only\n  contrasts_bacteria_df &lt;- as.data.frame(summary(emmeans_bacteria)) %&gt;%\n    filter(viability == \"live\") %&gt;%\n    mutate(contrast_label = paste(contrast, viability, sep = \" -- \")) %&gt;%\n    select(-contrast, -viability) %&gt;%\n    mutate(singular = singular) %&gt;%\n    mutate(group_label = each_group)\n  \n  # Extract viability contrasts from emmeans_model and convert to dataframe\n  contrasts_viability_df &lt;- as.data.frame(summary(emmeans_viability)) %&gt;%\n    mutate(contrast_label = paste(bacteria, contrast, sep = \" -- \")) %&gt;%\n    select(-contrast, -bacteria) %&gt;%\n    mutate(singular = singular) %&gt;%\n    mutate(group_label = each_group)\n  \n  # Combine contrasts dataframes\n  contrasts_df &lt;- rbind(contrasts_bacteria_df,contrasts_viability_df) \n  \n  # Adds predictions based on fixed effects, averaged over random effects. It gives a population estimate\n  log2FCdata_subset &lt;- cbind(log2FCdata_subset, predval = predict(model,re.form = NA, se.fit = TRUE))\n  \n  # Backtransform the predicted values and CIs\n  transf_preds_df &lt;- log2FCdata_subset %&gt;% group_by(bacteria, viability, group_label) %&gt;%\n    summarise(ml2ctl = mean(log2ctl), ml2FC = mean(log2FC), \n              ml2predval.fit = mean(predval.fit),\n              ml2predval.se.fit = mean(predval.se.fit),\n              .groups = 'drop') %&gt;%\n    mutate(pconcentration = 2^(ml2predval.fit + ml2ctl),\n           pconcentration_min = 2^(ml2predval.fit - 2*ml2predval.se.fit + ml2ctl),\n           pconcentration_max = 2^(ml2predval.fit + 2*ml2predval.se.fit + ml2ctl),\n           singular = singular)\n  \n  return(list(fixed_effects = fixed_effects_df, \n              random_effects = random_effects_df, \n              contrasts_bacteria = contrasts_bacteria_df,\n              contrasts_viability = contrasts_viability_df,\n              contrasts = contrasts_df,\n              transf_preds = transf_preds_df))\n}\n\n\n#Example use for a specific Cytokine-location group\neach_group = \"IL-18_Apical\" \nstats_function(Stats_log2FC, each_group)\n\n\n# Apply the function to each unique group label and combine results into a list\nstats_list &lt;- map(unique(Stats_log2FC$group_label), function(group) {\n  cat(\"Processing group:\", group, \"\\n\")  # Add this line to print the group\n  stats_function(Stats_log2FC, group)\n})\n\n# Combine all fixed effects dataframes in the list into a single dataframe\nstats_fixed_effects &lt;- bind_rows(map(stats_list, pluck, \"fixed_effects\"))\n\n# Combine all random effects dataframes in the list into a single dataframe\nstats_random_effects &lt;- bind_rows(map(stats_list, pluck, \"random_effects\"))\n\n# Combine all contrasts dataframes in the list into a single dataframe\nstats_contrasts &lt;- bind_rows(map(stats_list, pluck, \"contrasts\"))\n\n# Combine all backtransformed predicted values dataframes in the list into a single dataframe\nstats_transf_preds &lt;- bind_rows(map(stats_list, pluck, \"transf_preds\"))\n\n\nP.value Correction\n\n# Adjust across all Cyto-Location groups using FDR\nstats_contrasts &lt;- stats_contrasts %&gt;%\n  mutate(adj.p.FDR = p.adjust(p.value, method = \"fdr\")) %&gt;%\n  mutate(sign.FDR = ifelse(adj.p.FDR &lt; 0.05, T, F)) \n\n\n\nContrasts table formatting\n\n# Separate contrast names into 2 groups matching the x axis labels for the individual plots\nstats_contrasts &lt;- stats_contrasts %&gt;%\n  separate(contrast_label, into = c(\"bacteria\", \"viability\"), sep = \"--\") %&gt;%\n  mutate(bacteria = str_trim(bacteria),  # Remove leading/trailing spaces\n         viability = str_trim(viability)) %&gt;%\n  separate(bacteria, into = c(\"bact1\", \"bact2\"), sep = \"-\") %&gt;%\n  mutate(bact2 = str_trim(if_else(!is.na(bact2), bact2, bact1)),\n         bact1 = str_trim(bact1)) %&gt;%\n  separate(viability, into = c(\"via1\", \"via2\"), sep = \"-\") %&gt;%\n  mutate(via2 = str_trim(if_else(!is.na(via2), via2, via1)),\n         via1 = str_trim(via1))\n\n# Substitute bacteria and viability names with the label versions\nstats_contrasts$bact1_label &lt;- Bac_order$bacteria_label[match(stats_contrasts$bact1, Bac_order$bacteria)]\nstats_contrasts$bact2_label &lt;- Bac_order$bacteria_label[match(stats_contrasts$bact2, Bac_order$bacteria)]\nstats_contrasts$via1_label &lt;- Via_order$viability_label[match(stats_contrasts$via1, Via_order$viability)]\nstats_contrasts$via2_label &lt;- Via_order$viability_label[match(stats_contrasts$via2, Via_order$viability)]\n\n# Formatting of the p.value labels with option for * and **\nstats_contrasts &lt;- stats_contrasts %&gt;%\n  mutate(sign = case_when(\n    adj.p.FDR &lt; 0.05 ~ \"*\",\n    TRUE ~ \"\"  \n  ))\nstats_contrasts$adj.p.FDR = format(stats_contrasts$adj.p.FDR, digits = 2, scientific = TRUE) \n\n# Generate the final group labels\nstats_contrasts &lt;- stats_contrasts %&gt;%\n  mutate(group1 = paste(bact1_label, via1_label, sep = \" \"),\n         group2 = paste(bact2_label, via2_label, sep = \" \"),\n         contrast = paste(bact1, via1, \"vs.\", bact2, via2, sep = \" \"))\n\n\n\n\nPlot function\n\n# Function to plot each individual Cyto-location group using pg/mL data\nplot_function &lt;- function(true_data, stats_data, contrasts, each_group) {\n  \n  # Subset data\n  true_data &lt;- true_data %&gt;%\n    filter(group_label == each_group) \n  stats_data &lt;- stats_data %&gt;%\n    filter(group_label == each_group) \n  contrasts &lt;- contrasts %&gt;%\n    filter(group_label == each_group) \n  \n  # Factor Ordering\n  stats_data &lt;- merge(stats_data, Bac_order, by = \"bacteria\") \n  stats_data &lt;- merge(stats_data, Via_order, by = \"viability\") \n  stats_data$bacteria_label &lt;- factor(stats_data$bacteria_label, levels = Bac_order$bacteria_label)\n  stats_data$viability_label &lt;- factor(stats_data$viability_label, levels = Via_order$viability_label)\n\n  true_data &lt;- merge(true_data, Bac_order, by = \"bacteria\") \n  true_data &lt;- merge(true_data, Via_order, by = \"viability\") \n  true_data$bacteria_label &lt;- factor(true_data$bacteria_label, levels = Bac_order$bacteria_label)\n  true_data$viability_label &lt;- factor(true_data$viability_label, levels = Via_order$viability_label)\n  \n  # Add columns for coloring the background by viability\n  true_data &lt;- true_data %&gt;%\n    mutate(bar_pos = ifelse(viability == \"IRR\", Inf, NA)) %&gt;%\n    mutate(bar_neg = ifelse(viability == \"IRR\", 0, -Inf)) \n  \n  # Get location for p value labels\n  location &lt;- log10(max(stats_data$pconcentration_max, na.rm = TRUE)) * 1.3\n  \n  # Plot\n  plot &lt;- ggplot() +\n    # Background bars used to color by viability\n    geom_col(data = true_data, aes(x = interaction(bacteria_label, viability_label, lex.order = TRUE, sep = \" \"), y = bar_pos, fill = \"grey95\"),\n             position = \"identity\", show.legend = FALSE) +\n    geom_col(data = true_data, aes(x = interaction(bacteria_label, viability_label, lex.order = TRUE, sep = \" \"), y = bar_neg, fill = \"grey95\"),\n             position = \"identity\", show.legend = FALSE) +\n    \n    scale_fill_manual(values = c(\"grey95\")) +\n    new_scale_fill() +\n    \n    # Predictions from the model transformed into pg/mL\n    geom_point(data = stats_data, aes(x = interaction(bacteria_label, viability_label, lex.order = TRUE, sep = \" \"), \n                                    y = pconcentration), shape = 3, size = 3) +\n    geom_errorbar(data = stats_data, aes(x = interaction(bacteria_label, viability_label, lex.order = TRUE, sep = \" \"),\n                                       y = pconcentration,\n                                       ymin = pconcentration_min,\n                                       ymax = pconcentration_max),\n                  width = .2) +\n    \n    # True values in pg/mL\n    geom_jitter(data = true_data, aes(x = interaction(bacteria_label, viability_label, lex.order = TRUE, sep = \" \"), \n                                      y = concentration_final, color = bacteria_label, shape = line), width = 0.3, size = 3, show.legend = FALSE) + \n    \n    scale_color_manual(values = c(\"#5b5b5b\", \"#2e67f2\", \"#AA35E3\", \"#927ed1\")) +\n\n    # General style\n    scale_y_log10() +\n    scale_x_discrete(expand = c(0,0)) +\n    labs(title = each_group,\n         x = \"\",\n         y = \"pg/mL\",) +  \n    theme_bw() +\n    theme(panel.grid = element_blank(), \n          text = element_text(size = 12),\n          axis.text.x = element_markdown()) \n  \n  # Arrange plot and pvalues table\n  contrasts &lt;- contrasts %&gt;%\n    ungroup() %&gt;%\n    select(contrast, singular, estimate, SE, df, t.ratio, p.value, adj.p.FDR)\n\n  Tmin &lt;- ttheme_minimal()\n  panel &lt;- ggarrange(plot + theme(plot.margin = unit(c(0.25,0.25,0.25,0.25), \"in\")), \n                     tableGrob(contrasts, theme = Tmin, rows = NULL), \n                     ncol = 1, heights = c(0.7, 0.3))\n  \n  return(list(each_group,\n              plot, \n              panel))\n} \n\n\n#Example use for a specific Cytokine-location group\neach_group = \"IL-18_Apical\"\nplot_function(Stats_values, stats_transf_preds, stats_contrasts, each_group)\n\n\nplots_list &lt;- map(unique(Stats_values$group_label), ~plot_function(true_data = Stats_values, stats_data = stats_transf_preds, contrasts = stats_contrasts, .x))\n\n\n\nSaving files\n\n## Save outputs\nwrite_csv(stats_fixed_effects, file.path(stats_folder, \"stats_fixed_effects.csv\"))\nwrite_csv(stats_random_effects, file.path(stats_folder, \"stats_random_effects.csv\"))\nwrite_csv(stats_contrasts, file.path(stats_folder, \"stats_contrasts.csv\"))\nwrite_csv(stats_transf_preds, file.path(stats_folder, \"stats_transf_preds.csv\"))\n\n# Save all multiple plots/tables on individual pages of a single pdf\npdf(paste0(figures_folder, \"/Cyto_Boxplots.pdf\"), width = 11, height = 8.5)\nfor (i in seq_along(plots_list)) {\n  print(plots_list[[i]][3])\n}\ndev.off()\n\n# Save all plot figures as an R object\nsaveRDS(plots_list, file.path(figures_folder, \"plots_list.rds\"))\n\n# Cleaning-up all objects from the environment\nrm(list = ls())\n\n\n\n\npg/mL analysis\n\nFile Paths\n\n# Folder paths\ndataframes_path &lt;- \"data/dataframes\"\nmetadata_path &lt;- \"data/metadata/Cytokines\"\n\n# Load data and metadata\nCyto_values_48h &lt;- readRDS(file.path(dataframes_path, \"Cyto_values_48h.rds\"))\nBacVia_order &lt;- read_csv(file.path(metadata_path, \"Order_BacteriaViability.csv\"))\n\n# Create subfolders for output files\nanalysis_folder &lt;- \"data/outputs/Cytokines/analysis_pgml\"\nif (!file.exists(\"data/outputs/Cytokines/analysis_pgml\")) {\n  dir.create(\"data/outputs/Cytokines/analysis_pgml\", recursive = TRUE)\n}\nfigures_folder &lt;- \"data/outputs/Cytokines/figures_pgml\"\nif (!file.exists(\"data/outputs/Cytokines/figures_pgml\")) {\n  dir.create(\"data/outputs/Cytokines/figures_pgml\", recursive = TRUE)\n}\nstats_folder &lt;- \"data/outputs/Cytokines/stats_pgml\"\nif (!file.exists(\"data/outputs/Cytokines/stats_pgml\")) {\n  dir.create(\"data/outputs/Cytokines/stats_pgml\", recursive = TRUE)\n}\n\n\n# Creating combined variable for bacteria and viability including the NB control. Eliminate rejected grouping.\nStats_values &lt;- Cyto_values_48h %&gt;%\n  mutate(Bac.Via = paste(bacteria, viability, sep = \".\")) %&gt;%\n  filter(group_rejected == FALSE) %&gt;%\n  arrange(desc(range))\n\n# Factor Ordering\nStats_values &lt;- merge(Stats_values, BacVia_order, by = \"Bac.Via\", all.x = TRUE)\nStats_values$Bac.Via &lt;- factor(Stats_values$Bac.Via, levels = BacVia_order$Bac.Via)\nStats_values$Bac.Via_label &lt;- factor(Stats_values$Bac.Via_label, levels = BacVia_order$Bac.Via_label)\n\n\n\nStats function\n\n# Function to analyze each individual Cyto-location group using pg/mL data\nstats_function &lt;- function(values_data, each_group) {\n  \n  # Subset the data\n  data_subset &lt;- values_data %&gt;%\n    filter(group_label == each_group) \n  \n  # First run linear mixed-effects model with random effects\n  model &lt;- lmer(log(concentration_final) ~ Bac.Via \n                + (1|line) + (1|line:date), \n                data = data_subset)\n  \n  # Extract random effects data and convert to dataframe\n  singular = isSingular(model)\n  random_effects_df &lt;- as.data.frame(VarCorr(model)) %&gt;%\n    mutate(proportion = round(100 * (vcov / sum(vcov)), 2)) %&gt;%\n    mutate(singular = singular) %&gt;%\n    mutate(group_label = each_group) \n  \n  # If model is singular, rerun linear mixed-effects model with only date as random effect\n  if (singular) {\n    model &lt;- lmer(log(concentration_final) ~ Bac.Via \n                   + (1|date), \n                  data = data_subset)\n  }\n  \n  anova &lt;- anova(model)\n  Bac.Via_pvalue &lt;- anova$`Pr(&gt;F)`[1]\n  \n  # Generate all individual contrasts without pvalue adjustment\n  emmeans_model &lt;- emmeans(model, ~ Bac.Via)\n  emmeans_contrasts &lt;- pairs(emmeans_model, adjust = \"none\")   \n  \n  # Extract fixed effects coefficients and convert to dataframe\n  fixed_effects_df &lt;- as.data.frame(summary(model)$coefficients) %&gt;%\n    mutate(singular = singular) %&gt;%\n    mutate(group_label = each_group) \n  \n  # Extract individual contrasts from emmeans_model and convert to dataframe. \n  contrasts_df &lt;- as.data.frame(summary(emmeans_contrasts)) %&gt;%\n    mutate(anova_pvalue = Bac.Via_pvalue) %&gt;%\n    mutate(singular = singular) %&gt;%\n    mutate(group_label = each_group)\n  \n  # Adds predictions based on fixed effects, averaged over random effects. It gives a population estimate\n  data_subset &lt;- cbind(data_subset, predval = predict(model,re.form = NA, se.fit = TRUE))\n  \n  # Backtransform the predicted values and CIs\n  transf_preds_df &lt;- data_subset %&gt;% group_by(Bac.Via, group_label) %&gt;%\n    summarise(mean.predval.fit = mean(predval.fit),\n              mean.predval.se.fit = mean(predval.se.fit),\n              mean.concentration = mean(concentration_final),\n              .groups = 'drop') %&gt;%\n    mutate(pconcentration = exp(mean.predval.fit),\n           pconcentration_min = exp(mean.predval.fit - 2*mean.predval.se.fit),\n           pconcentration_max = exp(mean.predval.fit + 2*mean.predval.se.fit),\n           viability = sub(\".*\\\\.\", \"\", Bac.Via))\n  \n  return(list(fixed_effects = fixed_effects_df, \n              random_effects = random_effects_df, \n              contrasts = contrasts_df,\n              transf_preds = transf_preds_df))\n}\n\n\n#Example use for a specific Cytokine-location group\neach_group = \"IL-1α_Apical\"  \n\nstats_function(Stats_values, each_group)\n\n\n# Apply the function to each unique group label and combine results into a list\nstats_list &lt;- map(unique(Stats_values$group_label), function(group) {\n  cat(\"Processing group:\", group, \"\\n\")  # Add this line to print the group name\n  stats_function(Stats_values, group)\n})\n\n# Combine all fixed effects dataframes in the list into a single dataframe\nstats_fixed_effects &lt;- bind_rows(map(stats_list, pluck, \"fixed_effects\"))\n\n# Combine all random effects dataframes in the list into a single dataframe\nstats_random_effects &lt;- bind_rows(map(stats_list, pluck, \"random_effects\"))\n\n# Combine all contrasts dataframes in the list into a single dataframe\nstats_contrasts &lt;- bind_rows(map(stats_list, pluck, \"contrasts\"))\n\n# Combine all backtransformed predicted values dataframes in the list into a single dataframe\nstats_transf_preds &lt;- bind_rows(map(stats_list, pluck, \"transf_preds\"))\n\n\nP.value Correction\n\n# Filter rows with NB (controls)\ncontrast_NB &lt;- stats_contrasts %&gt;%\n  filter(str_count(contrast, \"NB.control\") == 1)\n\n# Filter rows with two live bacteria (live vs live)\ncontrast_live_vs_live &lt;- stats_contrasts %&gt;%\n  filter(str_count(contrast, \"live\") == 2)\n\n# Filter rows with one live and one IRR (same bacteria)\ncontrast_same_bacteria &lt;- stats_contrasts %&gt;%\n  filter(str_extract(contrast, \"[A-Za-z]+(?=.live)\") == str_extract(contrast, \"[A-Za-z]+(?=.IRR)\"))\n\n# Combine the filtered dataframes\nstats_contrasts_selection &lt;- bind_rows(contrast_NB, contrast_live_vs_live, contrast_same_bacteria) %&gt;%\n  arrange(group_label)\n\n# Selection of Cyto-Location groups to perform contrast analysis based on anova\nstats_contrasts_selection &lt;- stats_contrasts_selection %&gt;%\n  filter(anova_pvalue &lt; 0.05)\n\n\n# Adjust across all Cyto-Location groups using FDR\nstats_contrasts_selection &lt;- stats_contrasts_selection %&gt;%\n  mutate(adj.p.FDR = p.adjust(p.value, method = \"fdr\")) %&gt;%\n  mutate(sign.FDR = ifelse(adj.p.FDR &lt; 0.05, T, F)) \n\n\n\nP-value and Fold-Change significance added to Contrasts table\n\n# Separate contrast names into 2 groups matching the x axis labels for the individual plots\nstats_contrasts_selection &lt;- stats_contrasts_selection %&gt;%\n  separate(contrast, into = c(\"condition1\", \"condition2\"), sep = \" - \", remove = F) \n\n# Substitute bacteria and viability names with the label versions\nstats_contrasts_selection$group1 &lt;- BacVia_order$Bac.Via_label[match(stats_contrasts_selection$condition1, BacVia_order$Bac.Via)]\nstats_contrasts_selection$group2 &lt;- BacVia_order$Bac.Via_label[match(stats_contrasts_selection$condition2, BacVia_order$Bac.Via)]\n\n# Formatting of the p.value labels\nstats_contrasts_selection &lt;- stats_contrasts_selection %&gt;%\n  mutate(sign = case_when(\n    adj.p.FDR &lt; 0.05 ~ \"*\",\n    TRUE ~ \"\"  \n  ))\nstats_contrasts_selection$adj.p.FDR = format(stats_contrasts_selection$adj.p.FDR, digits = 2, scientific = TRUE) \n\n# Calculate fold-change values for each contrast\nstats_contrasts_selection &lt;- stats_contrasts_selection %&gt;%\n  ungroup() %&gt;%\n  left_join(select(stats_transf_preds, Bac.Via, group_label, pconcentration), by = join_by(group_label == group_label, condition1 == Bac.Via)) %&gt;%\n  left_join(select(stats_transf_preds, Bac.Via, group_label, pconcentration), by = join_by(group_label == group_label, condition2 == Bac.Via), suffix = c(\".1\", \".2\")) %&gt;%\n  mutate(FC = pconcentration.1 / pconcentration.2,\n         FC = if_else(FC &lt; 1, -1 / FC, FC),\n         highlighted = case_when(\n           FC &lt;= -4 ~ \"+\",\n           FC &gt;= 4 ~ \"-\",\n           TRUE ~ \"\")) \n\n\n\n\nPlot function\n\n# Function to plot each individual Cyto-location group using pg/mL data\nplot_function &lt;- function(true_data, stats_data, contrasts, random, each_group) {\n  \n  # Subset data\n  true_data &lt;- true_data %&gt;%\n    filter(group_label == each_group) \n  stats_data &lt;- stats_data %&gt;%\n    filter(group_label == each_group) \n  contrasts &lt;- contrasts %&gt;%\n    filter(group_label == each_group) \n  random &lt;- random %&gt;%\n    filter(group_label == each_group) \n  \n  # Factor Ordering\n  stats_data &lt;- merge(stats_data, BacVia_order, by = \"Bac.Via\") \n  stats_data$Bac.Via_label &lt;- factor(stats_data$Bac.Via_label, levels = BacVia_order$Bac.Via_label)\n\n  # Plot\n  plot &lt;- ggplot() +\n    \n    # True values in pg/mL\n    geom_jitter(data = true_data, \n                aes(x = Bac.Via_label, y = concentration_final, fill = Bac.Via_label, color = Bac.Via_label, shape = line),\n                width = 0.15, size = 3, alpha = 0.75, stroke = 0.75, show.legend = TRUE) +   \n    \n    scale_fill_manual(values = c(\"#5b5b5b\",\"#AA35E3\",\"#2e67f2\",\"#927ed1\",\"#AA35E3\",\"#2e67f2\",\"#927ed1\")) +\n    scale_color_manual(values = c(\"#5b5b5b\",\"#AA35E3\",\"#2e67f2\",\"#927ed1\",\"#AA35E3\",\"#2e67f2\",\"#927ed1\")) +\n    scale_shape_manual(values = c(22,24)) +\n    \n    # Predictions from the model transformed into pg/mL\n    geom_point(data = stats_data, aes(x = Bac.Via_label, y = pconcentration), shape = 3, size = 1) +\n    geom_errorbar(data = stats_data, aes(x = Bac.Via_label,\n                                         y = pconcentration,\n                                         ymin = pconcentration_min,\n                                         ymax = pconcentration_max),\n                  width = .15) +\n    \n    # Add sections for live vs. IRR\n    geom_vline(xintercept = 1.45, colour = \"grey70\", linetype = 'dotted') +\n    geom_vline(xintercept = 4.5, colour = \"grey70\", linetype = 'dotted') +\n    \n    # General style\n    scale_y_log10() +\n    scale_x_discrete(expand = c(0,0.5)) +\n    labs(title = each_group,\n         x = \"\",\n         y = \"pg/mL\",\n         fill = \"Bacteria\", color = \"Bacteria\", shape = \"Line\") +  \n    theme_bw() +\n    theme(panel.grid = element_blank(), \n          legend.text = element_markdown(),\n          text = element_text(size = 12),\n          axis.text.x = element_markdown()) \n  \n  # Conditionally arrange plot and p-values table if contrasts is not NULL\n  Tmin &lt;- ttheme_minimal()\n  if (!is.null(contrasts) && nrow(contrasts) &gt; 0) {\n    contrasts &lt;- contrasts %&gt;%\n      ungroup() %&gt;%\n      select(contrast, p.value, adj.p.FDR, sign, pconcentration.1, pconcentration.2, FC, highlighted)\n    \n    panel &lt;- ggarrange(plot + theme(plot.margin = unit(c(0.25, 0.25, 0.25, 0.25), \"in\")), \n                       tableGrob(random, theme = Tmin, rows = NULL),\n                       tableGrob(contrasts, theme = Tmin, rows = NULL), \n                       ncol = 1, heights = c(0.5, 0.2, 0.4))\n  } else {\n    panel &lt;- ggarrange(plot + theme(plot.margin = unit(c(0.25, 0.25, 0.25, 0.25), \"in\")), \n                       tableGrob(random, theme = Tmin, rows = NULL),\n                       NULL, \n                       ncol = 1, heights = c(0.5, 0.2, 0.4))\n  }\n  return(list(each_group, plot, panel))\n} \n\n\n#Example use for a specific Cytokine-location group\neach_group = \"IL-1α_Apical\" \n\nplot_function(Stats_values, stats_transf_preds, stats_contrasts_selection, stats_random_effects, each_group)\n\n\nplots_list &lt;- map(unique(Stats_values$group_label), ~plot_function(true_data = Stats_values, stats_data = stats_transf_preds, contrasts = stats_contrasts_selection, random = stats_random_effects, .x))\n\n\n\nSaving files\n\n## Save outputs\nwrite_xlsx(stats_fixed_effects, file.path(stats_folder, \"stats_fixed_effects.xlsx\"))\nwrite_xlsx(stats_random_effects, file.path(stats_folder, \"stats_random_effects.xlsx\"))\nwrite_xlsx(stats_contrasts_selection, file.path(stats_folder, \"stats_contrasts.xlsx\"))\nwrite_xlsx(stats_transf_preds, file.path(stats_folder, \"stats_transf_preds.xlsx\"))\nsaveRDS(stats_contrasts_selection, file.path(stats_folder, \"stats_contrasts.rds\"))\n\n# Save all multiple plots/tables on individual pages of a single pdf\npdf(paste0(figures_folder, \"/Cyto_Boxplots.pdf\"), width = 10, height = 11)\nfor (i in seq_along(plots_list)) {\n  print(plots_list[[i]][3])\n}\ndev.off()\n\n# Save all plot figures as an R object\nsaveRDS(plots_list, file.path(figures_folder, \"plots_list.rds\"))\n\n# Cleaning-up all objects from the environment\n#rm(list = ls())"
  },
  {
    "objectID": "Methods_CFUs.html#data-input-and-selection",
    "href": "Methods_CFUs.html#data-input-and-selection",
    "title": "CFUs",
    "section": "Data Input and Selection",
    "text": "Data Input and Selection\n\nFile Paths\n\n# Folder paths\ninput_path &lt;- \"data/input_data/CFUs/\"\nmetadata_path &lt;- \"data/metadata/CFUs\"\n\n# Create subfolders for output files\ndataframes_folder &lt;- \"data/dataframes\"\nif (!file.exists(\"data/dataframes\")) {\n  dir.create(\"data/dataframes\", recursive = TRUE)\n}\n\n# Load data and metadata\ninput_data &lt;- read_csv(file.path(input_path, \"HNOBac_CFUs_0130_2024.csv\")) %&gt;% mutate_if(is.character, factor)\ninput_data$Time &lt;- as.factor(input_data$Time)\nBac_order &lt;- read_csv(file.path(metadata_path, \"Order_Bacteria_CFUs.csv\"))\n\n\n\nData clean-up\n\n# Setting zero values to the limit of detection\nCFU_data &lt;- input_data %&gt;%\n  mutate(\n    LOD = CFUs == 0,\n    NewCFU = ifelse(LOD, 3.75, CFUs)\n  )\n\n# Factor Ordering and Styling\nCFU_data &lt;- CFU_data %&gt;%\n  mutate(Combined = interaction(bacteria, Time))\nCFU_data &lt;- merge(CFU_data, Bac_order, by = \"Combined\") \nCFU_data$bacteria_label &lt;- factor(CFU_data$bacteria_label, levels = Bac_order$bacteria_label)\nCFU_data$Line &lt;- fct_recode(CFU_data$Line, \"HNO918\" = \"A\", \"HNO204\" = \"B\", \"HNO919\" = \"C\") \n\n\n\nSaving files\n\n# Save data frame as CSV files in the output folder\nwrite_csv(CFU_data, file.path(dataframes_folder, \"CFU_values.csv\"))\n\n# Save data frame as R objects in the output folder\nsaveRDS(CFU_data, file.path(dataframes_folder, \"CFU_values.rds\"))\n\n# Cleaning-up all objects from the environment\nrm(list = ls())\n\n# Use this to read the final objects\nCFU_data &lt;- readRDS(\"data/dataframes/CFU_values.rds\")"
  },
  {
    "objectID": "Methods_CFUs.html#stats-and-plots",
    "href": "Methods_CFUs.html#stats-and-plots",
    "title": "CFUs",
    "section": "Stats and Plots",
    "text": "Stats and Plots\n\nFile Paths\n\n# Folder paths\ndataframes_path &lt;- \"data/dataframes\"\nmetadata_path &lt;- \"data/metadata/CFUs\"\n\n# Create subfolders for output files\nfigures_folder &lt;- \"data/outputs/CFUs/figures\"\nif (!file.exists(\"data/outputs/CFUs/figures\")) {\n  dir.create(\"data/outputs/CFUs/figures\", recursive = TRUE)\n}\nstats_folder &lt;- \"data/outputs/CFUs/stats\"\nif (!file.exists(\"data/outputs/CFUs/stats\")) {\n  dir.create(\"data/outputs/CFUs/stats\", recursive = TRUE)\n}\n\n# Load data and metadata\nCFU_data &lt;- readRDS(\"data/dataframes/CFU_values.rds\")\nBac_order &lt;- read_csv(file.path(metadata_path, \"Order_Bacteria_CFUs.csv\"))\n\n\n\nFunction for each temp condition\n\n# Function to analyze each temp condition\nanalysis_function &lt;- function(data, each_temp, cutoff_pvalue, cutoff_FC) {\n  \n  # Subset the data to the selected temp\n  data_subset &lt;- data %&gt;%\n    filter(Temp == each_temp) \n  \n  # Remove time 0h from the stats\n  data_stats &lt;- data_subset %&gt;%\n    filter(Time != 0)\n  \n  # Mixed-effects model with random effects\n  model &lt;- lmer(log(NewCFU) ~ bacteria * Time \n                + (1|Line) + (1|Line:Date), \n                data = data_stats)\n  #Anova\n  anova &lt;- anova(model)\n  anova_df &lt;- as.data.frame(anova) %&gt;%\n    mutate(sign = case_when(\n      `Pr(&gt;F)` &lt; cutoff_pvalue ~ \"*\",\n      TRUE ~ \"\")) %&gt;%\n    mutate_if(is.numeric, ~ format(., digits = 2, scientific = TRUE))\n  \n  # Calculate Individual contrasts\n  emmeans_model &lt;- emmeans(model, ~ bacteria * Time)\n  emmeans_time &lt;- pairs(emmeans_model, simple = \"Time\", adjust = \"none\")    \n  \n  # Extract random effects and convert to dataframe (if not singular)\n  random_effects_df &lt;- as.data.frame(VarCorr(model)) %&gt;%\n    mutate(proportion = round(100 * (vcov / sum(vcov)), 2))\n  \n  # Adds predictions based on fixed effects, averaged over random effects. It gives a population estimate\n  data_stats &lt;- cbind(data_stats, predval = predict(model,re.form = NA, se.fit = TRUE))\n  data_summary_df &lt;- data_stats %&gt;%\n    group_by(Combined, bacteria_label) %&gt;%\n    summarize(mean.real = mean(NewCFU),\n              mean.predval = mean(predval.fit), \n              mean.predval.se = mean(predval.se.fit)) %&gt;%\n    mutate(exp.mean.predval = exp(mean.predval),\n           max = exp(mean.predval + 2*mean.predval.se),\n           min = exp(mean.predval - 2*mean.predval.se))\n  \n  # Extract time contrasts from emmeans_model, convert to dataframe and adjust pvalues\n  contrasts_time_df &lt;- as.data.frame(summary(emmeans_time)) %&gt;%\n    mutate(Temp = each_temp) %&gt;%\n    mutate(p.adj.holm = p.adjust(p.value, method = \"holm\")) %&gt;%\n    mutate(sign = case_when(\n      p.adj.holm &lt; cutoff_pvalue ~ \"*\",\n      TRUE ~ \"\"))\n  \n  # Edits to the contrast dataframe to include pvalue brackets in plot\n  contrasts_time_df &lt;- contrasts_time_df %&gt;%\n    separate(contrast, into = c(\"Time1\", \"Time2\"), sep = \" - \") %&gt;%\n    mutate(Time1 = sub(\"Time\", \"\", Time1),\n           Time2 = sub(\"Time\", \"\", Time2)) %&gt;%\n    mutate(condition1 = paste(bacteria, Time1, sep = \".\"),\n           condition2 = paste(bacteria, Time2, sep = \".\"))\n  \n  contrasts_time_df$group1 &lt;- Bac_order$bacteria_label[match(contrasts_time_df$condition1, Bac_order$Combined)]\n  contrasts_time_df$group2 &lt;- Bac_order$bacteria_label[match(contrasts_time_df$condition2, Bac_order$Combined)]\n  \n  # Calculate fold-change values for each contrast\n  contrasts_time_df &lt;- contrasts_time_df %&gt;%\n    ungroup() %&gt;%\n    left_join(select(data_summary_df, Combined, exp.mean.predval), by = join_by(condition1 == Combined)) %&gt;%\n    left_join(select(data_summary_df, Combined, exp.mean.predval), by = join_by(condition2 == Combined), suffix = c(\".1\", \".2\")) %&gt;%\n    mutate(FC = exp.mean.predval.1 / exp.mean.predval.2,\n           FC = if_else(FC &lt; 1, -1 / FC, FC),\n           highlighted = case_when(\n             FC &lt;= -cutoff_FC ~ \"+\",\n             FC &gt;= cutoff_FC ~ \"-\",\n             TRUE ~ \"\")) \n  \n  # Select p values to plot and define their location\n  contrast_sign &lt;- contrasts_time_df %&gt;%\n    filter(sign != \"\" & highlighted != \"\") %&gt;%\n    mutate(p.adj.holm = format(p.adj.holm, digits = 2, scientific = TRUE))\n  \n  location &lt;- log10(max(data_subset$NewCFU, na.rm = TRUE)) * 1.1\n  \n  # Standard Boxplot\n  plot_1 &lt;- ggplot() +\n    geom_boxplot(data = data_subset, aes(x = bacteria_label, y = NewCFU, fill = bacteria_label)) + \n    \n    geom_jitter(data = data_subset, aes(x = bacteria_label, y = NewCFU, shape = Line), \n                fill = \"grey50\", color = \"grey30\", size = 2, width = 0.05, stroke = 0.75) +\n    \n    scale_fill_manual(values = c(\"#AA35E3\",\"#AA35E3\",\"#AA35E3\",\n                                 \"#2e67f2\",\"#2e67f2\",\"#2e67f2\", \n                                 \"#927ed1\",\"#927ed1\",\"#927ed1\")) +\n    \n    scale_shape_manual(values = c(21, 22, 24)) +\n    \n    scale_y_log10(breaks = trans_breaks(\"log10\", function(x) 10^x),\n                  labels = trans_format(\"log10\", math_format(10^.x))) +\n    labs(x = \"Hours post-inoculation\",\n         y = paste0(\"CFUs/HNO at \", each_temp, \" °C\")) +\n    theme_bw() +\n    theme(panel.grid = element_blank(),\n          legend.position = \"none\",\n          text = element_text(size = 20), \n          axis.text.x = element_markdown(), \n          axis.text.y = element_text(color = \"black\"))\n  \n  # Plot with predicted means and standard errors of the estimates\n  plot_2 &lt;- ggplot() +\n    geom_point(data = data_subset, \n                aes(x = bacteria_label, y = NewCFU, fill = bacteria_label, color = bacteria_label, shape = Line, group = Line), \n                position = position_jitterdodge(dodge.width = 0.9, jitter.width = 0.2),\n                size = 1.5, alpha = 0.75, stroke = 0.75) +\n\n    geom_point(data = data_summary_df, aes(x = bacteria_label, y = exp.mean.predval), shape = 3, size = 3) +\n    geom_errorbar(data = data_summary_df, aes(x = bacteria_label,\n                                              y = exp.mean.predval,\n                                              ymax = max,\n                                              ymin = min),\n                  width = 0.5) +\n    \n    scale_fill_manual(values = c(\"#AA35E3\",\"#AA35E3\",\"#AA35E3\",\"#2e67f2\",\"#2e67f2\",\"#2e67f2\",\"#927ed1\",\"#927ed1\",\"#927ed1\")) +\n    scale_color_manual(values = c(\"#AA35E3\",\"#AA35E3\",\"#AA35E3\",\"#2e67f2\",\"#2e67f2\",\"#2e67f2\",\"#927ed1\",\"#927ed1\",\"#927ed1\")) +\n    scale_shape_manual(values = c(21, 22, 24)) +\n    \n    scale_y_log10(breaks = trans_breaks(\"log10\", function(x) 10^x),\n                  labels = trans_format(\"log10\", math_format(10^.x)),\n                  expand = c(0.1,0)) +\n    \n    labs(x = \"Hours post-inoculation\",\n         y = paste0(\"CFUs/HNO at \", each_temp, \" °C\")) +\n    theme_bw() +\n    theme(panel.grid = element_blank(), \n          legend.position = \"none\",\n          text = element_text(size = 20), \n          axis.text.x = element_markdown(), \n          axis.text.y = element_text(color = \"black\"))\n  \n  # Conditionally add p-value annotations layer\n  if (nrow(contrast_sign) &gt; 0) {\n    plot_2 &lt;- plot_2 +\n      stat_pvalue_manual(contrast_sign, label = \"p.adj.holm\", y.position = location,\n                         tip.length = 0.02, bracket.shorten = 0.2, vjust = -0.2, bracket.size = 0.3, size = 3.5)\n  } else {\n    plot_2 &lt;- plot_2\n  }\n  \n  # Arrange plot and tables for summary pdf\n  table &lt;- contrasts_time_df %&gt;%\n    select(condition1, condition2, p.adj.holm, sign, exp.mean.predval.1, exp.mean.predval.2, FC, highlighted) %&gt;%\n    mutate(p.adj.holm = format(p.adj.holm, digits = 2, scientific = TRUE))\n  \n  Tmin &lt;- ttheme_minimal()\n  panel &lt;- ggarrange(plot_1 + theme(plot.margin = unit(c(0.25,0.25,0.25,0.25), \"in\")), \n                     plot_2 + theme(plot.margin = unit(c(0.25,0.25,0.25,0.25), \"in\")),\n                     tableGrob(anova_df, theme = Tmin), \n                     tableGrob(random_effects_df, theme = Tmin, rows = NULL), \n                     tableGrob(table, theme = Tmin, rows = NULL), \n                     ncol = 1, heights = c(0.7, 0.7, 0.2, 0.2, 0.2),\n                     labels = c(\"  Standard Boxplot \", \"Predicted Mean ± 2*SE\", \"    Anova    \", \"Random Effects\", \"   Contrasts  \"))\n  panel &lt;- annotate_figure(panel, top = text_grob(\n    paste0(\"Analysis for \", each_temp, \"C. P-value: \", cutoff_pvalue, \" and FC: \", cutoff_FC),\n                                                         face = \"bold\", size = 14, color = \"red\"))\n  \n  # Save files\n  ggsave(panel, filename = paste0(figures_folder, \"/summaryCFU_\", each_temp, \".pdf\"), width = 10, height = 15)\n  ggsave(plot_2, filename = paste0(figures_folder, \"/plotCFU_\", each_temp, \".png\"), width = 7, height = 6)\n  saveRDS(plot_2, file.path(figures_folder, paste0(\"plotCFU_\", each_temp, \".rds\")))\n  write_csv(anova_df, file.path(stats_folder, paste0(\"anova_\", each_temp, \".csv\")))\n  write_csv(random_effects_df, file.path(stats_folder, paste0(\"stats_random_effects_\", each_temp, \".csv\")))\n  write_csv(contrasts_time_df, file.path(stats_folder, paste0(\"stats_contrasts_\", each_temp, \".csv\")))\n  write_csv(data_summary_df, file.path(stats_folder, paste0(\"stats_summary_\", each_temp, \".csv\")))\n  \n  return(list(\n    anova = anova_df,\n    random_effects = random_effects_df,\n    contrasts_time = contrasts_time_df,\n    data_summary = data_summary_df,\n    data_stats = data_stats,\n    plot_1 = plot_1,\n    plot_2 = plot_2,\n    panel = panel\n  ))\n}\n\n\n\nApply to each temp\n\nMain Data: 34C\n\nanalysis_function(CFU_data, each_temp = \"34\", cutoff_pvalue = 0.05, cutoff_FC = 1)\n\n\n\nSupplemental Data: 37C\n\nanalysis_function(CFU_data, each_temp = \"37\", cutoff_pvalue = 0.05, cutoff_FC = 1)\n\n\n\nMerged Files\n\npdf_files &lt;- list.files(figures_folder, pattern = \"\\\\.pdf$\", full.names = TRUE)\nqpdf::pdf_combine(input = pdf_files, file.path(figures_folder, \"HNOBac_SummaryCFUs.pdf\"))"
  },
  {
    "objectID": "Methods_LDH.html#data-input-and-selection",
    "href": "Methods_LDH.html#data-input-and-selection",
    "title": "LDH",
    "section": "Data Input and Selection",
    "text": "Data Input and Selection\n\nFile Paths\n\n# Folder paths\ninput_path &lt;- \"data/input_data/LDH/\"\nmetadata_path &lt;- \"data/metadata/LDH\"\n\n# Create subfolders for output files\ndataframes_folder &lt;- \"data/dataframes\"\nif (!file.exists(\"data/dataframes\")) {\n  dir.create(\"data/dataframes\", recursive = TRUE)\n}\n\n# Load data and metadata\ninput_data &lt;- read_excel(file.path(input_path, \"LAK24_0118_LDHData.xlsx\")) %&gt;% mutate_if(is.character, factor)\nBac_order &lt;- read_csv(file.path(metadata_path, \"Order_Bacteria_LDH.csv\"))\n\n\n\nData clean-up\n\n# Filter only samples matched to CFU wells\nLDH_data &lt;- input_data %&gt;% \n  filter(CFUmatched == \"T\")\n\n# Factor Ordering and Styling\nLDH_data &lt;- merge(LDH_data, Bac_order, by = \"Species\") \nLDH_data$bacteria_label &lt;- factor(LDH_data$bacteria_label, levels = Bac_order$bacteria_label)\nLDH_data$Line &lt;- fct_recode(LDH_data$Line, \"HNO918\" = \"A\", \"HNO204\" = \"B\", \"HNO919\" = \"C\") \n\n# Average technical replicates for each individual experiment\nLDH_avg &lt;- LDH_data %&gt;%\n  group_by(Date, Line, Species, bacteria_label, Temp, Well_Endpoint, Collection_Time) %&gt;% \n  summarise(avg_Value = mean(Value)) %&gt;%\n  # Add labels to distinguish final collection times from time 0\n  mutate(Collection_Label = if_else(Collection_Time == 24 | Collection_Time == 48, \"final\", \"initial\"))\n\n# Calculate log2 fold change between final time point vs. time 0\nLDH_FC &lt;- LDH_avg %&gt;%\n  group_by(Date, Line, Species, bacteria_label, Temp, Well_Endpoint) %&gt;%\n  reframe(FC = avg_Value[Collection_Label == \"final\"]/avg_Value[Collection_Label == \"initial\"]) \n\n\n\nSaving files\n\n# Save data frames as CSV files in the output folder\nwrite_csv(LDH_data, file.path(dataframes_folder, \"LDH_values.csv\"))\nwrite_csv(LDH_FC, file.path(dataframes_folder, \"LDH_FC.csv\"))\n\n# Save data frames as R objects in the output folder\nsaveRDS(LDH_data, file.path(dataframes_folder, \"LDH_values.rds\"))\nsaveRDS(LDH_FC, file.path(dataframes_folder, \"LDH_FC.rds\"))\n\n# Cleaning-up all objects from the environment\nrm(list = ls())\n\n# Use this to read the final objects\nLDH_data &lt;- readRDS(\"data/dataframes/LDH_values.rds\")\nLDH_FC &lt;- readRDS(\"data/dataframes/LDH_FC.rds\")"
  },
  {
    "objectID": "Methods_LDH.html#stats-and-plots",
    "href": "Methods_LDH.html#stats-and-plots",
    "title": "LDH",
    "section": "Stats and Plots",
    "text": "Stats and Plots\n\nFile Paths\n\n# Folder paths\ndataframes_path &lt;- \"data/dataframes\"\nmetadata_path &lt;- \"data/metadata/LDH\"\n\n# Create subfolders for output files\nfigures_folder &lt;- \"data/outputs/LDH/figures\"\nif (!file.exists(\"data/outputs/LDH/figures\")) {\n  dir.create(\"data/outputs/LDH/figures\", recursive = TRUE)\n}\nstats_folder &lt;- \"data/outputs/LDH/stats\"\nif (!file.exists(\"data/outputs/LDH/stats\")) {\n  dir.create(\"data/outputs/LDH/stats\", recursive = TRUE)\n}\n\n# Load data and metadata\nLDH_FC &lt;- readRDS(\"data/dataframes/LDH_FC.rds\")\nBac_order &lt;- read_csv(file.path(metadata_path, \"Order_Bacteria_LDH.csv\"))\n\n\n\nFunction for each temp condition and endpoint\n\n# Function to analyze each temp condition\nanalysis_function &lt;- function(data, each_temp, each_endpoint, cutoff_pvalue, cutoff_FC) {\n  \n  # Subset the data to the selected temp\n  data_subset &lt;- data %&gt;%\n    filter(Temp == each_temp) %&gt;%\n    filter(Well_Endpoint == each_endpoint)\n  \n  # Mixed-effects model with random effects\n  model &lt;- lmer(FC ~ Species \n                + (1|Line) + (1|Line:Date), \n                data = data_subset)\n  #Anova\n  anova &lt;- anova(model)\n  anova_df &lt;- as.data.frame(anova) %&gt;%\n    mutate(sign = case_when(\n      `Pr(&gt;F)` &lt; cutoff_pvalue ~ \"*\",\n      TRUE ~ \"\")) %&gt;%\n    mutate_if(is.numeric, ~ format(., digits = 2, scientific = TRUE))\n  \n  # Calculate Individual contrasts\n  emmeans_model &lt;- emmeans(model, ~ Species)\n  emmeans_contrasts &lt;- pairs(emmeans_model, adjust = \"none\")    \n  \n  # Extract random effects and convert to dataframe (if not singular)\n  random_effects_df &lt;- as.data.frame(VarCorr(model)) %&gt;%\n    mutate(proportion = round(100 * (vcov / sum(vcov)), 2)) \n  \n  # Adds predictions based on fixed effects, averaged over random effects. It gives a population estimate\n  data_subset &lt;- cbind(data_subset, predval = predict(model,re.form = NA, se.fit = TRUE))\n  data_summary_df &lt;- data_subset %&gt;%\n    group_by(Species, bacteria_label) %&gt;%\n    summarize(mean.real = mean(FC),\n              mean.predval = mean(predval.fit), \n              mean.predval.se = mean(predval.se.fit)) %&gt;%\n    mutate(max = mean.predval + 2*mean.predval.se,\n           min = mean.predval - 2*mean.predval.se)\n  \n  # Convert contrasts to dataframe and adjust pvalues. Filter contrast to Uncolonized only\n  contrasts_df &lt;- as.data.frame(summary(emmeans_contrasts)) %&gt;%\n    filter(str_detect(contrast, \"Uncolonized\")) %&gt;%\n    mutate(p.adj.holm = p.adjust(p.value, method = \"holm\")) %&gt;%\n    mutate(sign = case_when(\n      p.adj.holm &lt; 0.05 ~ \"*\",\n      TRUE ~ \"\"))\n  \n  # Edits to the contrast dataframe to include pvalue brackets in plot\n  contrasts_df &lt;- contrasts_df %&gt;%\n    separate(contrast, into = c(\"condition1\", \"condition2\"), sep = \" - \", remove = F) \n  \n  contrasts_df$group1 &lt;- Bac_order$bacteria_label[match(contrasts_df$condition1, Bac_order$Species)]\n  contrasts_df$group2 &lt;- Bac_order$bacteria_label[match(contrasts_df$condition2, Bac_order$Species)]\n  \n  # Calculate fold-change values for each contrast\n  contrasts_df &lt;- contrasts_df %&gt;%\n    ungroup() %&gt;%\n    left_join(select(data_summary_df, Species, mean.predval), by = join_by(condition1 == Species)) %&gt;%\n    left_join(select(data_summary_df, Species, mean.predval), by = join_by(condition2 == Species), suffix = c(\".1\", \".2\")) %&gt;%\n    mutate(FC = mean.predval.1 / mean.predval.2,\n           FC = if_else(FC &lt; 1, -1 / FC, FC),\n           highlighted = case_when(\n             FC &lt;= -cutoff_FC ~ \"-\",\n             FC &gt;= cutoff_FC ~ \"+\",\n             TRUE ~ \"\")) \n  \n  # Select p values to plot and define their location\n  contrast_sign &lt;- contrasts_df %&gt;%\n    filter(sign != \"\" & highlighted != \"\") %&gt;%\n    mutate(p.adj.holm = format(p.adj.holm, digits = 2, scientific = TRUE))\n  \n  location &lt;- max(data_subset$FC, na.rm = TRUE) * 1.1\n  \n  # Standard Boxplot\n  plot_1 &lt;- ggplot() +\n    geom_boxplot(data = data_subset, aes(x = bacteria_label, y = FC, fill = bacteria_label)) + \n    \n    geom_jitter(data = data_subset, aes(x = bacteria_label, y = FC, shape = Line), \n                fill = \"grey50\", color = \"grey30\", size = 2, width = 0.05, stroke = 0.75) +\n    \n    scale_fill_manual(values = c(\"grey80\",\"#AA35E3\",\"#2e67f2\",\"#927ed1\")) +\n    scale_shape_manual(values = c(21, 22, 24)) +\n    \n    labs(x = \"\",\n         y = \"Fold change in LDH from -1 hour\") +\n    \n    theme_bw() +\n    theme(panel.grid = element_blank(),\n          legend.position = \"none\",\n          text = element_text(size = 20), \n          axis.text.x = element_markdown(), \n          axis.text.y = element_text(color = \"black\"))\n  \n  # Plot with predicted means and standard errors of the estimates\n  plot_2 &lt;- ggplot() +\n    geom_point(data = data_subset, \n                aes(x = bacteria_label, y = FC, fill = bacteria_label, color = bacteria_label, shape = Line), \n                position = position_jitterdodge(dodge.width = 0.7, jitter.width = 0.2),\n                size = 1.5, alpha = 0.75, stroke = 0.75) +\n    \n    geom_point(data = data_summary_df, aes(x = bacteria_label, y = mean.predval), shape = 3, size = 3) +\n    geom_errorbar(data = data_summary_df, aes(x = bacteria_label,\n                                              y = mean.predval,\n                                              ymax = max,\n                                              ymin = min),\n                  width = 0.4) +\n    \n    scale_fill_manual(values = c(\"#5b5b5b\",\"#AA35E3\",\"#2e67f2\",\"#927ed1\")) +\n    scale_color_manual(values = c(\"#5b5b5b\",\"#AA35E3\",\"#2e67f2\",\"#927ed1\")) +\n    scale_shape_manual(values = c(21, 22, 24)) +\n    \n    scale_y_continuous(expand = c(0.1,0)) +\n    \n    labs(x = \"\",\n         y = \"Fold change in LDH from -1 hour\",\n         fill = \"Bacteria\", color = \"Bacteria\", shape = \"HNO Line\") +\n    \n    theme_bw() +\n    theme(panel.grid = element_blank(), \n          legend.text = element_markdown(),\n          text = element_text(size = 20), \n          axis.text.x = element_markdown(), \n          axis.text.y = element_text(color = \"black\"))\n  \n  # Conditionally add p-value annotations layer\n  if (nrow(contrast_sign) &gt; 0) {\n    plot_2 &lt;- plot_2 +\n      stat_pvalue_manual(contrast_sign, label = \"p.adj.holm\", y.position = location,\n                         tip.length = 0.02, bracket.shorten = 0.2, vjust = -0.2, bracket.size = 0.3, size = 3.5)\n  } else {\n    plot_2 &lt;- plot_2\n  }\n  \n  # Arrange plot and tables for summary pdf\n  table &lt;- contrasts_df %&gt;%\n    select(condition1, condition2, p.adj.holm, sign, mean.predval.1, mean.predval.2, FC, highlighted) %&gt;%\n    mutate(p.adj.holm = format(p.adj.holm, digits = 2, scientific = TRUE))\n  \n  Tmin &lt;- ttheme_minimal()\n  panel &lt;- ggarrange(plot_1 + theme(plot.margin = unit(c(0.25,0.25,0.25,0.25), \"in\")), \n                     plot_2 + theme(plot.margin = unit(c(0.25,0.25,0.25,0.25), \"in\")),\n                     tableGrob(anova_df, theme = Tmin), \n                     tableGrob(random_effects_df, theme = Tmin, rows = NULL), \n                     tableGrob(table, theme = Tmin, rows = NULL), \n                     ncol = 1, heights = c(0.6, 0.6, 0.1, 0.2, 0.2),\n                     labels = c(\"  Standard Boxplot \", \"Predicted Mean ± 2*SE\", \"    Anova    \", \"Random Effects\", \"   Contrasts  \"))\n  panel &lt;- annotate_figure(panel, top = text_grob(\n    paste0(\"Analysis for \", each_temp, \"C timepoint \", each_endpoint, \" h. P-value: \", cutoff_pvalue, \" and FC: \", cutoff_FC),\n                                                         face = \"bold\", size = 14, color = \"red\"))\n  \n  # Save files\n  ggsave(panel, filename = paste0(figures_folder, \"/summaryLDH_\", each_temp, \"C_\", each_endpoint, \"h.pdf\"), width = 9, height = 14)\n  ggsave(plot_2, filename = paste0(figures_folder, \"/plotLDH_\", each_temp, \"C_\", each_endpoint, \"h.png\"), width = 7, height = 6)\n  saveRDS(plot_2, file.path(figures_folder, paste0(\"plotLDH_\", each_temp, \"C_\", each_endpoint, \"h.rds\")))\n  write_csv(anova_df, file.path(stats_folder, paste0(\"anova_\", each_temp, \"C_\", each_endpoint, \"h.csv\")))\n  write_csv(random_effects_df, file.path(stats_folder, paste0(\"stats_random_effects_\", each_temp, \"C_\", each_endpoint, \"h.csv\")))\n  write_csv(contrasts_df, file.path(stats_folder, paste0(\"stats_contrasts_\", each_temp, \"C_\", each_endpoint, \"h.csv\")))\n  write_csv(data_summary_df, file.path(stats_folder, paste0(\"stats_summary_\", each_temp, \"C_\", each_endpoint, \"h.csv\")))\n  \n  return(list(\n    anova = anova_df,\n    random_effects = random_effects_df,\n    contrasts = contrasts_df,\n    data_summary = data_summary_df,\n    data_subset = data_subset,\n    plot_1 = plot_1,\n    plot_2 = plot_2,\n    panel = panel\n  ))\n}\n\n\n\nApply to each temp\n\nMain Data: 34C\n\nanalysis_function(LDH_FC, each_temp = \"34\", each_endpoint = \"48\", cutoff_pvalue = 0.05, cutoff_FC = 1)\n\n\n\nSupplemental Data: 37C\n\nanalysis_function(LDH_FC, each_temp = \"37\", each_endpoint = \"48\", cutoff_pvalue = 0.05, cutoff_FC = 1)\n\n\n\nMerged Files\n\npdf_files &lt;- list.files(figures_folder, pattern = \"\\\\.pdf$\", full.names = TRUE)\nqpdf::pdf_combine(input = pdf_files, file.path(figures_folder, \"HNOBac_SummaryLDH.pdf\"))"
  },
  {
    "objectID": "Methods_RNASeq.html#data-input-and-selection",
    "href": "Methods_RNASeq.html#data-input-and-selection",
    "title": "RNASeq",
    "section": "Data Input and Selection",
    "text": "Data Input and Selection\n\nFile Paths\n\n# Folder paths\ninput_path &lt;- \"data/input_data/RNASeq/\"\nmetadata_path &lt;- \"data/metadata/RNASeq\"\n\n# Create subfolders for output files\ndataframes_folder &lt;- \"data/dataframes\"\nif (!file.exists(\"data/dataframes\")) {\n  dir.create(\"data/dataframes\", recursive = TRUE)\n}\noutputs_folder &lt;- \"data/outputs/RNASeq\"\nif (!file.exists(\"data/outputs/RNASeq\")) {\n  dir.create(\"data/outputs/RNASeq\", recursive = TRUE)\n}\n\n# Load data and metadata\nmetadata &lt;- read_excel(file.path(metadata_path, \"hnoseq3437-metadata.xlsx\")) \ncounts &lt;- read_csv(file.path(input_path, \"hnoseq3437-hisat2.featureCounts-genes2-2batches.csv\"))\n\n\n\nData clean-up\n\n# Clean up unneeded columns and transform all columns into factors\nmetadata &lt;- metadata %&gt;%\n  select(-contains(c('_func','original_name'))) %&gt;%\n  mutate_all(factor)\n\n# Select only the rows with \"protein_coding\" as the GeneBiotype and transform in a matrix with GeneID as the rownames. Sort by GeneID\ncounts &lt;- counts %&gt;%\n  filter(GeneBiotype == \"protein_coding\") %&gt;% \n  column_to_rownames(var = \"GeneID\") %&gt;%\n  select(-contains('Gene')) %&gt;% \n  .[ order(names(.)) ]\n\n\n# Subset metadata to include only the samples relevant to this analysis \nsubset.metadata &lt;- metadata %&gt;% \n  subset(line != 'HVO262') %&gt;% # remove HVO262 samples\n  subset(temp != 'CT') %&gt;%  # remove CONTROL samples\n  subset(temp != '34') %&gt;%  # remove 34C samples\n  droplevels() %&gt;% \n  mutate(temp = factor(temp, labels = c(\"37 °C\", \"37 °C → 34 °C\")))  %&gt;% \n  mutate(line = factor(line, levels = c(\"HNO918\", \"HNO204\", \"HNO919\")))  %&gt;% \n  set_rownames(.$sampleid)\n\n# Keep counts column only for the selected samples \nsubset.counts &lt;- counts %&gt;% \n  select(contains(rownames(subset.metadata))) \n\n# Make the correesponding design matrix \ncoldata &lt;- data.frame(subset.metadata$line) %&gt;%\n  set_rownames(rownames(subset.metadata)) %&gt;%\n  setNames('condition') \n\n\n\nSaving files\n\n# Save data frames as CSV files in the dataframes folder\nwrite.csv(subset.counts, file.path(dataframes_folder, \"RNASeq_counts.csv\"), row.names = TRUE)\n\n# Save data frames as R objects in the dataframes folder\nsaveRDS(subset.counts, file.path(dataframes_folder, \"RNASeq_counts.rds\"))\n\n# Use this to read the final objects\nsubset.counts &lt;- readRDS(\"data/dataframes/RNASeq_counts.rds\")"
  },
  {
    "objectID": "Methods_RNASeq.html#deseq",
    "href": "Methods_RNASeq.html#deseq",
    "title": "RNASeq",
    "section": "DESeq",
    "text": "DESeq\n\n# Run DESeq\ndds01.cnts &lt;- DESeqDataSetFromMatrix(subset.counts, colData = coldata, design = ~ condition)\ndds02.dseq &lt;- DESeq(dds01.cnts)\ndds03.resu &lt;- results(dds02.dseq)\ndds04.vstf &lt;- vst(dds02.dseq,  blind = FALSE)\n\n\n# Get PCA dataframe and percentVar\npcadata &lt;- plotPCA(dds04.vstf, returnData = TRUE) \npcadata &lt;- left_join(pcadata, subset.metadata, by = c(\"name\" = \"sampleid\")) \n\n\nSaving files\n\n# Save data frames as CSV files in the output folder\nwrite_csv(pcadata, file.path(outputs_folder, \"PCA_values.csv\"))\n\n# Save data frames as R objects in the output folder\nsaveRDS(pcadata, file.path(outputs_folder, \"PCA_values.rds\"))\n\n# Cleaning-up all objects from the environment\nrm(list = ls())\n\n# Use this to read the final objects\npcadata &lt;- readRDS(\"data/outputs/RNASeq/PCA_values.rds\")"
  },
  {
    "objectID": "Methods_RNASeq.html#pca-plot",
    "href": "Methods_RNASeq.html#pca-plot",
    "title": "RNASeq",
    "section": "PCA Plot",
    "text": "PCA Plot\n\nFile Paths\n\n# Folder paths\noutputs_folder &lt;- \"data/outputs/RNASeq\"\n\n# Load data \npcadata &lt;- readRDS(\"data/outputs/RNASeq/PCA_values.rds\")\n\n\n\nPlot\n\npercentVar = round(100 * attr(pcadata, \"percentVar\"))\n\n\nPCAplot = ggplot(pcadata, aes(x = PC1, y = PC2, group = condition)) +\n  geom_point(aes(fill = temp, color = temp, shape = line), alpha = 0.75, size = 2, show.legend = c(shape = FALSE)) + \n  scale_fill_manual(values = c('#CC79A7', '#009E73')) +\n  scale_color_manual(values = c('#CC79A7', '#009E73')) +\n  scale_shape_manual(values = c(21, 22, 24)) +\n  labs(x = paste0(\"PC1: \", percentVar[1], \"% variance\"),\n       y = paste0(\"PC2: \", percentVar[2], \"% variance\"),\n       fill = \"Temperature\", color = \"Temperature\") +\n  #coord_fixed() +\n  theme_bw() +\n  theme(panel.grid = element_blank(),\n        text = element_text(size = 20),\n        axis.text.x = element_text(color = \"black\"),\n        axis.text.y = element_text(color = \"black\")) +\n  guides(fill = guide_legend(override.aes = list(shape = 21))) \n\nPCAplot\n\n\n\nSaving files\n\nggsave(PCAplot, filename = paste0(outputs_folder, \"/plotPCA.png\"), width = 6, height = 6)\nsaveRDS(PCAplot, file.path(outputs_folder, paste0(\"plotPCA.rds\")))"
  },
  {
    "objectID": "Methods_MOC.html#file-paths",
    "href": "Methods_MOC.html#file-paths",
    "title": "Cell Counts",
    "section": "File Paths",
    "text": "File Paths\n\n# Folder paths\nMOC_input_path &lt;- \"data/input_data/MOC\"\nCFUs_input_path &lt;- \"data/dataframes\"\n\n# Create subfolders for output files\ndataframes_folder &lt;- \"data/dataframes\"\nif (!file.exists(\"data/dataframes\")) {\n  dir.create(\"data/dataframes\", recursive = TRUE)\n}\noutputs_folder &lt;- \"data/outputs/MOC\"\nif (!file.exists(\"data/outputs/MOC\")) {\n  dir.create(\"data/outputs/MOC\", recursive = TRUE)\n}\n\n# Load data and metadata\nHNOCells &lt;- read_csv(file.path(MOC_input_path, \"MOC_HNOBac_2024.csv\")) \nCFUs &lt;- read_rds(file.path(CFUs_input_path, \"CFU_values.rds\"))"
  },
  {
    "objectID": "Methods_MOC.html#cells-per-hno-well",
    "href": "Methods_MOC.html#cells-per-hno-well",
    "title": "Cell Counts",
    "section": "Cells per HNO well",
    "text": "Cells per HNO well\n\nHNOCells$Date &lt;- as.factor(HNOCells$Date)\nHNOCells$Line &lt;- as.factor(HNOCells$Line)\nHNOCells &lt;- HNOCells  %&gt;%\n  mutate(Line = factor(Line, levels = c(\"HNO918\", \"HNO204\", \"HNO919\"))) \n\n\nHNOCells_summary &lt;- HNOCells %&gt;%\n  group_by(Line) %&gt;%\n  summarize(median_cells = median(Cells_HNO),\n            Q1 = quantile(Cells_HNO, 0.25),\n            Q3 = quantile(Cells_HNO, 0.75),\n            n = n(),\n            SE = sd(Cells_HNO)/sqrt(n),\n            CI = SE*1.96)\n\n\nPlot\n\nboxplot_HNOCells &lt;- ggplot() +\n  geom_boxplot(data = HNOCells, aes(x = Line, y = Cells_HNO)) +\n  \n  geom_jitter(data = HNOCells, aes(x = Line, y = Cells_HNO, shape = Line), \n             fill = \"#5b5b5b\", color = \"#5b5b5b\", size = 2, width = 0.15, alpha = 0.75) +\n  \n  scale_shape_manual(values = c(21, 22, 24)) +\n  scale_y_log10(limits = c(100000, 10000000),\n                labels = trans_format(\"log10\", math_format(10^.x))) +\n  labs(x = \"HNO Line\",\n       y = \"HNO Cells/Well\") +\n  theme_bw() +\n  theme(panel.grid = element_blank(),\n        text = element_text(size = 20), \n        axis.text.x = element_text(color = \"black\"),\n        axis.text.y = element_text(color = \"black\"))\nboxplot_HNOCells\n\n\n\nSaving files\n\nggsave(boxplot_HNOCells, filename = paste0(outputs_folder, \"/boxplot_HNOCells.png\"), width = 12, height = 10)\nsaveRDS(boxplot_HNOCells, file.path(outputs_folder, paste0(\"boxplot_HNOCells.rds\")))\n\n\n# Save data frames as CSV files in the metadata folder\nwrite_csv(HNOCells, file.path(dataframes_folder, \"HNOCells_values.csv\"))\n\n# Save data frames as R objects in the metadata folder\nsaveRDS(HNOCells, file.path(dataframes_folder, \"HNOCells_values.rds\"))\n\n# Use this to read the final objects\nHNOCells &lt;- readRDS(\"data/dataframes/HNOCells_values.rds\")"
  },
  {
    "objectID": "Methods_MOC.html#multiplicity-of-colonization",
    "href": "Methods_MOC.html#multiplicity-of-colonization",
    "title": "Cell Counts",
    "section": "Multiplicity of Colonization",
    "text": "Multiplicity of Colonization\n\nCFU_Inoculum &lt;- CFUs %&gt;%\n  filter(Time == \"0\") %&gt;%\n  group_by(Line, bacteria) %&gt;%\n  summarize(median_CFUs = median(NewCFU))\n\nCFU_Inoculum &lt;- left_join(CFU_Inoculum, HNOCells_summary, by = \"Line\")\n\nMOC_Calcs &lt;- CFU_Inoculum %&gt;%\n  mutate(MOC = (median_CFUs/median_cells)) %&gt;%\n  group_by(bacteria) %&gt;%\n  mutate(avg_MOC = (mean(MOC)))\n\n\nPlot\n\nboxplot_MOC &lt;- ggplot() +\n  geom_boxplot(data = MOC_Calcs, aes(x = bacteria, y = MOC, fill = bacteria)) +\n  \n  geom_jitter(data = MOC_Calcs, aes(x = bacteria, y = MOC, shape = Line), \n              fill = \"grey50\", color = \"grey30\", size = 2,  \n              width = 0.001, stroke = 0.75) +\n  scale_fill_manual(values = c(\"#2e67f2\",\"#AA35E3\",\"#927ed1\")) +\n  scale_shape_manual(values = c(21, 22, 24)) +\n  labs(title = \" \",\n       x = \"HNO Line\",\n       y = \"MOC\") +\n  theme_bw() +\n  theme(panel.grid = element_blank(), text = element_text(size = 30), \n        axis.text.x = element_markdown(), axis.text.y = element_text(color = \"black\"))\nboxplot_MOC\n\n\n\nSaving files\n\nggsave(boxplot_MOC, filename = paste0(outputs_folder, \"/boxplot_MOC.png\"), width = 12, height = 10)\nsaveRDS(boxplot_MOC, file.path(outputs_folder, paste0(\"boxplot_MOC.rds\")))\n\n\n# Save data frames as CSV files in the outputs folder\nwrite_csv(MOC_Calcs, file.path(outputs_folder, \"MOC_Calcs.csv\"))\n\n# Save data frames as R objects in the outputs folder\nsaveRDS(MOC_Calcs, file.path(outputs_folder, \"MOC_Calcs.rds\"))\n\n# Use this to read the final objects\nMOC_Calcs &lt;- readRDS(file.path(outputs_folder, paste0(\"MOC_Calcs.rds\")))"
  },
  {
    "objectID": "Methods_HekBlue.html#data-input-and-selection",
    "href": "Methods_HekBlue.html#data-input-and-selection",
    "title": "HekBlue Assays",
    "section": "Data Input and Selection",
    "text": "Data Input and Selection\n\nFile Paths\n\n# Folder paths\ninput_path &lt;- \"data/input_data/HekBlue/\"\nmetadata_path &lt;- \"data/metadata/HekBlue\"\n\n# Create subfolders for output files\ndataframes_folder &lt;- \"data/dataframes\"\nif (!file.exists(\"data/dataframes\")) {\n  dir.create(\"data/dataframes\", recursive = TRUE)\n}\noutputs_folder &lt;- \"data/outputs/HekBlue\"\nif (!file.exists(\"data/outputs/HekBlue\")) {\n  dir.create(\"data/outputs/HekBlue\", recursive = TRUE)\n}\n\n# Load data and metadata\nHek_Original &lt;- read_csv(file.path(input_path, \"HekData_IL1R.csv\"))\nBacVia_order &lt;- read_csv(file.path(metadata_path, \"Order_BacteriaViability.csv\"))\n\n\n# Split sample and standards dataframes\ndata_samples &lt;- Hek_Original %&gt;%\n  filter(type == \"sample\")\n\ndata_standards &lt;- Hek_Original %&gt;%\n  filter(type == \"standard\")\n\n# Rename columns\ncolnames(data_standards)[colnames(data_standards) == \"bacteria\"] &lt;- \"STD\"\ncolnames(data_standards)[colnames(data_standards) == \"treatment\"] &lt;- \"pg.ml\"\n\n# Remove extra columns from the standards dataframe\ndata_standards &lt;-\n  select(data_standards,\n         -well,\n         -sample,\n         -line,\n         -time,\n         -location,\n         -viability,\n         -`Analyte Sample`) %&gt;%\n  group_by(STD) \n\n# Select samples at 48h\ndata_samples &lt;- data_samples %&gt;%\n  filter(time == \"48\")\n\n# Variable formatting \ndata_standards$STD &lt;- as.factor(data_standards$STD)\ndata_standards$Abs &lt;- as.numeric(data_standards$Abs)\ndata_standards$pg.ml &lt;- as.numeric(data_standards$pg.ml)\ndata_samples$line &lt;- as.factor(data_samples$line)\ndata_samples$line &lt;- fct_recode(data_samples$line, \"HNO204\" = \"B\", \"HNO919\" = \"C\") \ndata_samples$location &lt;- fct_recode(data_samples$location, \"Apical\" = \"Ap\", \"Basal\" = \"Baso\")"
  },
  {
    "objectID": "Methods_HekBlue.html#standard-curve",
    "href": "Methods_HekBlue.html#standard-curve",
    "title": "HekBlue Assays",
    "section": "Standard Curve",
    "text": "Standard Curve\n\n# Select standard curve values and log transform so it fits a linear model\ndata_standards &lt;- data_standards %&gt;% \n  filter(STD %in% c(\"STD1\", \"STD2\", \"STD3\", \"STD4\", \"STD5\", \"STD6\")) %&gt;%\n  mutate(log_pg.ml = log10(pg.ml))\n\n\n# Fit a linear model (lm) with \"Abs\" as the dependent variable and \"log_pg.ml\" as the independent variable\nlmStandard &lt;- lm(Abs ~ log_pg.ml, data_standards) \n  \n# Extract coefficients from the linear model\ncoefficients &lt;- lmStandard$coefficients\n\n# Apply linear model coefficients to calculate pg.ml in samples. LOD_pg.ml has a max value of 500\ndata_samples &lt;- data_samples %&gt;%\n  mutate(log_pg.ml = ((Abs - coefficients[1]) / coefficients[2]),\n         pg.ml = 10^(log_pg.ml),\n         LOD_pg.ml = ifelse(pg.ml &gt; 500, 500, pg.ml))\n\n\n# Add column with sample type information (NB control vs. bacterial sample). Calculate averages\ndata_samples_avg &lt;- data_samples %&gt;% \n  mutate(via = ifelse(bacteria == \"NB\", \"control\", viability)) %&gt;%\n  group_by(date, location, line, time, bacteria, via) %&gt;% \n  mutate(concentration_avg = mean(pg.ml, na.rm = TRUE),\n         Bac.Via = interaction(bacteria, via)) %&gt;%\n  distinct(date, location, line, time, bacteria, via, .keep_all = TRUE) %&gt;% \n  ungroup()\n\n\n# Factoring variables with the right levels\ndata_samples_avg &lt;- data_samples_avg %&gt;% mutate_if(is.character, factor)\ndata_samples_avg &lt;- merge(data_samples_avg, BacVia_order, by = \"Bac.Via\")\ndata_samples_avg$Bac.Via &lt;- factor(data_samples_avg$Bac.Via, levels = BacVia_order$Bac.Via)\ndata_samples_avg$Bac.Via_label &lt;- factor(data_samples_avg$Bac.Via_label, levels = BacVia_order$Bac.Via_label)\n\n\nPlot\n\n# Extract coefficients and R-squared value\nlm_eq &lt;- paste(\"y =\", round(coef(lmStandard)[2], 2), \"x +\", round(coef(lmStandard)[1], 2))\nr_squared &lt;- round(summary(lmStandard)$r.squared, 3)\n\n# Create the ggplot object\npg.ml_plot &lt;- ggplot(data_standards, aes(x = log_pg.ml, y = Abs)) +\n  geom_point() +\n  geom_smooth(method = \"lm\", se = FALSE, color = \"black\", linetype = \"dotted\", linewidth = 0.8) +\n  geom_point(data = data_samples_avg, aes(x = log_pg.ml, y = Abs), color = \"pink\") +\n  labs(x = \"log pg/mL\", y = \"Abs\") +\n  ggtitle(\"Standard Curve with sample data\") +\n  geom_text(x = min(data_samples_avg$log_pg.ml), y = max(data_samples_avg$Abs), \n            label = paste(\"Equation: \", lm_eq, \"\\nR-squared: \", r_squared), \n            hjust = 0, vjust = 1, color = \"black\") +\n  theme_bw() +\n  theme(panel.grid = element_blank(),\n        text = element_text(size = 14))\n\npg.ml_plot"
  },
  {
    "objectID": "Methods_HekBlue.html#saving-files",
    "href": "Methods_HekBlue.html#saving-files",
    "title": "HekBlue Assays",
    "section": "Saving files",
    "text": "Saving files\n\n# Save data frames as CSV files in the dataframes folder\nwrite_csv(data_samples_avg, file.path(dataframes_folder, \"HekBlue_values.csv\"))\n\n# Save data frames as R objects in the dataframes folder\nsaveRDS(data_samples_avg, file.path(dataframes_folder, \"HekBlue_values.rds\"))\n\n# Use this to read the final objects\ndata_samples_avg &lt;- readRDS(\"data/dataframes/HekBlue_values.rds\")"
  },
  {
    "objectID": "Methods_HekBlue.html#results-plots",
    "href": "Methods_HekBlue.html#results-plots",
    "title": "HekBlue Assays",
    "section": "Results Plots",
    "text": "Results Plots\n\nFunction for each location\n\n# Function to analyze each location\nanalysis_function &lt;- function(data, each_location) {\n  \n  # Subset the data to the selected location\n  data_subset &lt;- data %&gt;%\n    filter(location == each_location) \n  \n  #Plot\n  plot &lt;- ggplot() +\n    geom_hline(yintercept = 500, linetype = \"dashed\", color = \"gray\", size = 1) +\n    \n    geom_jitter(data = data_subset, \n               aes(x = Bac.Via_label, y = LOD_pg.ml, fill = Bac.Via_label, color = Bac.Via_label, shape = line),\n               width = 0.4, size = 2.5, alpha = 0.75, show.legend = TRUE) +   \n    \n    scale_fill_manual(values = c(\"#5b5b5b\",\"#AA35E3\",\"#2e67f2\",\"#927ed1\",\"#AA35E3\",\"#2e67f2\",\"#927ed1\")) +\n    scale_color_manual(values = c(\"#5b5b5b\",\"#AA35E3\",\"#2e67f2\",\"#927ed1\",\"#AA35E3\",\"#2e67f2\",\"#927ed1\")) +\n    scale_shape_manual(values = c(22,24)) +\n    \n    # Add sections for live vs. IRR\n    geom_segment(aes(x = 1.45 , y = Inf, xend = 1.45, yend = -90), colour = \"grey70\", linetype = 'dotted') +\n    geom_segment(aes(x = 4.5 , y = Inf, xend = 4.45, yend = -90), colour = \"grey70\", linetype = 'dotted') +\n    annotate(\"text\", \n             x = seq(1, 7, length.out = 7), y = -80,\n             size = 4,\n             label = c(\"\", \"\", \"Live\", \"\", \"\", \"Dead\", \"\")) +\n    \n    coord_cartesian(ylim = c(0, NA), clip = \"off\") +\n    \n    # General style\n    labs(title = paste0(each_location),\n         x = \"\",\n         y = \"pg/mL active IL-1α / IL-1β\",\n         fill = \"Bacteria\", color = \"Bacteria\", shape = \"Line\") +\n    theme_bw() +\n    theme(panel.grid = element_blank(), \n          legend.text = element_markdown(),\n          text = element_text(size = 20), \n          axis.text.y = element_text(color = \"black\"), \n          axis.text.x = element_markdown(angle = 0))\n  \n  # Save files\n  ggsave(plot, filename = paste0(outputs_folder, \"/plotHekBlue_\", each_location, \".png\"), width = 11, height = 10)\n  saveRDS(plot, file.path(outputs_folder, paste0(\"plotHekBlue_\", each_location, \".rds\")))\n  \n  return(plot = plot)\n}\n\n\n\nApply to each location\n\nApical\n\nanalysis_function(data_samples_avg, each_location = \"Apical\")\n\n\n\nBasal\n\nanalysis_function(data_samples_avg, each_location = \"Basal\")"
  },
  {
    "objectID": "Methods_Figures.html#file-paths",
    "href": "Methods_Figures.html#file-paths",
    "title": "Figures",
    "section": "File Paths",
    "text": "File Paths\n\n# Folder paths\nCyto_folder &lt;- \"data/outputs/Cytokines\"\nCFUs_figures_folder &lt;- \"data/outputs/CFUs/figures\"\nLDH_figures_folder &lt;- \"data/outputs/LDH/figures\"\nRNASeq_folder &lt;- \"data/outputs/RNASeq\"\nMOC_folder &lt;- \"data/outputs/MOC\"\nHekBlue_folder &lt;- \"data/outputs/HekBlue\"\n\n# Create subfolders for output files\nfigures_folder &lt;- \"data/outputs/Figures/Manuscript\"\nif (!file.exists(\"data/outputs/Figures/Manuscript\")) {\n  dir.create(\"data/outputs/Figures/Manuscript\", recursive = TRUE)\n}\n\n# Load data and metadata\nHeatmap &lt;- readRDS(file.path(Cyto_folder, \"figures_log2FC/heatmap.rds\"))\nCyto_plots_list &lt;- readRDS(file.path(Cyto_folder, \"figures_pgml/plots_list.rds\"))\nCyto_contrasts &lt;- readRDS(file.path(Cyto_folder, \"stats_pgml/stats_contrasts.rds\"))\nCFU_plot_34 &lt;- readRDS(file.path(CFUs_figures_folder, \"plotCFU_34.rds\"))\nLDH_plot_34 &lt;- readRDS(file.path(LDH_figures_folder, \"plotLDH_34C_48h.rds\"))\nCFU_plot_37 &lt;- readRDS(file.path(CFUs_figures_folder, \"plotCFU_37.rds\"))\nLDH_plot_37 &lt;- readRDS(file.path(LDH_figures_folder, \"plotLDH_37C_48h.rds\"))\nPCA_plot &lt;- readRDS(file.path(RNASeq_folder, \"plotPCA.rds\"))\nMOC_Cplot &lt;- readRDS(file.path(MOC_folder, \"boxplot_HNOCells.rds\"))\nHekBlue_A &lt;- readRDS(file.path(HekBlue_folder, \"plotHekBlue_Apical.rds\"))\nHekBlue_B &lt;- readRDS(file.path(HekBlue_folder, \"plotHekBlue_Basal.rds\"))"
  },
  {
    "objectID": "Methods_Figures.html#figure-assembling",
    "href": "Methods_Figures.html#figure-assembling",
    "title": "Figures",
    "section": "Figure assembling",
    "text": "Figure assembling\n\np.empty &lt;-  ggplot() +\n  theme_void() +\n  theme(plot.margin = unit(c(0,0,0,0), \"in\"),\n        plot.background = element_rect(fill = \"white\", color = \"white\"))\n\n\nFigure 1\n\nfigure1_legend &lt;- get_legend(LDH_plot_34 + \n                       theme(text = element_text(size = 12),\n                             legend.key.size = unit(10,\"pt\"),\n                             legend.key.spacing.y = unit(0, \"pt\"),\n                             legend.spacing.y = unit(2, \"pt\"))\n)\n\n\nfigure_1B &lt;- CFU_plot_34 +\n  theme(text = element_text(size = 12),\n        plot.margin = unit(c(0.1, 0.1, 0.1, 0.1), \"in\"))\n\nfigure_1C &lt;- LDH_plot_34 +\n  theme(text = element_text(size = 12), \n        plot.margin = unit(c(0.1, 0.1, 0.1, 0.1), \"in\"),\n        legend.position = \"none\")\n\nfigure_1 &lt;- ggarrange(figure_1B, figure1_legend, figure_1C, nrow = 1, widths = c(1, 0.2, 0.6))\nfigure_1\n\n# Save figure \nggsave(plot = figure_1, filename = file.path(figures_folder, \"figure_1.png\"), width = unit(7.5, \"in\"), height = unit(3, \"in\"))\nggsave(plot = figure_1, filename = file.path(figures_folder, \"figure_1.svg\"), width = unit(7.5, \"in\"), height = unit(3, \"in\"))\n\n\n\nFigure S1\n\nfigureS1_legendA &lt;- get_legend(PCA_plot + \n                       theme(text = element_text(size = 14),\n                             legend.key.size = unit(10,\"pt\"),\n                             legend.key.spacing.y = unit(0, \"pt\"),\n                             legend.spacing.y = unit(2, \"pt\"))\n)\n\nfigureS1_legendB &lt;- get_legend(LDH_plot_37 + \n                       theme(text = element_text(size = 14),\n                             legend.key.size = unit(10,\"pt\"),\n                             legend.key.spacing.y = unit(0, \"pt\"),\n                             legend.spacing.y = unit(2, \"pt\"))\n)\n#figureS1_legend &lt;- ggarrange(p.empty, figureS1_legendA, figureS1_legendB, p.empty, ncol = 1, heights = c(1, 0.2, 0.8, 1))\nfigureS1_legend &lt;- ggarrange(p.empty, figureS1_legendA, figureS1_legendB, p.empty, ncol = 1, heights = c(0.2, 0.2, 0.8, 0.2))\n\n\nfigure_1SA &lt;- PCA_plot +\n  theme(text = element_text(size = 14), \n        plot.margin = unit(c(0.2, 0.2, 0.1, 0.1), \"in\"),\n        legend.position = \"none\") \n\nfigure_1SB &lt;- MOC_Cplot +\n  theme(text = element_text(size = 14), \n        plot.margin = unit(c(0.2, 0.1, 0.1, 0.05), \"in\"),\n        legend.position = \"none\")\n\nfigure_1SC &lt;- CFU_plot_37 +\n  theme(text = element_text(size = 14),\n        plot.margin = unit(c(0.2, 0.2, 0.1, 0.1), \"in\"))\n\nfigure_1SD &lt;- LDH_plot_37 +\n  theme(text = element_text(size = 14),\n        plot.margin = unit(c(0.2, 0.1, 0.1, 0.1), \"in\"),\n        legend.position = \"none\")\n\nfigure_1Sup &lt;- ggarrange(figure_1SA, figure_1SB, figureS1_legend, labels = c(\"A\", \"B\", \"\"), vjust = 1.3, nrow = 1, widths = c(1, 1, 0.4))\nfigure_1Sdown &lt;- ggarrange(figure_1SC, figure_1SD, labels = c(\"C\", \"D\"), vjust = 1.3, nrow = 1, widths = c(1, 0.6))\n\nfigure_1S &lt;- ggarrange(figure_1Sup, figure_1Sdown, ncol = 1)\n#figure_1S &lt;- ggarrange(figureS1_legend, figure_1S, widths = c(0.2, 1))\nfigure_1S\n\n# Save figure \nggsave(plot = figure_1S, filename = file.path(figures_folder, \"figure_S1.png\"), width = unit(10.5, \"in\"), height = unit(8.5, \"in\"))\nggsave(plot = figure_1S, filename = file.path(figures_folder, \"figure_S1.svg\"), width = unit(10.5, \"in\"), height = unit(8.5, \"in\"))\n\n\n\nFigure S2\n\nfigureS2_legend &lt;- get_legend(HekBlue_A + \n                       theme(text = element_text(size = 14),\n                             legend.key.size = unit(10,\"pt\"),\n                             legend.key.spacing.y = unit(2, \"pt\"),\n                             legend.spacing.y = unit(2, \"pt\"))\n)\n\n\nfigure_2SB &lt;- HekBlue_A +\n  theme(text = element_text(size = 16),\n        plot.margin = unit(c(-0.2, 0.1, 0.1, 0.1), \"in\"),\n        legend.position = \"none\")\n\nfigure_2SC &lt;- HekBlue_B +\n  theme(text = element_text(size = 16), \n        plot.margin = unit(c(-0.2, 0.1, 0.1, 0.1), \"in\"),\n        legend.position = \"none\")\n\nfigure_2SC &lt;- ggarrange(figure_2SB, figure_2SC, figureS2_legend, nrow = 1, labels = c(\"B\", \"C\", \"\"), widths = c(1, 1, 0.3), vjust = -1)\nfigure_2SC &lt;- ggarrange(Heatmap, figure_2SC, ncol = 1, labels = c(\"A\", \"\"))\nfigure_2SC\n\n# Save figure \nggsave(plot = figure_2SC, filename = file.path(figures_folder, \"figure_S2.png\"), width = unit(11, \"in\"), height = unit(8.5, \"in\"))\nggsave(plot = figure_2SC, filename = file.path(figures_folder, \"figure_S2.svg\"), width = unit(11, \"in\"), height = unit(8.5, \"in\"))\n\n\n\nFigure 2\n\nfilter_plots &lt;- function(list, contrasts, selected, ymin, ymax, rows, cols, widths) {\n  sublist &lt;- list() \n  plot_counter &lt;- 1  # Initialize plot counter\n  \n  for (group in selected) {\n    if (group == \"LEGEND\") {\n        sublist &lt;- c(sublist, list(figureS2_legend))  # Add the legend plot\n        plot_counter &lt;- plot_counter + 1  # Increment plot counter\n      next  # Skip to the next group in the selected list\n    }\n    \n    for (element in list) {\n      if (element[[1]] == group) {\n        # Change size of the geom_jitter for all plots\n        element[[2]]$layers[[1]]$aes_params$size &lt;- 1\n        \n        contrast_sign &lt;- contrasts %&gt;%\n          filter(group_label == group) %&gt;%\n          filter(sign.FDR == TRUE & highlighted != \"\") %&gt;%\n          mutate(plot = \"\")\n        \n        # Extract the part of the string before the underscore for the plot title\n        plot_title &lt;- gsub(\"_.*$\", \"\", group)\n        \n        # Common plot customizations\n        plot_customization &lt;- element[[2]] +\n          theme(axis.ticks = element_blank(),\n                axis.title.y = element_text(size = 12),\n                legend.position = \"none\",\n                text = element_text(size = 14),\n                plot.title = element_text(size = 12))\n        \n        # Customization for plots on the last row\n        if (plot_counter &gt; (rows - 1) * cols) {\n          plot_customization &lt;- plot_customization +\n            scale_x_discrete(labels = c(\"U\", \"\", \"Live\", \"\", \"\", \"Dead\", \"\")) + \n            ggtitle(NULL) + \n            labs(y = \"pg/mL (basal)\") \n        } else {\n          plot_customization &lt;- plot_customization +\n            scale_x_discrete(breaks = NULL, labels = NULL) +\n            ggtitle(plot_title) + \n            labs(y = \"pg/mL (apical)\") \n        } \n        \n        # Customization for plots on the first column\n        if ((plot_counter - 1) %% cols == 0) {\n          plot_customization &lt;- plot_customization +\n            scale_y_log10(limits = c(ymin, ymax),\n                          breaks = trans_breaks(\"log10\", function(x) 10^x),\n                          labels = trans_format(\"log10\", math_format(10^.x))) +\n            theme(plot.margin = unit(c(0, 0.05, -0.1, 0.1), \"in\"))\n        } else {\n          plot_customization &lt;- plot_customization +\n            scale_y_log10(limits = c(ymin, ymax), breaks = NULL, labels = NULL) +\n            labs(y = \"\") +\n            theme(plot.margin = unit(c(0, 0.05, -0.1, -0.15), \"in\"))\n        }\n        \n        # Conditionally add p-value annotations layer\n        if (nrow(contrast_sign) &gt; 0) {\n          plot_customization &lt;- plot_customization +\n            stat_pvalue_manual(contrast_sign, label = \"plot\", y.position = log10(ymax) - 0.01, \n                               step.increase = -0.03, tip.length = 0, bracket.shorten = 0.2, vjust = 0.6)\n        }\n        \n        # Add the customized plot to the sublist\n        sublist &lt;- c(sublist, list(plot_customization))\n        \n        plot_counter &lt;- plot_counter + 1  # Increment plot counter\n        break  # Exit the loop once the desired group is found\n      }\n    }\n  }\n  \n  figure &lt;- ggarrange(plotlist = sublist, nrow = rows, ncol = cols, widths = widths)\n  \n  return(figure)\n}\n\n\ngroups_2A &lt;- c(\"IL-1α_Apical\", \"IL-1RN_Apical\", \"IL-18_Apical\", \"IL-1α_Basal\", \"IL-1RN_Basal\", \"IL-18_Basal\")\nfigure_2A &lt;- filter_plots(Cyto_plots_list, Cyto_contrasts, groups_2A, ymin = 0.2, ymax = 10^4.25, rows = 2, cols = 3, widths = c(1.46, 1, 1))\nfigure_2A\n\ngroups_2B &lt;- c(\"CXCL-10_Apical\", \"CXCL-11_Apical\", \"CXCL-10_Basal\", \"LEGEND\")\nfigure_2B &lt;- filter_plots(Cyto_plots_list, Cyto_contrasts, groups_2B, ymin = 0.5, ymax = 10^3.2, rows = 2, cols = 2, widths = c(1.46, 1))\nfigure_2B\n\ngroups_2C &lt;- c(\"G-CSF_Apical\", \"CCL-20_Apical\", \"G-CSF_Basal\", \"CCL-20_Basal\")\nfigure_2C &lt;- filter_plots(Cyto_plots_list, Cyto_contrasts, groups_2C, ymin = 1, ymax = 10^5.5, rows = 2, cols = 2, widths = c(1.46, 1))\nfigure_2C\n\ngroups_2D &lt;- c(\"TNF-α_Apical\", \"IL-6_Apical\", \"IL-8_Apical\", \"TNF-α_Basal\", \"IL-6_Basal\", \"IL-8_Basal\")\nfigure_2D &lt;- filter_plots(Cyto_plots_list, Cyto_contrasts, groups_2D, ymin = 0.25, ymax = 10^5, rows = 2, cols = 3, widths = c(1.46, 1, 1))\nfigure_2D\n\nfigure_2up &lt;- ggarrange(figure_2A, figure_2B, labels = c(\"A\", \"B\"), widths = c(2, 1.44), hjust = -1.3, vjust = 1.1)\nfigure_2up               \n\nfigure_2down &lt;- ggarrange(figure_2C, figure_2D, labels = c(\"C\", \"D\"), widths = c(1.44, 2), hjust = -1.3, vjust = 1.1)\nfigure_2down \n\nfigure_2 &lt;- ggarrange(p.empty, figure_2up, p.empty, figure_2down, nrow = 4, heights = c(0.02, 1, 0.01, 1))\nfigure_2\n\n# Save figure \nggsave(plot = figure_2, filename = file.path(figures_folder, \"figure_2.png\"), width = unit(7, \"in\"), height = unit(9, \"in\"))\nggsave(plot = figure_2, filename = file.path(figures_folder, \"figure_2.svg\"), width = unit(7, \"in\"), height = unit(9, \"in\"))"
  },
  {
    "objectID": "Methods_Figures.html#other-code",
    "href": "Methods_Figures.html#other-code",
    "title": "Figures",
    "section": "Other code",
    "text": "Other code\nCode to make the legend from scratch\n\ndf_legend &lt;- tibble(\n  label = c(\n    \"&lt;b&gt;&lt;span style='color:#5b5b5b;'&gt;Uncol&lt;/span&gt;&lt;/b&gt;\",\n    \"&lt;b&gt;&lt;i&gt;&lt;span style='color:#0443DC;'&gt;Dpi&lt;/span&gt;&lt;/i&gt;\",\n    \"&lt;b&gt;&lt;i&gt;&lt;span style='color:#6D05A0;'&gt;Sau&lt;/span&gt;&lt;/i&gt;\", \n    \"&lt;b&gt;&lt;i&gt;&lt;span style='color:#928AB9;'&gt;Spn&lt;/span&gt;&lt;/i&gt;\"\n  ),\n  x = c(.1, .1, .1, .1),\n  y = c(.4, .3, .2, .1),\n  color = c(\"white\", \"white\", \"white\", \"white\"),\n  fill = c(\"white\",\"white\", \"white\", \"white\")\n)\n\np.legend &lt;-  ggplot(df_legend) +\n  aes(x, y, label = label, color = color, fill = fill) +\n  geom_textbox(width = unit(.8, \"in\")) +  \n  scale_color_identity() +\n  scale_fill_identity() +\n  xlim(0, .2) + ylim(.1, .4) +\n  theme_void() +\n  theme(plot.margin = unit(c(0,-5,.2,-5), \"in\"),\n        plot.background = element_rect(fill = \"white\", color = \"white\"))\n\np.legend"
  }
]